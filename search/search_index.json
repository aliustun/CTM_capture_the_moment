{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\udcf7 Capture the Moment","text":"<p>Welcome to the Capture the Moment project documentation. This project combines hardware and software to deliver a synchronized, real-time embedded solution.</p> <p></p>"},{"location":"#sections","title":"\ud83d\udcda Sections","text":"<ul> <li>Hardware Overview: Explore the hardware architecture, components used, and circuit diagrams.</li> <li>Software Architecture: Dive into the firmware and software stack that powers the system.</li> <li>Implementation Details: Detailed explanation of configuration, timing, and system integration.</li> </ul>"},{"location":"#requirements","title":"\ud83d\udee0\ufe0f Requirements","text":"<ul> <li>STM32F4 Discovery board</li> <li>OV7670 Camera module</li> <li>LCD interface</li> <li>STM32CubeMX and STM32CubeIDE</li> <li>FreeRTOS</li> </ul>"},{"location":"#getting-started","title":"\ud83d\ude80 Getting Started","text":"<p>If you\u2019re new, start with the Hardware Overview and then move to Software. For implementation-specific notes and timing configuration, see Details.</p>"},{"location":"Details/","title":"Project Details","text":"<p>This project is proposed in accordance with the ELE529E Lecture at Istanbul Technical University.</p>"},{"location":"Details/#1-introduction","title":"1. Introduction","text":"<p>This project investigates real-time image processing using FreeRTOS[^1] on STM32F429I Discovery Board. The board features a built-in LCD[^2] and supports DCMI[^3], making it ideal for interfacing with external cameras such as the OV7670. Applications of such embedded vision systems include industrial automation, surveillance, and portable diagnostics.</p>"},{"location":"Details/#2-system-architecture","title":"2. System Architecture","text":"<p>The system consists of a camera input, memory buffering using DMA[^4], and LCD output. The architecture uses: - OV7670 camera module connected via DCMI and SSCB[^5] - DMA for efficient memory transfer - Frame buffer in RAM or SDRAM - SPI[^6] for driving the onboard LCD - FreeRTOS for managing concurrent tasks</p> <pre><code>flowchart TD\n  OV7670 --&gt;|DCMI + SSCB + DMA| RAM[Frame Buffer]\n  RAM --&gt;|SPI with ILI9341 LCD Driver| LCD\n  FreeRTOS --&gt;|Schedules| Tasks\n</code></pre>"},{"location":"Details/#3-rtos-based-task-scheduling","title":"3. RTOS-Based Task Scheduling","text":"<p>FreeRTOS tasks manage the operation as follows: - CameraTask: Configures and triggers DCMI DMA captures. - DisplayTask: Reads from frame buffer and updates LCD. - ProcessingTask (optional): Applies filters or transformations to the frame buffer.</p> <p>Each task uses <code>osDelay</code>, mutexes or semaphores to synchronize access to the shared buffer.</p>"},{"location":"Details/#4-dma-and-interrupt-based-frame-capture","title":"4. DMA and Interrupt-Based Frame Capture","text":"<p>DMA is configured to transfer camera data from DCMI to RAM[^7], triggered on frame complete interrupts. This minimizes CPU overhead.</p> <ul> <li>DCMI_IRQHandler: Signals a task via semaphore or event flag.</li> <li>DMA Interrupt: Ensures frame is fully transferred before display.</li> </ul>"},{"location":"Details/#5-camera-and-lcd-driver-integration","title":"5. Camera and LCD Driver Integration","text":"<p>The BSP (Board Support Package) is used to simplify interfacing: - <code>stm32f429i_discovery_lcd.c</code> for LCD display - Custom <code>OV7670.c</code> using HAL I2C for SCCB control - CubeMX-generated <code>MX_DMA_Init()</code> and <code>MX_DCMI_Init()</code> handle peripheral setup</p>"},{"location":"Details/#6-real-time-image-filtering","title":"6. Real-Time Image Filtering","text":"<p>A simple image processing pipeline can include: - Grayscale conversion - Thresholding - Sobel edge detection</p> <p>This is performed inside <code>ProcessingTask</code>, and the result is written to a secondary buffer before being displayed.</p>"},{"location":"Details/#7-system-performance-and-evaluation","title":"7. System Performance and Evaluation","text":"<ul> <li>Frame Rate: Approx. 10-15 fps with basic processing</li> <li>Challenges:</li> <li>Synchronization between camera and display</li> <li>OV7670 clock and timing tuning</li> </ul>"},{"location":"Details/#8-conclusion-and-future-improvements","title":"8. Conclusion and Future Improvements","text":"<p>This project demonstrates a basic embedded vision pipeline using RTOS. Future extensions may include: - Performance optimization with SDRAM and cache - Integration with TouchGFX for UI - Object detection using CNNs (e.g., TinyML) - SD card logging or USB streaming</p>"},{"location":"Details/#9-references","title":"9. References","text":"<ol> <li>STM32F429I-DISC1 User Manual, STMicroelectronics  </li> <li>OV7670 Camera Module Datasheet  </li> <li>AN5020: STM32F4 DCMI Interface Application Note  </li> <li>FreeRTOS Documentation \u2013 https://freertos.org  </li> <li>STM32 HAL Reference Manual  </li> </ol> <p>[^1]: Real-Time Operating System [^2]: Liquid Crystal Display [^3]: Digital Camera Interface [^4]: Direct Memory Access [^5]: Serial Camera Control Bus [^6]: Serial Peripheral Interface [^7]: Random Access Memory</p>"},{"location":"Hardware/","title":"Project Hardware Details","text":"<ul> <li>STM32F429 Discovery Board</li> <li>Built-in Touchscreen LCD</li> <li>OV7670 Camera Module</li> </ul>"},{"location":"Hardware/#connections","title":"Connections","text":""},{"location":"Hardware/#dcmi1-wiring","title":"DCMI[^1] Wiring","text":"uC Board OV7670 PB7 VSYNC PA4 HS PA6 PCLK PA8 XCLK PE6 D7 PE5 D6 PD3 D5 PE4 D4 PC9 D3 PC8 D2 PC7 D1 PC6 D0"},{"location":"Hardware/#sscb2-wiring","title":"SSCB[^2] Wiring","text":"uC Board OV7670 PB8 SCL PB9 SDA"},{"location":"Hardware/#sdram3-wiring","title":"SDRAM[^3] Wiring","text":"uC Board IS42S16400J PB6 SDNE1 PB5 SDCKE1 PC0 SDNWE PD15 D1 PD14 D0 PD10 D15 PD9 D14 PD8 D13 PD1 D3 PD0 D2 PE15 D12 PE14 D11 PE13 D10 PE12 D9 PE11 D8 PE10 D7 PE9 D6 PE8 D5 PE7 D4 PE1 NBL1 PE0 NBL0 PF15 A9 PF14 A8 PF13 A7 PF12 A6 PF11 SDNRAS PF5 A5 PF4 A4 PF3 A3 PF2 A2 PF1 A1 PF0 A0 PG15 SDNCAS PG8 SDCLK PG5 BA1 PG4 BA0 PG1 A11 PG0 A10 <p>[^1]: Digital Camera Interface [^2]: Serial Camera Control Bus [^3]: Synchronous Dynamic Random Address Memory</p>"},{"location":"Software/","title":"Software Architecture","text":""},{"location":"Software/#clock-configuration","title":"Clock Configuration","text":"<p>Here, in clock configuration HSE[^1], an external clock source is configured and PLL[^2] scalers are to to it possible maximum values.  </p>"},{"location":"Software/#interfaces","title":"Interfaces","text":"<ul> <li>I2C1 is configured to set Registers of OV7670. </li> <li>SPI5 is configured to drive TFT[^3] LCD[^4] screen.  </li> </ul> <p>[^1]: High-Speed External [^2]: Phase Locked Loop [^3]: Thin Transistor Film [^4]: Liquid Crystal Display</p>"}]}