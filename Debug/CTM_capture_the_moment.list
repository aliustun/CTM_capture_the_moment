
CTM_capture_the_moment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005614  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  080057c0  080057c0  000067c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005920  08005920  00007010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005920  08005920  00006920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005928  08005928  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005928  08005928  00006928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800592c  0800592c  0000692c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005930  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007010  2**0
                  CONTENTS
 10 .bss          00025f10  20000010  20000010  00007010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025f20  20025f20  00007010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dc7d  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002806  00000000  00000000  00014cbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c48  00000000  00000000  000174c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000095d  00000000  00000000  00018110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002407c  00000000  00000000  00018a6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011658  00000000  00000000  0003cae9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5076  00000000  00000000  0004e141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001231b7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003138  00000000  00000000  001231fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  00126334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000010 	.word	0x20000010
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080057a8 	.word	0x080057a8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000014 	.word	0x20000014
 80001e8:	080057a8 	.word	0x080057a8

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b988 	b.w	8000514 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	468e      	mov	lr, r1
 8000224:	4604      	mov	r4, r0
 8000226:	4688      	mov	r8, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d962      	bls.n	80002f8 <__udivmoddi4+0xdc>
 8000232:	fab2 f682 	clz	r6, r2
 8000236:	b14e      	cbz	r6, 800024c <__udivmoddi4+0x30>
 8000238:	f1c6 0320 	rsb	r3, r6, #32
 800023c:	fa01 f806 	lsl.w	r8, r1, r6
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	40b7      	lsls	r7, r6
 8000246:	ea43 0808 	orr.w	r8, r3, r8
 800024a:	40b4      	lsls	r4, r6
 800024c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000250:	fa1f fc87 	uxth.w	ip, r7
 8000254:	fbb8 f1fe 	udiv	r1, r8, lr
 8000258:	0c23      	lsrs	r3, r4, #16
 800025a:	fb0e 8811 	mls	r8, lr, r1, r8
 800025e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000262:	fb01 f20c 	mul.w	r2, r1, ip
 8000266:	429a      	cmp	r2, r3
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0x62>
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000270:	f080 80ea 	bcs.w	8000448 <__udivmoddi4+0x22c>
 8000274:	429a      	cmp	r2, r3
 8000276:	f240 80e7 	bls.w	8000448 <__udivmoddi4+0x22c>
 800027a:	3902      	subs	r1, #2
 800027c:	443b      	add	r3, r7
 800027e:	1a9a      	subs	r2, r3, r2
 8000280:	b2a3      	uxth	r3, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000292:	459c      	cmp	ip, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x8e>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f100 32ff 	add.w	r2, r0, #4294967295
 800029c:	f080 80d6 	bcs.w	800044c <__udivmoddi4+0x230>
 80002a0:	459c      	cmp	ip, r3
 80002a2:	f240 80d3 	bls.w	800044c <__udivmoddi4+0x230>
 80002a6:	443b      	add	r3, r7
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ae:	eba3 030c 	sub.w	r3, r3, ip
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa2>
 80002b6:	40f3      	lsrs	r3, r6
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xb6>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb0>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa2>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x14c>
 80002da:	4573      	cmp	r3, lr
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xc8>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 8105 	bhi.w	80004ee <__udivmoddi4+0x2d2>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4690      	mov	r8, r2
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e5      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f2:	e9c5 4800 	strd	r4, r8, [r5]
 80002f6:	e7e2      	b.n	80002be <__udivmoddi4+0xa2>
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f000 8090 	beq.w	800041e <__udivmoddi4+0x202>
 80002fe:	fab2 f682 	clz	r6, r2
 8000302:	2e00      	cmp	r6, #0
 8000304:	f040 80a4 	bne.w	8000450 <__udivmoddi4+0x234>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	0c03      	lsrs	r3, r0, #16
 800030c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000310:	b280      	uxth	r0, r0
 8000312:	b2bc      	uxth	r4, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb2 fcfe 	udiv	ip, r2, lr
 800031a:	fb0e 221c 	mls	r2, lr, ip, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb04 f20c 	mul.w	r2, r4, ip
 8000326:	429a      	cmp	r2, r3
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0x11e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0x11c>
 8000332:	429a      	cmp	r2, r3
 8000334:	f200 80e0 	bhi.w	80004f8 <__udivmoddi4+0x2dc>
 8000338:	46c4      	mov	ip, r8
 800033a:	1a9b      	subs	r3, r3, r2
 800033c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000340:	fb0e 3312 	mls	r3, lr, r2, r3
 8000344:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000348:	fb02 f404 	mul.w	r4, r2, r4
 800034c:	429c      	cmp	r4, r3
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x144>
 8000350:	18fb      	adds	r3, r7, r3
 8000352:	f102 30ff 	add.w	r0, r2, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x142>
 8000358:	429c      	cmp	r4, r3
 800035a:	f200 80ca 	bhi.w	80004f2 <__udivmoddi4+0x2d6>
 800035e:	4602      	mov	r2, r0
 8000360:	1b1b      	subs	r3, r3, r4
 8000362:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x98>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa0e f401 	lsl.w	r4, lr, r1
 8000378:	fa20 f306 	lsr.w	r3, r0, r6
 800037c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000380:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	fa1f fc87 	uxth.w	ip, r7
 800038e:	fbbe f0f9 	udiv	r0, lr, r9
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	fb09 ee10 	mls	lr, r9, r0, lr
 8000398:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800039c:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1a0>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f100 3aff 	add.w	sl, r0, #4294967295
 80003ae:	f080 809c 	bcs.w	80004ea <__udivmoddi4+0x2ce>
 80003b2:	45a6      	cmp	lr, r4
 80003b4:	f240 8099 	bls.w	80004ea <__udivmoddi4+0x2ce>
 80003b8:	3802      	subs	r0, #2
 80003ba:	443c      	add	r4, r7
 80003bc:	eba4 040e 	sub.w	r4, r4, lr
 80003c0:	fa1f fe83 	uxth.w	lr, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d4:	45a4      	cmp	ip, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1ce>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f103 3eff 	add.w	lr, r3, #4294967295
 80003de:	f080 8082 	bcs.w	80004e6 <__udivmoddi4+0x2ca>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d97f      	bls.n	80004e6 <__udivmoddi4+0x2ca>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ee:	eba4 040c 	sub.w	r4, r4, ip
 80003f2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f6:	4564      	cmp	r4, ip
 80003f8:	4673      	mov	r3, lr
 80003fa:	46e1      	mov	r9, ip
 80003fc:	d362      	bcc.n	80004c4 <__udivmoddi4+0x2a8>
 80003fe:	d05f      	beq.n	80004c0 <__udivmoddi4+0x2a4>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x1fe>
 8000402:	ebb8 0203 	subs.w	r2, r8, r3
 8000406:	eb64 0409 	sbc.w	r4, r4, r9
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	fa22 f301 	lsr.w	r3, r2, r1
 8000412:	431e      	orrs	r6, r3
 8000414:	40cc      	lsrs	r4, r1
 8000416:	e9c5 6400 	strd	r6, r4, [r5]
 800041a:	2100      	movs	r1, #0
 800041c:	e74f      	b.n	80002be <__udivmoddi4+0xa2>
 800041e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000422:	0c01      	lsrs	r1, r0, #16
 8000424:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000428:	b280      	uxth	r0, r0
 800042a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042e:	463b      	mov	r3, r7
 8000430:	4638      	mov	r0, r7
 8000432:	463c      	mov	r4, r7
 8000434:	46b8      	mov	r8, r7
 8000436:	46be      	mov	lr, r7
 8000438:	2620      	movs	r6, #32
 800043a:	fbb1 f1f7 	udiv	r1, r1, r7
 800043e:	eba2 0208 	sub.w	r2, r2, r8
 8000442:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000446:	e766      	b.n	8000316 <__udivmoddi4+0xfa>
 8000448:	4601      	mov	r1, r0
 800044a:	e718      	b.n	800027e <__udivmoddi4+0x62>
 800044c:	4610      	mov	r0, r2
 800044e:	e72c      	b.n	80002aa <__udivmoddi4+0x8e>
 8000450:	f1c6 0220 	rsb	r2, r6, #32
 8000454:	fa2e f302 	lsr.w	r3, lr, r2
 8000458:	40b7      	lsls	r7, r6
 800045a:	40b1      	lsls	r1, r6
 800045c:	fa20 f202 	lsr.w	r2, r0, r2
 8000460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000464:	430a      	orrs	r2, r1
 8000466:	fbb3 f8fe 	udiv	r8, r3, lr
 800046a:	b2bc      	uxth	r4, r7
 800046c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000470:	0c11      	lsrs	r1, r2, #16
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb08 f904 	mul.w	r9, r8, r4
 800047a:	40b0      	lsls	r0, r6
 800047c:	4589      	cmp	r9, r1
 800047e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000482:	b280      	uxth	r0, r0
 8000484:	d93e      	bls.n	8000504 <__udivmoddi4+0x2e8>
 8000486:	1879      	adds	r1, r7, r1
 8000488:	f108 3cff 	add.w	ip, r8, #4294967295
 800048c:	d201      	bcs.n	8000492 <__udivmoddi4+0x276>
 800048e:	4589      	cmp	r9, r1
 8000490:	d81f      	bhi.n	80004d2 <__udivmoddi4+0x2b6>
 8000492:	eba1 0109 	sub.w	r1, r1, r9
 8000496:	fbb1 f9fe 	udiv	r9, r1, lr
 800049a:	fb09 f804 	mul.w	r8, r9, r4
 800049e:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a2:	b292      	uxth	r2, r2
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d229      	bcs.n	8000500 <__udivmoddi4+0x2e4>
 80004ac:	18ba      	adds	r2, r7, r2
 80004ae:	f109 31ff 	add.w	r1, r9, #4294967295
 80004b2:	d2c4      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b4:	4542      	cmp	r2, r8
 80004b6:	d2c2      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b8:	f1a9 0102 	sub.w	r1, r9, #2
 80004bc:	443a      	add	r2, r7
 80004be:	e7be      	b.n	800043e <__udivmoddi4+0x222>
 80004c0:	45f0      	cmp	r8, lr
 80004c2:	d29d      	bcs.n	8000400 <__udivmoddi4+0x1e4>
 80004c4:	ebbe 0302 	subs.w	r3, lr, r2
 80004c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004cc:	3801      	subs	r0, #1
 80004ce:	46e1      	mov	r9, ip
 80004d0:	e796      	b.n	8000400 <__udivmoddi4+0x1e4>
 80004d2:	eba7 0909 	sub.w	r9, r7, r9
 80004d6:	4449      	add	r1, r9
 80004d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e0:	fb09 f804 	mul.w	r8, r9, r4
 80004e4:	e7db      	b.n	800049e <__udivmoddi4+0x282>
 80004e6:	4673      	mov	r3, lr
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1ce>
 80004ea:	4650      	mov	r0, sl
 80004ec:	e766      	b.n	80003bc <__udivmoddi4+0x1a0>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e6fd      	b.n	80002ee <__udivmoddi4+0xd2>
 80004f2:	443b      	add	r3, r7
 80004f4:	3a02      	subs	r2, #2
 80004f6:	e733      	b.n	8000360 <__udivmoddi4+0x144>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	443b      	add	r3, r7
 80004fe:	e71c      	b.n	800033a <__udivmoddi4+0x11e>
 8000500:	4649      	mov	r1, r9
 8000502:	e79c      	b.n	800043e <__udivmoddi4+0x222>
 8000504:	eba1 0109 	sub.w	r1, r1, r9
 8000508:	46c4      	mov	ip, r8
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fb09 f804 	mul.w	r8, r9, r4
 8000512:	e7c4      	b.n	800049e <__udivmoddi4+0x282>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <Camera_Open>:
	{0x9a, 0x00},		{0xb1, 0x0c},
	{0xb2, 0x0e},		{0xb3, 0x82},
	{0x4b, 0x01},
};

te_CAMERA_ERROR_CODES Camera_Open(void) {
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
	te_CAMERA_ERROR_CODES error;
	Camera_GPIO_Init();
 800051e:	f000 f8ab 	bl	8000678 <Camera_GPIO_Init>
	if (error = Camera_I2C_Init() != E_CAMERA_ERR_NONE) return error;
 8000522:	f000 fa05 	bl	8000930 <Camera_I2C_Init>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	bf14      	ite	ne
 800052c:	2301      	movne	r3, #1
 800052e:	2300      	moveq	r3, #0
 8000530:	b2db      	uxtb	r3, r3
 8000532:	71fb      	strb	r3, [r7, #7]
 8000534:	79fb      	ldrb	r3, [r7, #7]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <Camera_Open+0x26>
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	e02c      	b.n	8000598 <Camera_Open+0x80>
	if (error = Camera_DCMI_Init() != E_CAMERA_ERR_NONE) return error;
 800053e:	f000 f95f 	bl	8000800 <Camera_DCMI_Init>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	bf14      	ite	ne
 8000548:	2301      	movne	r3, #1
 800054a:	2300      	moveq	r3, #0
 800054c:	b2db      	uxtb	r3, r3
 800054e:	71fb      	strb	r3, [r7, #7]
 8000550:	79fb      	ldrb	r3, [r7, #7]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <Camera_Open+0x42>
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	e01e      	b.n	8000598 <Camera_Open+0x80>
	if (error = Camera_DMA_Init() != E_CAMERA_ERR_NONE) return error;
 800055a:	f000 f99b 	bl	8000894 <Camera_DMA_Init>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	bf14      	ite	ne
 8000564:	2301      	movne	r3, #1
 8000566:	2300      	moveq	r3, #0
 8000568:	b2db      	uxtb	r3, r3
 800056a:	71fb      	strb	r3, [r7, #7]
 800056c:	79fb      	ldrb	r3, [r7, #7]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <Camera_Open+0x5e>
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	e010      	b.n	8000598 <Camera_Open+0x80>
	Camera_XCLK_Init();
 8000576:	f000 f96d 	bl	8000854 <Camera_XCLK_Init>
	if (error = Camera_Init() != E_CAMERA_ERR_NONE) return error;
 800057a:	f000 f825 	bl	80005c8 <Camera_Init>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	bf14      	ite	ne
 8000584:	2301      	movne	r3, #1
 8000586:	2300      	moveq	r3, #0
 8000588:	b2db      	uxtb	r3, r3
 800058a:	71fb      	strb	r3, [r7, #7]
 800058c:	79fb      	ldrb	r3, [r7, #7]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <Camera_Open+0x7e>
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	e000      	b.n	8000598 <Camera_Open+0x80>
	return E_CAMERA_ERR_NONE;
 8000596:	2300      	movs	r3, #0
}
 8000598:	4618      	mov	r0, r3
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}

080005a0 <Camera_Delay>:

void Camera_Delay (volatile uint16_t nCount){
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	80fb      	strh	r3, [r7, #6]
  while(nCount--){
 80005aa:	bf00      	nop
 80005ac:	88fb      	ldrh	r3, [r7, #6]
 80005ae:	b29b      	uxth	r3, r3
 80005b0:	1e5a      	subs	r2, r3, #1
 80005b2:	b292      	uxth	r2, r2
 80005b4:	80fa      	strh	r2, [r7, #6]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d1f8      	bne.n	80005ac <Camera_Delay+0xc>
  }
}
 80005ba:	bf00      	nop
 80005bc:	bf00      	nop
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr

080005c8 <Camera_Init>:

static te_CAMERA_ERROR_CODES Camera_Init(void) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
	uint8_t data, i = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	71fb      	strb	r3, [r7, #7]
	bool err;
	LCD_Fill_Screen(PURPLE);
 80005d2:	f647 000f 	movw	r0, #30735	@ 0x780f
 80005d6:	f000 fcaf 	bl	8000f38 <LCD_Fill_Screen>
	LCD_Set_Rotation(SCREEN_HORIZONTAL_1);
 80005da:	2001      	movs	r0, #1
 80005dc:	f000 fd48 	bl	8001070 <LCD_Set_Rotation>
	// Configure camera registers
	for(i=0; i<OV7670_REG_NUM ;i++){
 80005e0:	2300      	movs	r3, #0
 80005e2:	71fb      	strb	r3, [r7, #7]
 80005e4:	e01c      	b.n	8000620 <Camera_Init+0x58>
		data = OV7670_reg[i][1];
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	4a11      	ldr	r2, [pc, #68]	@ (8000630 <Camera_Init+0x68>)
 80005ea:	005b      	lsls	r3, r3, #1
 80005ec:	4413      	add	r3, r2
 80005ee:	785b      	ldrb	r3, [r3, #1]
 80005f0:	717b      	strb	r3, [r7, #5]
		err = Camera_Write(OV7670_reg[i][0], &data);
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	4a0e      	ldr	r2, [pc, #56]	@ (8000630 <Camera_Init+0x68>)
 80005f6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80005fa:	1d7a      	adds	r2, r7, #5
 80005fc:	4611      	mov	r1, r2
 80005fe:	4618      	mov	r0, r3
 8000600:	f000 f818 	bl	8000634 <Camera_Write>
 8000604:	4603      	mov	r3, r0
 8000606:	71bb      	strb	r3, [r7, #6]

		if (err == true)
 8000608:	79bb      	ldrb	r3, [r7, #6]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <Camera_Init+0x4a>
			return E_CAMERA_ERR_CAMERA_INIT;
 800060e:	2304      	movs	r3, #4
 8000610:	e00a      	b.n	8000628 <Camera_Init+0x60>
		Camera_Delay(0xFFFF);
 8000612:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000616:	f7ff ffc3 	bl	80005a0 <Camera_Delay>
	for(i=0; i<OV7670_REG_NUM ;i++){
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	3301      	adds	r3, #1
 800061e:	71fb      	strb	r3, [r7, #7]
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	2b79      	cmp	r3, #121	@ 0x79
 8000624:	d9df      	bls.n	80005e6 <Camera_Init+0x1e>
	}

	return E_CAMERA_ERR_NONE;
 8000626:	2300      	movs	r3, #0
}
 8000628:	4618      	mov	r0, r3
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	080057c0 	.word	0x080057c0

08000634 <Camera_Write>:

bool Camera_Write(uint8_t reg_addr, uint8_t* data)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b088      	sub	sp, #32
 8000638:	af04      	add	r7, sp, #16
 800063a:	4603      	mov	r3, r0
 800063c:	6039      	str	r1, [r7, #0]
 800063e:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef status;

    status = HAL_I2C_Mem_Write(
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	b29a      	uxth	r2, r3
 8000644:	f04f 33ff 	mov.w	r3, #4294967295
 8000648:	9302      	str	r3, [sp, #8]
 800064a:	2301      	movs	r3, #1
 800064c:	9301      	str	r3, [sp, #4]
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	2301      	movs	r3, #1
 8000654:	2142      	movs	r1, #66	@ 0x42
 8000656:	4807      	ldr	r0, [pc, #28]	@ (8000674 <Camera_Write+0x40>)
 8000658:	f003 fc96 	bl	8003f88 <HAL_I2C_Mem_Write>
 800065c:	4603      	mov	r3, r0
 800065e:	73fb      	strb	r3, [r7, #15]
        data,
        1,
        HAL_MAX_DELAY
    );

    return (status != HAL_OK);
 8000660:	7bfb      	ldrb	r3, [r7, #15]
 8000662:	2b00      	cmp	r3, #0
 8000664:	bf14      	ite	ne
 8000666:	2301      	movne	r3, #1
 8000668:	2300      	moveq	r3, #0
 800066a:	b2db      	uxtb	r3, r3
}
 800066c:	4618      	mov	r0, r3
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20025e70 	.word	0x20025e70

08000678 <Camera_GPIO_Init>:

static void Camera_GPIO_Init(void) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b08c      	sub	sp, #48	@ 0x30
 800067c:	af00      	add	r7, sp, #0
	__HAL_RCC_DCMI_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	61bb      	str	r3, [r7, #24]
 8000682:	4b5a      	ldr	r3, [pc, #360]	@ (80007ec <Camera_GPIO_Init+0x174>)
 8000684:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000686:	4a59      	ldr	r2, [pc, #356]	@ (80007ec <Camera_GPIO_Init+0x174>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	6353      	str	r3, [r2, #52]	@ 0x34
 800068e:	4b57      	ldr	r3, [pc, #348]	@ (80007ec <Camera_GPIO_Init+0x174>)
 8000690:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	61bb      	str	r3, [r7, #24]
 8000698:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_DMA2_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	617b      	str	r3, [r7, #20]
 800069e:	4b53      	ldr	r3, [pc, #332]	@ (80007ec <Camera_GPIO_Init+0x174>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	4a52      	ldr	r2, [pc, #328]	@ (80007ec <Camera_GPIO_Init+0x174>)
 80006a4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80006a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006aa:	4b50      	ldr	r3, [pc, #320]	@ (80007ec <Camera_GPIO_Init+0x174>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80006b2:	617b      	str	r3, [r7, #20]
 80006b4:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_I2C1_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	613b      	str	r3, [r7, #16]
 80006ba:	4b4c      	ldr	r3, [pc, #304]	@ (80007ec <Camera_GPIO_Init+0x174>)
 80006bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006be:	4a4b      	ldr	r2, [pc, #300]	@ (80007ec <Camera_GPIO_Init+0x174>)
 80006c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80006c6:	4b49      	ldr	r3, [pc, #292]	@ (80007ec <Camera_GPIO_Init+0x174>)
 80006c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006ce:	613b      	str	r3, [r7, #16]
 80006d0:	693b      	ldr	r3, [r7, #16]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
 80006d6:	4b45      	ldr	r3, [pc, #276]	@ (80007ec <Camera_GPIO_Init+0x174>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006da:	4a44      	ldr	r2, [pc, #272]	@ (80007ec <Camera_GPIO_Init+0x174>)
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e2:	4b42      	ldr	r3, [pc, #264]	@ (80007ec <Camera_GPIO_Init+0x174>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	4b3e      	ldr	r3, [pc, #248]	@ (80007ec <Camera_GPIO_Init+0x174>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	4a3d      	ldr	r2, [pc, #244]	@ (80007ec <Camera_GPIO_Init+0x174>)
 80006f8:	f043 0302 	orr.w	r3, r3, #2
 80006fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006fe:	4b3b      	ldr	r3, [pc, #236]	@ (80007ec <Camera_GPIO_Init+0x174>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000702:	f003 0302 	and.w	r3, r3, #2
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	4b37      	ldr	r3, [pc, #220]	@ (80007ec <Camera_GPIO_Init+0x174>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	4a36      	ldr	r2, [pc, #216]	@ (80007ec <Camera_GPIO_Init+0x174>)
 8000714:	f043 0304 	orr.w	r3, r3, #4
 8000718:	6313      	str	r3, [r2, #48]	@ 0x30
 800071a:	4b34      	ldr	r3, [pc, #208]	@ (80007ec <Camera_GPIO_Init+0x174>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	f003 0304 	and.w	r3, r3, #4
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	603b      	str	r3, [r7, #0]
 800072a:	4b30      	ldr	r3, [pc, #192]	@ (80007ec <Camera_GPIO_Init+0x174>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	4a2f      	ldr	r2, [pc, #188]	@ (80007ec <Camera_GPIO_Init+0x174>)
 8000730:	f043 0310 	orr.w	r3, r3, #16
 8000734:	6313      	str	r3, [r2, #48]	@ 0x30
 8000736:	4b2d      	ldr	r3, [pc, #180]	@ (80007ec <Camera_GPIO_Init+0x174>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	f003 0310 	and.w	r3, r3, #16
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	683b      	ldr	r3, [r7, #0]


	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]

	//PA8 (XCLK)
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000752:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000756:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000758:	2302      	movs	r3, #2
 800075a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800075c:	2301      	movs	r3, #1
 800075e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000760:	2303      	movs	r3, #3
 8000762:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000764:	f107 031c 	add.w	r3, r7, #28
 8000768:	4619      	mov	r1, r3
 800076a:	4821      	ldr	r0, [pc, #132]	@ (80007f0 <Camera_GPIO_Init+0x178>)
 800076c:	f003 f902 	bl	8003974 <HAL_GPIO_Init>

	// PA4 (HREF), PA6 (PCLK)
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_6;
 8000770:	2350      	movs	r3, #80	@ 0x50
 8000772:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000774:	2302      	movs	r3, #2
 8000776:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000778:	2301      	movs	r3, #1
 800077a:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800077c:	2302      	movs	r3, #2
 800077e:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000780:	230d      	movs	r3, #13
 8000782:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000784:	f107 031c 	add.w	r3, r7, #28
 8000788:	4619      	mov	r1, r3
 800078a:	4819      	ldr	r0, [pc, #100]	@ (80007f0 <Camera_GPIO_Init+0x178>)
 800078c:	f003 f8f2 	bl	8003974 <HAL_GPIO_Init>

	// PB6 (D5), PB7 (VSYNC)
	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8000790:	23c0      	movs	r3, #192	@ 0xc0
 8000792:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000794:	f107 031c 	add.w	r3, r7, #28
 8000798:	4619      	mov	r1, r3
 800079a:	4816      	ldr	r0, [pc, #88]	@ (80007f4 <Camera_GPIO_Init+0x17c>)
 800079c:	f003 f8ea 	bl	8003974 <HAL_GPIO_Init>

	// PC6 (D0), PC7 (D1), PC8 (D2), PC9 (D3)
	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 80007a0:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80007a4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007a6:	f107 031c 	add.w	r3, r7, #28
 80007aa:	4619      	mov	r1, r3
 80007ac:	4812      	ldr	r0, [pc, #72]	@ (80007f8 <Camera_GPIO_Init+0x180>)
 80007ae:	f003 f8e1 	bl	8003974 <HAL_GPIO_Init>

	// PE4 (D4), PE5 (D6), PE6 (D7)
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6;
 80007b2:	2370      	movs	r3, #112	@ 0x70
 80007b4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	4619      	mov	r1, r3
 80007bc:	480f      	ldr	r0, [pc, #60]	@ (80007fc <Camera_GPIO_Init+0x184>)
 80007be:	f003 f8d9 	bl	8003974 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 80007c2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80007c6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;         // Open-drain mode (I2C için zorunlu)
 80007c8:	2312      	movs	r3, #18
 80007ca:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;             // Pull-up aktif
 80007cc:	2301      	movs	r3, #1
 80007ce:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;    // İsteğe göre değişebilir (LOW/VERY_HIGH)
 80007d0:	2300      	movs	r3, #0
 80007d2:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007d4:	2304      	movs	r3, #4
 80007d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d8:	f107 031c 	add.w	r3, r7, #28
 80007dc:	4619      	mov	r1, r3
 80007de:	4805      	ldr	r0, [pc, #20]	@ (80007f4 <Camera_GPIO_Init+0x17c>)
 80007e0:	f003 f8c8 	bl	8003974 <HAL_GPIO_Init>

}
 80007e4:	bf00      	nop
 80007e6:	3730      	adds	r7, #48	@ 0x30
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40020000 	.word	0x40020000
 80007f4:	40020400 	.word	0x40020400
 80007f8:	40020800 	.word	0x40020800
 80007fc:	40021000 	.word	0x40021000

08000800 <Camera_DCMI_Init>:

static te_CAMERA_ERROR_CODES Camera_DCMI_Init(void) {
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
	hdcmi.Instance = DCMI;
 8000804:	4b11      	ldr	r3, [pc, #68]	@ (800084c <Camera_DCMI_Init+0x4c>)
 8000806:	4a12      	ldr	r2, [pc, #72]	@ (8000850 <Camera_DCMI_Init+0x50>)
 8000808:	601a      	str	r2, [r3, #0]
	hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800080a:	4b10      	ldr	r3, [pc, #64]	@ (800084c <Camera_DCMI_Init+0x4c>)
 800080c:	2200      	movs	r2, #0
 800080e:	605a      	str	r2, [r3, #4]
	hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000810:	4b0e      	ldr	r3, [pc, #56]	@ (800084c <Camera_DCMI_Init+0x4c>)
 8000812:	2220      	movs	r2, #32
 8000814:	609a      	str	r2, [r3, #8]
	hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8000816:	4b0d      	ldr	r3, [pc, #52]	@ (800084c <Camera_DCMI_Init+0x4c>)
 8000818:	2280      	movs	r2, #128	@ 0x80
 800081a:	60da      	str	r2, [r3, #12]
	hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 800081c:	4b0b      	ldr	r3, [pc, #44]	@ (800084c <Camera_DCMI_Init+0x4c>)
 800081e:	2200      	movs	r2, #0
 8000820:	611a      	str	r2, [r3, #16]
	hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000822:	4b0a      	ldr	r3, [pc, #40]	@ (800084c <Camera_DCMI_Init+0x4c>)
 8000824:	2200      	movs	r2, #0
 8000826:	615a      	str	r2, [r3, #20]
	hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000828:	4b08      	ldr	r3, [pc, #32]	@ (800084c <Camera_DCMI_Init+0x4c>)
 800082a:	2200      	movs	r2, #0
 800082c:	619a      	str	r2, [r3, #24]
	hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800082e:	4b07      	ldr	r3, [pc, #28]	@ (800084c <Camera_DCMI_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	621a      	str	r2, [r3, #32]

	if (HAL_DCMI_Init(&hdcmi) != HAL_OK) {
 8000834:	4805      	ldr	r0, [pc, #20]	@ (800084c <Camera_DCMI_Init+0x4c>)
 8000836:	f001 fb37 	bl	8001ea8 <HAL_DCMI_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <Camera_DCMI_Init+0x44>
		return E_CAMERA_ERR_DCMI_INIT;
 8000840:	2302      	movs	r3, #2
 8000842:	e000      	b.n	8000846 <Camera_DCMI_Init+0x46>
	}

	return E_CAMERA_ERR_NONE;
 8000844:	2300      	movs	r3, #0
}
 8000846:	4618      	mov	r0, r3
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20025dd0 	.word	0x20025dd0
 8000850:	50050000 	.word	0x50050000

08000854 <Camera_XCLK_Init>:

static void Camera_XCLK_Init() {
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	4b0c      	ldr	r3, [pc, #48]	@ (8000890 <Camera_XCLK_Init+0x3c>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	4a0b      	ldr	r2, [pc, #44]	@ (8000890 <Camera_XCLK_Init+0x3c>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6313      	str	r3, [r2, #48]	@ 0x30
 800086a:	4b09      	ldr	r3, [pc, #36]	@ (8000890 <Camera_XCLK_Init+0x3c>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
	HAL_RCC_EnableCSS();
 8000876:	f004 fb81 	bl	8004f7c <HAL_RCC_EnableCSS>
	HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_4);
 800087a:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800087e:	f44f 01c0 	mov.w	r1, #6291456	@ 0x600000
 8000882:	2000      	movs	r0, #0
 8000884:	f004 fb12 	bl	8004eac <HAL_RCC_MCOConfig>
}
 8000888:	bf00      	nop
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40023800 	.word	0x40023800

08000894 <Camera_DMA_Init>:

static te_CAMERA_ERROR_CODES Camera_DMA_Init(void) {
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
	hdma_dcmi.Instance = DMA2_Stream1;
 8000898:	4b22      	ldr	r3, [pc, #136]	@ (8000924 <Camera_DMA_Init+0x90>)
 800089a:	4a23      	ldr	r2, [pc, #140]	@ (8000928 <Camera_DMA_Init+0x94>)
 800089c:	601a      	str	r2, [r3, #0]
	hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 800089e:	4b21      	ldr	r3, [pc, #132]	@ (8000924 <Camera_DMA_Init+0x90>)
 80008a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80008a4:	605a      	str	r2, [r3, #4]
	hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008a6:	4b1f      	ldr	r3, [pc, #124]	@ (8000924 <Camera_DMA_Init+0x90>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
	hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80008ac:	4b1d      	ldr	r3, [pc, #116]	@ (8000924 <Camera_DMA_Init+0x90>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
	hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80008b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000924 <Camera_DMA_Init+0x90>)
 80008b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008b8:	611a      	str	r2, [r3, #16]
	hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80008ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000924 <Camera_DMA_Init+0x90>)
 80008bc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80008c0:	615a      	str	r2, [r3, #20]
	hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008c2:	4b18      	ldr	r3, [pc, #96]	@ (8000924 <Camera_DMA_Init+0x90>)
 80008c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80008c8:	619a      	str	r2, [r3, #24]
	hdma_dcmi.Init.Mode = DMA_NORMAL;
 80008ca:	4b16      	ldr	r3, [pc, #88]	@ (8000924 <Camera_DMA_Init+0x90>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	61da      	str	r2, [r3, #28]
	hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 80008d0:	4b14      	ldr	r3, [pc, #80]	@ (8000924 <Camera_DMA_Init+0x90>)
 80008d2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80008d6:	621a      	str	r2, [r3, #32]
	hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80008d8:	4b12      	ldr	r3, [pc, #72]	@ (8000924 <Camera_DMA_Init+0x90>)
 80008da:	2204      	movs	r2, #4
 80008dc:	625a      	str	r2, [r3, #36]	@ 0x24
	hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80008de:	4b11      	ldr	r3, [pc, #68]	@ (8000924 <Camera_DMA_Init+0x90>)
 80008e0:	2203      	movs	r2, #3
 80008e2:	629a      	str	r2, [r3, #40]	@ 0x28
	hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000924 <Camera_DMA_Init+0x90>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	62da      	str	r2, [r3, #44]	@ 0x2c
	hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000924 <Camera_DMA_Init+0x90>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	631a      	str	r2, [r3, #48]	@ 0x30

	__HAL_LINKDMA(&hdcmi, DMA_Handle, hdma_dcmi);
 80008f0:	4b0e      	ldr	r3, [pc, #56]	@ (800092c <Camera_DMA_Init+0x98>)
 80008f2:	4a0c      	ldr	r2, [pc, #48]	@ (8000924 <Camera_DMA_Init+0x90>)
 80008f4:	639a      	str	r2, [r3, #56]	@ 0x38
 80008f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000924 <Camera_DMA_Init+0x90>)
 80008f8:	4a0c      	ldr	r2, [pc, #48]	@ (800092c <Camera_DMA_Init+0x98>)
 80008fa:	639a      	str	r2, [r3, #56]	@ 0x38
	if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK) {
 80008fc:	4809      	ldr	r0, [pc, #36]	@ (8000924 <Camera_DMA_Init+0x90>)
 80008fe:	f001 fb41 	bl	8001f84 <HAL_DMA_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <Camera_DMA_Init+0x78>
		return E_CAMERA_ERR_DMA_INIT;
 8000908:	2303      	movs	r3, #3
 800090a:	e008      	b.n	800091e <Camera_DMA_Init+0x8a>
	}

	// DMA interrupt'ı enable et
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800090c:	2200      	movs	r2, #0
 800090e:	2100      	movs	r1, #0
 8000910:	2039      	movs	r0, #57	@ 0x39
 8000912:	f001 f938 	bl	8001b86 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000916:	2039      	movs	r0, #57	@ 0x39
 8000918:	f001 f951 	bl	8001bbe <HAL_NVIC_EnableIRQ>

	return E_CAMERA_ERR_NONE;
 800091c:	2300      	movs	r3, #0
}
 800091e:	4618      	mov	r0, r3
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20025e10 	.word	0x20025e10
 8000928:	40026428 	.word	0x40026428
 800092c:	20025dd0 	.word	0x20025dd0

08000930 <Camera_I2C_Init>:

static te_CAMERA_ERROR_CODES Camera_I2C_Init(void) {
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
	hi2c1.Instance = I2C1;
 8000934:	4b1c      	ldr	r3, [pc, #112]	@ (80009a8 <Camera_I2C_Init+0x78>)
 8000936:	4a1d      	ldr	r2, [pc, #116]	@ (80009ac <Camera_I2C_Init+0x7c>)
 8000938:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800093a:	4b1b      	ldr	r3, [pc, #108]	@ (80009a8 <Camera_I2C_Init+0x78>)
 800093c:	4a1c      	ldr	r2, [pc, #112]	@ (80009b0 <Camera_I2C_Init+0x80>)
 800093e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000940:	4b19      	ldr	r3, [pc, #100]	@ (80009a8 <Camera_I2C_Init+0x78>)
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000946:	4b18      	ldr	r3, [pc, #96]	@ (80009a8 <Camera_I2C_Init+0x78>)
 8000948:	2200      	movs	r2, #0
 800094a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800094c:	4b16      	ldr	r3, [pc, #88]	@ (80009a8 <Camera_I2C_Init+0x78>)
 800094e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000952:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000954:	4b14      	ldr	r3, [pc, #80]	@ (80009a8 <Camera_I2C_Init+0x78>)
 8000956:	2200      	movs	r2, #0
 8000958:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800095a:	4b13      	ldr	r3, [pc, #76]	@ (80009a8 <Camera_I2C_Init+0x78>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000960:	4b11      	ldr	r3, [pc, #68]	@ (80009a8 <Camera_I2C_Init+0x78>)
 8000962:	2200      	movs	r2, #0
 8000964:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000966:	4b10      	ldr	r3, [pc, #64]	@ (80009a8 <Camera_I2C_Init+0x78>)
 8000968:	2200      	movs	r2, #0
 800096a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800096c:	480e      	ldr	r0, [pc, #56]	@ (80009a8 <Camera_I2C_Init+0x78>)
 800096e:	f003 f9c7 	bl	8003d00 <HAL_I2C_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <Camera_I2C_Init+0x4c>
	{
	return E_CAMERA_ERR_I2C_INIT;
 8000978:	2301      	movs	r3, #1
 800097a:	e012      	b.n	80009a2 <Camera_I2C_Init+0x72>
	}

	/** Configure Analogue filter
	*/
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800097c:	2100      	movs	r1, #0
 800097e:	480a      	ldr	r0, [pc, #40]	@ (80009a8 <Camera_I2C_Init+0x78>)
 8000980:	f003 fe6b 	bl	800465a <HAL_I2CEx_ConfigAnalogFilter>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <Camera_I2C_Init+0x5e>
	{
	  return E_CAMERA_ERR_I2C_INIT;
 800098a:	2301      	movs	r3, #1
 800098c:	e009      	b.n	80009a2 <Camera_I2C_Init+0x72>
	}

	/** Configure Digital filter
	*/
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800098e:	2100      	movs	r1, #0
 8000990:	4805      	ldr	r0, [pc, #20]	@ (80009a8 <Camera_I2C_Init+0x78>)
 8000992:	f003 fe9e 	bl	80046d2 <HAL_I2CEx_ConfigDigitalFilter>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <Camera_I2C_Init+0x70>
	{
	  return E_CAMERA_ERR_I2C_INIT;
 800099c:	2301      	movs	r3, #1
 800099e:	e000      	b.n	80009a2 <Camera_I2C_Init+0x72>
	}

	return E_CAMERA_ERR_NONE;
 80009a0:	2300      	movs	r3, #0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20025e70 	.word	0x20025e70
 80009ac:	40005400 	.word	0x40005400
 80009b0:	000186a0 	.word	0x000186a0

080009b4 <LCD_Open>:
void LCD_Delay(int delay);




te_LCD_ERROR_CODES LCD_Open(void) {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
	LCD_GPIO_Init();
 80009b8:	f000 f80e 	bl	80009d8 <LCD_GPIO_Init>
	LCD_SPI_Init();
 80009bc:	f000 f88a 	bl	8000ad4 <LCD_SPI_Init>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80009c0:	2201      	movs	r2, #1
 80009c2:	2104      	movs	r1, #4
 80009c4:	4803      	ldr	r0, [pc, #12]	@ (80009d4 <LCD_Open+0x20>)
 80009c6:	f003 f981 	bl	8003ccc <HAL_GPIO_WritePin>

	LCD_Init();
 80009ca:	f000 f8c1 	bl	8000b50 <LCD_Init>
	return E_LCD_ERR_NONE;
 80009ce:	2300      	movs	r3, #0
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40020800 	.word	0x40020800

080009d8 <LCD_GPIO_Init>:

static te_LCD_ERROR_CODES LCD_GPIO_Init(void) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	@ 0x28
 80009dc:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
 80009ec:	611a      	str	r2, [r3, #16]

	__HAL_RCC_SPI5_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	613b      	str	r3, [r7, #16]
 80009f2:	4b34      	ldr	r3, [pc, #208]	@ (8000ac4 <LCD_GPIO_Init+0xec>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009f6:	4a33      	ldr	r2, [pc, #204]	@ (8000ac4 <LCD_GPIO_Init+0xec>)
 80009f8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80009fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80009fe:	4b31      	ldr	r3, [pc, #196]	@ (8000ac4 <LCD_GPIO_Init+0xec>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	4b2d      	ldr	r3, [pc, #180]	@ (8000ac4 <LCD_GPIO_Init+0xec>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	4a2c      	ldr	r2, [pc, #176]	@ (8000ac4 <LCD_GPIO_Init+0xec>)
 8000a14:	f043 0320 	orr.w	r3, r3, #32
 8000a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ac4 <LCD_GPIO_Init+0xec>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	f003 0320 	and.w	r3, r3, #32
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	60bb      	str	r3, [r7, #8]
 8000a2a:	4b26      	ldr	r3, [pc, #152]	@ (8000ac4 <LCD_GPIO_Init+0xec>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	4a25      	ldr	r2, [pc, #148]	@ (8000ac4 <LCD_GPIO_Init+0xec>)
 8000a30:	f043 0308 	orr.w	r3, r3, #8
 8000a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a36:	4b23      	ldr	r3, [pc, #140]	@ (8000ac4 <LCD_GPIO_Init+0xec>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	f003 0308 	and.w	r3, r3, #8
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	4b1f      	ldr	r3, [pc, #124]	@ (8000ac4 <LCD_GPIO_Init+0xec>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	4a1e      	ldr	r2, [pc, #120]	@ (8000ac4 <LCD_GPIO_Init+0xec>)
 8000a4c:	f043 0304 	orr.w	r3, r3, #4
 8000a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a52:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac4 <LCD_GPIO_Init+0xec>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	f003 0304 	and.w	r3, r3, #4
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]



	//PC2 - PD13 LCD Pin Configuration
	GPIO_InitStruct.Pin = LCD_CS_PIN;
 8000a5e:	2304      	movs	r3, #4
 8000a60:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LCD_CS_PORT, &GPIO_InitStruct);
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	4619      	mov	r1, r3
 8000a74:	4814      	ldr	r0, [pc, #80]	@ (8000ac8 <LCD_GPIO_Init+0xf0>)
 8000a76:	f002 ff7d 	bl	8003974 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_WR_PIN;
 8000a7a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a7e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a80:	2301      	movs	r3, #1
 8000a82:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LCD_WR_PORT, &GPIO_InitStruct);
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4619      	mov	r1, r3
 8000a92:	480e      	ldr	r0, [pc, #56]	@ (8000acc <LCD_GPIO_Init+0xf4>)
 8000a94:	f002 ff6e 	bl	8003974 <HAL_GPIO_Init>

	// PF7 - PF8 - PF9 SPI Pin Configuration
	GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000a98:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000a9c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000aaa:	2305      	movs	r3, #5
 8000aac:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4806      	ldr	r0, [pc, #24]	@ (8000ad0 <LCD_GPIO_Init+0xf8>)
 8000ab6:	f002 ff5d 	bl	8003974 <HAL_GPIO_Init>

	return E_LCD_ERR_NONE;
 8000aba:	2300      	movs	r3, #0
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3728      	adds	r7, #40	@ 0x28
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40020800 	.word	0x40020800
 8000acc:	40020c00 	.word	0x40020c00
 8000ad0:	40021400 	.word	0x40021400

08000ad4 <LCD_SPI_Init>:

static te_LCD_ERROR_CODES LCD_SPI_Init(void) {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	//SPI Configuration
	hspi5.Instance = SPI5;
 8000ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b44 <LCD_SPI_Init+0x70>)
 8000ada:	4a1b      	ldr	r2, [pc, #108]	@ (8000b48 <LCD_SPI_Init+0x74>)
 8000adc:	601a      	str	r2, [r3, #0]
	hspi5.Init.Mode = SPI_MODE_MASTER;
 8000ade:	4b19      	ldr	r3, [pc, #100]	@ (8000b44 <LCD_SPI_Init+0x70>)
 8000ae0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ae4:	605a      	str	r2, [r3, #4]
	hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000ae6:	4b17      	ldr	r3, [pc, #92]	@ (8000b44 <LCD_SPI_Init+0x70>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
	hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000aec:	4b15      	ldr	r3, [pc, #84]	@ (8000b44 <LCD_SPI_Init+0x70>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	60da      	str	r2, [r3, #12]
	hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000af2:	4b14      	ldr	r3, [pc, #80]	@ (8000b44 <LCD_SPI_Init+0x70>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
	hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000af8:	4b12      	ldr	r3, [pc, #72]	@ (8000b44 <LCD_SPI_Init+0x70>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	615a      	str	r2, [r3, #20]
	hspi5.Init.NSS = SPI_NSS_SOFT;
 8000afe:	4b11      	ldr	r3, [pc, #68]	@ (8000b44 <LCD_SPI_Init+0x70>)
 8000b00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b04:	619a      	str	r2, [r3, #24]
	hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b06:	4b0f      	ldr	r3, [pc, #60]	@ (8000b44 <LCD_SPI_Init+0x70>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	61da      	str	r2, [r3, #28]
	hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b0c:	4b0d      	ldr	r3, [pc, #52]	@ (8000b44 <LCD_SPI_Init+0x70>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	621a      	str	r2, [r3, #32]
	hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b12:	4b0c      	ldr	r3, [pc, #48]	@ (8000b44 <LCD_SPI_Init+0x70>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b18:	4b0a      	ldr	r3, [pc, #40]	@ (8000b44 <LCD_SPI_Init+0x70>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi5.Init.CRCPolynomial = 10;
 8000b1e:	4b09      	ldr	r3, [pc, #36]	@ (8000b44 <LCD_SPI_Init+0x70>)
 8000b20:	220a      	movs	r2, #10
 8000b22:	62da      	str	r2, [r3, #44]	@ 0x2c

	if (HAL_SPI_Init(&hspi5) != HAL_OK) {
 8000b24:	4807      	ldr	r0, [pc, #28]	@ (8000b44 <LCD_SPI_Init+0x70>)
 8000b26:	f004 fb5b 	bl	80051e0 <HAL_SPI_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <LCD_SPI_Init+0x60>
		return E_LCD_ERR_SPI_INIT;
 8000b30:	2301      	movs	r3, #1
 8000b32:	e005      	b.n	8000b40 <LCD_SPI_Init+0x6c>
	}

	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2104      	movs	r1, #4
 8000b38:	4804      	ldr	r0, [pc, #16]	@ (8000b4c <LCD_SPI_Init+0x78>)
 8000b3a:	f003 f8c7 	bl	8003ccc <HAL_GPIO_WritePin>
	return E_LCD_ERR_NONE;
 8000b3e:	2300      	movs	r3, #0
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20025ec4 	.word	0x20025ec4
 8000b48:	40015000 	.word	0x40015000
 8000b4c:	40020800 	.word	0x40020800

08000b50 <LCD_Init>:
void LCD_Enable(void)
{
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
}

static te_LCD_ERROR_CODES LCD_Init(void) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8000b54:	2201      	movs	r2, #1
 8000b56:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b5a:	48a3      	ldr	r0, [pc, #652]	@ (8000de8 <LCD_Init+0x298>)
 8000b5c:	f003 f8b6 	bl	8003ccc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2104      	movs	r1, #4
 8000b64:	48a1      	ldr	r0, [pc, #644]	@ (8000dec <LCD_Init+0x29c>)
 8000b66:	f003 f8b1 	bl	8003ccc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b70:	489d      	ldr	r0, [pc, #628]	@ (8000de8 <LCD_Init+0x298>)
 8000b72:	f003 f8ab 	bl	8003ccc <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8000b76:	20c8      	movs	r0, #200	@ 0xc8
 8000b78:	f000 ff06 	bl	8001988 <HAL_Delay>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2104      	movs	r1, #4
 8000b80:	489a      	ldr	r0, [pc, #616]	@ (8000dec <LCD_Init+0x29c>)
 8000b82:	f003 f8a3 	bl	8003ccc <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8000b86:	20c8      	movs	r0, #200	@ 0xc8
 8000b88:	f000 fefe 	bl	8001988 <HAL_Delay>
		HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b92:	4895      	ldr	r0, [pc, #596]	@ (8000de8 <LCD_Init+0x298>)
 8000b94:	f003 f89a 	bl	8003ccc <HAL_GPIO_WritePin>

		LCD_Write_Command(0x01);
 8000b98:	2001      	movs	r0, #1
 8000b9a:	f000 f93f 	bl	8000e1c <LCD_Write_Command>
		HAL_Delay(1000);
 8000b9e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ba2:	f000 fef1 	bl	8001988 <HAL_Delay>

		LCD_Write_Command(LCD_POWERA);
 8000ba6:	20cb      	movs	r0, #203	@ 0xcb
 8000ba8:	f000 f938 	bl	8000e1c <LCD_Write_Command>
		LCD_Write_Data(0x39);
 8000bac:	2039      	movs	r0, #57	@ 0x39
 8000bae:	f000 f957 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Data(0x2C);
 8000bb2:	202c      	movs	r0, #44	@ 0x2c
 8000bb4:	f000 f954 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Data(0x00);
 8000bb8:	2000      	movs	r0, #0
 8000bba:	f000 f951 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Data(0x34);
 8000bbe:	2034      	movs	r0, #52	@ 0x34
 8000bc0:	f000 f94e 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Data(0x02);
 8000bc4:	2002      	movs	r0, #2
 8000bc6:	f000 f94b 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Command(LCD_POWERB);
 8000bca:	20cf      	movs	r0, #207	@ 0xcf
 8000bcc:	f000 f926 	bl	8000e1c <LCD_Write_Command>
		LCD_Write_Data(0x00);
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	f000 f945 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Data(0xC1);
 8000bd6:	20c1      	movs	r0, #193	@ 0xc1
 8000bd8:	f000 f942 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Data(0x30);
 8000bdc:	2030      	movs	r0, #48	@ 0x30
 8000bde:	f000 f93f 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Command(LCD_DTCA);
 8000be2:	20e8      	movs	r0, #232	@ 0xe8
 8000be4:	f000 f91a 	bl	8000e1c <LCD_Write_Command>
		LCD_Write_Data(0x85);
 8000be8:	2085      	movs	r0, #133	@ 0x85
 8000bea:	f000 f939 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Data(0x00);
 8000bee:	2000      	movs	r0, #0
 8000bf0:	f000 f936 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Data(0x78);
 8000bf4:	2078      	movs	r0, #120	@ 0x78
 8000bf6:	f000 f933 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Command(LCD_DTCB);
 8000bfa:	20ea      	movs	r0, #234	@ 0xea
 8000bfc:	f000 f90e 	bl	8000e1c <LCD_Write_Command>
		LCD_Write_Data(0x00);
 8000c00:	2000      	movs	r0, #0
 8000c02:	f000 f92d 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Data(0x00);
 8000c06:	2000      	movs	r0, #0
 8000c08:	f000 f92a 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Command(LCD_POWER_SEQ);
 8000c0c:	20ed      	movs	r0, #237	@ 0xed
 8000c0e:	f000 f905 	bl	8000e1c <LCD_Write_Command>
		LCD_Write_Data(0x64);
 8000c12:	2064      	movs	r0, #100	@ 0x64
 8000c14:	f000 f924 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Data(0x03);
 8000c18:	2003      	movs	r0, #3
 8000c1a:	f000 f921 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Data(0x12);
 8000c1e:	2012      	movs	r0, #18
 8000c20:	f000 f91e 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Data(0x81);
 8000c24:	2081      	movs	r0, #129	@ 0x81
 8000c26:	f000 f91b 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Command(LCD_PRC);
 8000c2a:	20f7      	movs	r0, #247	@ 0xf7
 8000c2c:	f000 f8f6 	bl	8000e1c <LCD_Write_Command>
		LCD_Write_Data(0x20);
 8000c30:	2020      	movs	r0, #32
 8000c32:	f000 f915 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Command(LCD_POWER1);
 8000c36:	20c0      	movs	r0, #192	@ 0xc0
 8000c38:	f000 f8f0 	bl	8000e1c <LCD_Write_Command>
		LCD_Write_Data(0x23);
 8000c3c:	2023      	movs	r0, #35	@ 0x23
 8000c3e:	f000 f90f 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Command(LCD_POWER2);
 8000c42:	20c1      	movs	r0, #193	@ 0xc1
 8000c44:	f000 f8ea 	bl	8000e1c <LCD_Write_Command>
		LCD_Write_Data(0x10);
 8000c48:	2010      	movs	r0, #16
 8000c4a:	f000 f909 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Command(LCD_VCOM1);
 8000c4e:	20c5      	movs	r0, #197	@ 0xc5
 8000c50:	f000 f8e4 	bl	8000e1c <LCD_Write_Command>
		LCD_Write_Data(0x3E);
 8000c54:	203e      	movs	r0, #62	@ 0x3e
 8000c56:	f000 f903 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Data(0x28);
 8000c5a:	2028      	movs	r0, #40	@ 0x28
 8000c5c:	f000 f900 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Command(LCD_VCOM2);
 8000c60:	20c7      	movs	r0, #199	@ 0xc7
 8000c62:	f000 f8db 	bl	8000e1c <LCD_Write_Command>
		LCD_Write_Data(0x86);
 8000c66:	2086      	movs	r0, #134	@ 0x86
 8000c68:	f000 f8fa 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Command(LCD_MAC);
 8000c6c:	2036      	movs	r0, #54	@ 0x36
 8000c6e:	f000 f8d5 	bl	8000e1c <LCD_Write_Command>
		LCD_Write_Data(0x48);
 8000c72:	2048      	movs	r0, #72	@ 0x48
 8000c74:	f000 f8f4 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Command(LCD_PIXEL_FORMAT);
 8000c78:	203a      	movs	r0, #58	@ 0x3a
 8000c7a:	f000 f8cf 	bl	8000e1c <LCD_Write_Command>
		LCD_Write_Data(0x55);
 8000c7e:	2055      	movs	r0, #85	@ 0x55
 8000c80:	f000 f8ee 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Command(LCD_FRC);
 8000c84:	20b1      	movs	r0, #177	@ 0xb1
 8000c86:	f000 f8c9 	bl	8000e1c <LCD_Write_Command>
		LCD_Write_Data(0x00);
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	f000 f8e8 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Data(0x18);
 8000c90:	2018      	movs	r0, #24
 8000c92:	f000 f8e5 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Command(LCD_DFC);
 8000c96:	20b6      	movs	r0, #182	@ 0xb6
 8000c98:	f000 f8c0 	bl	8000e1c <LCD_Write_Command>
		LCD_Write_Data(0x08);
 8000c9c:	2008      	movs	r0, #8
 8000c9e:	f000 f8df 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Data(0x82);
 8000ca2:	2082      	movs	r0, #130	@ 0x82
 8000ca4:	f000 f8dc 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Data(0x27);
 8000ca8:	2027      	movs	r0, #39	@ 0x27
 8000caa:	f000 f8d9 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Command(LCD_3GAMMA_EN);
 8000cae:	20f2      	movs	r0, #242	@ 0xf2
 8000cb0:	f000 f8b4 	bl	8000e1c <LCD_Write_Command>
		LCD_Write_Data(0x00);
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	f000 f8d3 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Command(LCD_COLUMN_ADDR);
 8000cba:	202a      	movs	r0, #42	@ 0x2a
 8000cbc:	f000 f8ae 	bl	8000e1c <LCD_Write_Command>
		LCD_Write_Data(0x00);
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	f000 f8cd 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Data(0x00);
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f000 f8ca 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Data(0x00);
 8000ccc:	2000      	movs	r0, #0
 8000cce:	f000 f8c7 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Data(0xEF);
 8000cd2:	20ef      	movs	r0, #239	@ 0xef
 8000cd4:	f000 f8c4 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Command(LCD_PAGE_ADDR);
 8000cd8:	202b      	movs	r0, #43	@ 0x2b
 8000cda:	f000 f89f 	bl	8000e1c <LCD_Write_Command>
		LCD_Write_Data(0x00);
 8000cde:	2000      	movs	r0, #0
 8000ce0:	f000 f8be 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Data(0x00);
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	f000 f8bb 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Data(0x01);
 8000cea:	2001      	movs	r0, #1
 8000cec:	f000 f8b8 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Data(0x3F);
 8000cf0:	203f      	movs	r0, #63	@ 0x3f
 8000cf2:	f000 f8b5 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Command(LCD_GAMMA);
 8000cf6:	2026      	movs	r0, #38	@ 0x26
 8000cf8:	f000 f890 	bl	8000e1c <LCD_Write_Command>
		LCD_Write_Data(0x01);
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	f000 f8af 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Command(LCD_PGAMMA);
 8000d02:	20e0      	movs	r0, #224	@ 0xe0
 8000d04:	f000 f88a 	bl	8000e1c <LCD_Write_Command>
		LCD_Write_Data(0x0F);
 8000d08:	200f      	movs	r0, #15
 8000d0a:	f000 f8a9 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Data(0x31);
 8000d0e:	2031      	movs	r0, #49	@ 0x31
 8000d10:	f000 f8a6 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Data(0x2B);
 8000d14:	202b      	movs	r0, #43	@ 0x2b
 8000d16:	f000 f8a3 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Data(0x0C);
 8000d1a:	200c      	movs	r0, #12
 8000d1c:	f000 f8a0 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Data(0x0E);
 8000d20:	200e      	movs	r0, #14
 8000d22:	f000 f89d 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Data(0x08);
 8000d26:	2008      	movs	r0, #8
 8000d28:	f000 f89a 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Data(0x4E);
 8000d2c:	204e      	movs	r0, #78	@ 0x4e
 8000d2e:	f000 f897 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Data(0xF1);
 8000d32:	20f1      	movs	r0, #241	@ 0xf1
 8000d34:	f000 f894 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Data(0x37);
 8000d38:	2037      	movs	r0, #55	@ 0x37
 8000d3a:	f000 f891 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Data(0x07);
 8000d3e:	2007      	movs	r0, #7
 8000d40:	f000 f88e 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Data(0x10);
 8000d44:	2010      	movs	r0, #16
 8000d46:	f000 f88b 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Data(0x03);
 8000d4a:	2003      	movs	r0, #3
 8000d4c:	f000 f888 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Data(0x0E);
 8000d50:	200e      	movs	r0, #14
 8000d52:	f000 f885 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Data(0x09);
 8000d56:	2009      	movs	r0, #9
 8000d58:	f000 f882 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Data(0x00);
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	f000 f87f 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Command(LCD_NGAMMA);
 8000d62:	20e1      	movs	r0, #225	@ 0xe1
 8000d64:	f000 f85a 	bl	8000e1c <LCD_Write_Command>
		LCD_Write_Data(0x00);
 8000d68:	2000      	movs	r0, #0
 8000d6a:	f000 f879 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Data(0x0E);
 8000d6e:	200e      	movs	r0, #14
 8000d70:	f000 f876 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Data(0x14);
 8000d74:	2014      	movs	r0, #20
 8000d76:	f000 f873 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Data(0x03);
 8000d7a:	2003      	movs	r0, #3
 8000d7c:	f000 f870 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Data(0x11);
 8000d80:	2011      	movs	r0, #17
 8000d82:	f000 f86d 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Data(0x07);
 8000d86:	2007      	movs	r0, #7
 8000d88:	f000 f86a 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Data(0x31);
 8000d8c:	2031      	movs	r0, #49	@ 0x31
 8000d8e:	f000 f867 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Data(0xC1);
 8000d92:	20c1      	movs	r0, #193	@ 0xc1
 8000d94:	f000 f864 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Data(0x48);
 8000d98:	2048      	movs	r0, #72	@ 0x48
 8000d9a:	f000 f861 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Data(0x08);
 8000d9e:	2008      	movs	r0, #8
 8000da0:	f000 f85e 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Data(0x0F);
 8000da4:	200f      	movs	r0, #15
 8000da6:	f000 f85b 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Data(0x0C);
 8000daa:	200c      	movs	r0, #12
 8000dac:	f000 f858 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Data(0x31);
 8000db0:	2031      	movs	r0, #49	@ 0x31
 8000db2:	f000 f855 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Data(0x36);
 8000db6:	2036      	movs	r0, #54	@ 0x36
 8000db8:	f000 f852 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Data(0x0F);
 8000dbc:	200f      	movs	r0, #15
 8000dbe:	f000 f84f 	bl	8000e60 <LCD_Write_Data>
		LCD_Write_Command(LCD_SLEEP_OUT);
 8000dc2:	2011      	movs	r0, #17
 8000dc4:	f000 f82a 	bl	8000e1c <LCD_Write_Command>

		LCD_Delay(1000000);
 8000dc8:	4809      	ldr	r0, [pc, #36]	@ (8000df0 <LCD_Init+0x2a0>)
 8000dca:	f000 f8f5 	bl	8000fb8 <LCD_Delay>

		LCD_Write_Command(LCD_DISPLAY_ON);
 8000dce:	2029      	movs	r0, #41	@ 0x29
 8000dd0:	f000 f824 	bl	8000e1c <LCD_Write_Command>
		LCD_Write_Command(LCD_GRAM);
 8000dd4:	202c      	movs	r0, #44	@ 0x2c
 8000dd6:	f000 f821 	bl	8000e1c <LCD_Write_Command>

	//STARTING ROTATION
	LCD_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000dda:	2003      	movs	r0, #3
 8000ddc:	f000 f948 	bl	8001070 <LCD_Set_Rotation>
	//LCD_Write_Command(LCD_GRAM);

	return E_LCD_ERR_NONE;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40020c00 	.word	0x40020c00
 8000dec:	40020800 	.word	0x40020800
 8000df0:	000f4240 	.word	0x000f4240

08000df4 <LCD_SPI_Send>:

void LCD_SPI_Send(unsigned char data) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status;
	status = HAL_SPI_Transmit(&hspi5, &data, 1, 1);
 8000dfe:	1df9      	adds	r1, r7, #7
 8000e00:	2301      	movs	r3, #1
 8000e02:	2201      	movs	r2, #1
 8000e04:	4804      	ldr	r0, [pc, #16]	@ (8000e18 <LCD_SPI_Send+0x24>)
 8000e06:	f004 fa74 	bl	80052f2 <HAL_SPI_Transmit>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	73fb      	strb	r3, [r7, #15]
}
 8000e0e:	bf00      	nop
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20025ec4 	.word	0x20025ec4

08000e1c <LCD_Write_Command>:

void LCD_Write_Command(uint8_t command) {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2104      	movs	r1, #4
 8000e2a:	480b      	ldr	r0, [pc, #44]	@ (8000e58 <LCD_Write_Command+0x3c>)
 8000e2c:	f002 ff4e 	bl	8003ccc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_PORT, LCD_WR_PIN, GPIO_PIN_RESET);
 8000e30:	2200      	movs	r2, #0
 8000e32:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e36:	4809      	ldr	r0, [pc, #36]	@ (8000e5c <LCD_Write_Command+0x40>)
 8000e38:	f002 ff48 	bl	8003ccc <HAL_GPIO_WritePin>

	LCD_SPI_Send(command);
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff ffd8 	bl	8000df4 <LCD_SPI_Send>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000e44:	2201      	movs	r2, #1
 8000e46:	2104      	movs	r1, #4
 8000e48:	4803      	ldr	r0, [pc, #12]	@ (8000e58 <LCD_Write_Command+0x3c>)
 8000e4a:	f002 ff3f 	bl	8003ccc <HAL_GPIO_WritePin>
}
 8000e4e:	bf00      	nop
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40020800 	.word	0x40020800
 8000e5c:	40020c00 	.word	0x40020c00

08000e60 <LCD_Write_Data>:

void LCD_Write_Data(uint8_t data) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_WR_PORT, LCD_WR_PIN, GPIO_PIN_SET);
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e70:	480a      	ldr	r0, [pc, #40]	@ (8000e9c <LCD_Write_Data+0x3c>)
 8000e72:	f002 ff2b 	bl	8003ccc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000e76:	2200      	movs	r2, #0
 8000e78:	2104      	movs	r1, #4
 8000e7a:	4809      	ldr	r0, [pc, #36]	@ (8000ea0 <LCD_Write_Data+0x40>)
 8000e7c:	f002 ff26 	bl	8003ccc <HAL_GPIO_WritePin>
	LCD_SPI_Send(data);
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff ffb6 	bl	8000df4 <LCD_SPI_Send>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	2104      	movs	r1, #4
 8000e8c:	4804      	ldr	r0, [pc, #16]	@ (8000ea0 <LCD_Write_Data+0x40>)
 8000e8e:	f002 ff1d 	bl	8003ccc <HAL_GPIO_WritePin>
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40020c00 	.word	0x40020c00
 8000ea0:	40020800 	.word	0x40020800

08000ea4 <LCD_Set_Cursor_Position>:

void LCD_Set_Cursor_Position(uint16_t x1, uint16_t x2, uint16_t y1, uint16_t y2) {
 8000ea4:	b590      	push	{r4, r7, lr}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4604      	mov	r4, r0
 8000eac:	4608      	mov	r0, r1
 8000eae:	4611      	mov	r1, r2
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4623      	mov	r3, r4
 8000eb4:	80fb      	strh	r3, [r7, #6]
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	80bb      	strh	r3, [r7, #4]
 8000eba:	460b      	mov	r3, r1
 8000ebc:	807b      	strh	r3, [r7, #2]
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	803b      	strh	r3, [r7, #0]
	LCD_Write_Command(0x2A);
 8000ec2:	202a      	movs	r0, #42	@ 0x2a
 8000ec4:	f7ff ffaa 	bl	8000e1c <LCD_Write_Command>
	LCD_Write_Data(x1 >> 8);
 8000ec8:	88fb      	ldrh	r3, [r7, #6]
 8000eca:	0a1b      	lsrs	r3, r3, #8
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff ffc5 	bl	8000e60 <LCD_Write_Data>
	LCD_Write_Data(x1 &  0xFF);
 8000ed6:	88fb      	ldrh	r3, [r7, #6]
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff ffc0 	bl	8000e60 <LCD_Write_Data>
	LCD_Write_Data(x2 >> 8);
 8000ee0:	88bb      	ldrh	r3, [r7, #4]
 8000ee2:	0a1b      	lsrs	r3, r3, #8
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff ffb9 	bl	8000e60 <LCD_Write_Data>
	LCD_Write_Data(x2 &  0xFF);
 8000eee:	88bb      	ldrh	r3, [r7, #4]
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff ffb4 	bl	8000e60 <LCD_Write_Data>

	LCD_Write_Command(0x2B);
 8000ef8:	202b      	movs	r0, #43	@ 0x2b
 8000efa:	f7ff ff8f 	bl	8000e1c <LCD_Write_Command>
	LCD_Write_Data(y1 >> 8);
 8000efe:	887b      	ldrh	r3, [r7, #2]
 8000f00:	0a1b      	lsrs	r3, r3, #8
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff ffaa 	bl	8000e60 <LCD_Write_Data>
	LCD_Write_Data(y1 &  0xFF);
 8000f0c:	887b      	ldrh	r3, [r7, #2]
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ffa5 	bl	8000e60 <LCD_Write_Data>
	LCD_Write_Data(y2 >> 8);
 8000f16:	883b      	ldrh	r3, [r7, #0]
 8000f18:	0a1b      	lsrs	r3, r3, #8
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff ff9e 	bl	8000e60 <LCD_Write_Data>
	LCD_Write_Data(y2 &  0xFF);
 8000f24:	883b      	ldrh	r3, [r7, #0]
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff ff99 	bl	8000e60 <LCD_Write_Data>
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd90      	pop	{r4, r7, pc}
	...

08000f38 <LCD_Fill_Screen>:
	LCD_Write_Command(LCD_GRAM);
	LCD_Write_Data(color >> 8);
	LCD_Write_Data(color & 0xFF);
}

void LCD_Fill_Screen(uint16_t color) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	80fb      	strh	r3, [r7, #6]
	uint8_t color_msb, color_lsb;

	color_msb = color >> 8;
 8000f42:	88fb      	ldrh	r3, [r7, #6]
 8000f44:	0a1b      	lsrs	r3, r3, #8
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	72fb      	strb	r3, [r7, #11]
	color_lsb = color & 0xFF;
 8000f4a:	88fb      	ldrh	r3, [r7, #6]
 8000f4c:	72bb      	strb	r3, [r7, #10]
	LCD_Set_Cursor_Position(0, LCD_WIDTH-1, 0, LCD_HEIGHT-1);
 8000f4e:	23ef      	movs	r3, #239	@ 0xef
 8000f50:	2200      	movs	r2, #0
 8000f52:	f240 113f 	movw	r1, #319	@ 0x13f
 8000f56:	2000      	movs	r0, #0
 8000f58:	f7ff ffa4 	bl	8000ea4 <LCD_Set_Cursor_Position>
	LCD_Write_Command(LCD_GRAM);
 8000f5c:	202c      	movs	r0, #44	@ 0x2c
 8000f5e:	f7ff ff5d 	bl	8000e1c <LCD_Write_Command>

	HAL_GPIO_WritePin(LCD_WR_PORT, LCD_WR_PIN, GPIO_PIN_SET);
 8000f62:	2201      	movs	r2, #1
 8000f64:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f68:	4811      	ldr	r0, [pc, #68]	@ (8000fb0 <LCD_Fill_Screen+0x78>)
 8000f6a:	f002 feaf 	bl	8003ccc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2104      	movs	r1, #4
 8000f72:	4810      	ldr	r0, [pc, #64]	@ (8000fb4 <LCD_Fill_Screen+0x7c>)
 8000f74:	f002 feaa 	bl	8003ccc <HAL_GPIO_WritePin>

	for (int i = 0; i < LCD_WIDTH * LCD_HEIGHT; i++) {
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	e00a      	b.n	8000f94 <LCD_Fill_Screen+0x5c>
		LCD_SPI_Send(color_msb);
 8000f7e:	7afb      	ldrb	r3, [r7, #11]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff ff37 	bl	8000df4 <LCD_SPI_Send>
		LCD_SPI_Send(color_lsb);
 8000f86:	7abb      	ldrb	r3, [r7, #10]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff ff33 	bl	8000df4 <LCD_SPI_Send>
	for (int i = 0; i < LCD_WIDTH * LCD_HEIGHT; i++) {
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	3301      	adds	r3, #1
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000f9a:	dbf0      	blt.n	8000f7e <LCD_Fill_Screen+0x46>
	}

	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	2104      	movs	r1, #4
 8000fa0:	4804      	ldr	r0, [pc, #16]	@ (8000fb4 <LCD_Fill_Screen+0x7c>)
 8000fa2:	f002 fe93 	bl	8003ccc <HAL_GPIO_WritePin>
}
 8000fa6:	bf00      	nop
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40020c00 	.word	0x40020c00
 8000fb4:	40020800 	.word	0x40020800

08000fb8 <LCD_Delay>:

void LCD_Delay(int delay) {
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
	while(delay>0) {
 8000fc0:	e002      	b.n	8000fc8 <LCD_Delay+0x10>
		delay--;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	3b01      	subs	r3, #1
 8000fc6:	607b      	str	r3, [r7, #4]
	while(delay>0) {
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	dcf9      	bgt.n	8000fc2 <LCD_Delay+0xa>
	}
}
 8000fce:	bf00      	nop
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <LCD_Display_Image>:

void LCD_Display_Image(uint16_t image[LCD_WIDTH*LCD_HEIGHT]) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	uint32_t n, i, j;
	LCD_Set_Cursor_Position(0, LCD_WIDTH-1, 0, LCD_HEIGHT-1);
 8000fe4:	23ef      	movs	r3, #239	@ 0xef
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f240 113f 	movw	r1, #319	@ 0x13f
 8000fec:	2000      	movs	r0, #0
 8000fee:	f7ff ff59 	bl	8000ea4 <LCD_Set_Cursor_Position>

	LCD_Write_Command(LCD_GRAM);
 8000ff2:	202c      	movs	r0, #44	@ 0x2c
 8000ff4:	f7ff ff12 	bl	8000e1c <LCD_Write_Command>

	HAL_GPIO_WritePin(LCD_WR_PORT, LCD_WR_PIN, GPIO_PIN_SET);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ffe:	481a      	ldr	r0, [pc, #104]	@ (8001068 <LCD_Display_Image+0x8c>)
 8001000:	f002 fe64 	bl	8003ccc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001004:	2200      	movs	r2, #0
 8001006:	2104      	movs	r1, #4
 8001008:	4818      	ldr	r0, [pc, #96]	@ (800106c <LCD_Display_Image+0x90>)
 800100a:	f002 fe5f 	bl	8003ccc <HAL_GPIO_WritePin>

	for (n = 0; n < LCD_WIDTH * LCD_HEIGHT; n++) {
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
 8001012:	e01b      	b.n	800104c <LCD_Display_Image+0x70>
		i = image[n] >> 8;
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	4413      	add	r3, r2
 800101c:	881b      	ldrh	r3, [r3, #0]
 800101e:	0a1b      	lsrs	r3, r3, #8
 8001020:	b29b      	uxth	r3, r3
 8001022:	613b      	str	r3, [r7, #16]
		j = image[n] & 0xFF;
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	4413      	add	r3, r2
 800102c:	881b      	ldrh	r3, [r3, #0]
 800102e:	b2db      	uxtb	r3, r3
 8001030:	60fb      	str	r3, [r7, #12]

		LCD_SPI_Send(i);
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	b2db      	uxtb	r3, r3
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fedc 	bl	8000df4 <LCD_SPI_Send>
		LCD_SPI_Send(j);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	b2db      	uxtb	r3, r3
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff fed7 	bl	8000df4 <LCD_SPI_Send>
	for (n = 0; n < LCD_WIDTH * LCD_HEIGHT; n++) {
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	3301      	adds	r3, #1
 800104a:	617b      	str	r3, [r7, #20]
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8001052:	d3df      	bcc.n	8001014 <LCD_Display_Image+0x38>
	}

	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001054:	2201      	movs	r2, #1
 8001056:	2104      	movs	r1, #4
 8001058:	4804      	ldr	r0, [pc, #16]	@ (800106c <LCD_Display_Image+0x90>)
 800105a:	f002 fe37 	bl	8003ccc <HAL_GPIO_WritePin>
}
 800105e:	bf00      	nop
 8001060:	3718      	adds	r7, #24
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40020c00 	.word	0x40020c00
 800106c:	40020800 	.word	0x40020800

08001070 <LCD_Set_Rotation>:




void LCD_Set_Rotation(uint8_t rotation) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]

uint8_t screen_rotation = rotation;
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	73fb      	strb	r3, [r7, #15]

LCD_Write_Command(0x36);
 800107e:	2036      	movs	r0, #54	@ 0x36
 8001080:	f7ff fecc 	bl	8000e1c <LCD_Write_Command>
HAL_Delay(1);
 8001084:	2001      	movs	r0, #1
 8001086:	f000 fc7f 	bl	8001988 <HAL_Delay>

switch(screen_rotation)
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	2b03      	cmp	r3, #3
 800108e:	d81b      	bhi.n	80010c8 <LCD_Set_Rotation+0x58>
 8001090:	a201      	add	r2, pc, #4	@ (adr r2, 8001098 <LCD_Set_Rotation+0x28>)
 8001092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001096:	bf00      	nop
 8001098:	080010a9 	.word	0x080010a9
 800109c:	080010b1 	.word	0x080010b1
 80010a0:	080010b9 	.word	0x080010b9
 80010a4:	080010c1 	.word	0x080010c1
	{
		case SCREEN_VERTICAL_1:
			LCD_Write_Data(0x40|0x08);
 80010a8:	2048      	movs	r0, #72	@ 0x48
 80010aa:	f7ff fed9 	bl	8000e60 <LCD_Write_Data>
			break;
 80010ae:	e00c      	b.n	80010ca <LCD_Set_Rotation+0x5a>
		case SCREEN_HORIZONTAL_1:
			LCD_Write_Data(0x20|0x08);
 80010b0:	2028      	movs	r0, #40	@ 0x28
 80010b2:	f7ff fed5 	bl	8000e60 <LCD_Write_Data>
			break;
 80010b6:	e008      	b.n	80010ca <LCD_Set_Rotation+0x5a>
		case SCREEN_VERTICAL_2:
			LCD_Write_Data(0x80|0x08);
 80010b8:	2088      	movs	r0, #136	@ 0x88
 80010ba:	f7ff fed1 	bl	8000e60 <LCD_Write_Data>
			break;
 80010be:	e004      	b.n	80010ca <LCD_Set_Rotation+0x5a>
		case SCREEN_HORIZONTAL_2:
			LCD_Write_Data(0x40|0x80|0x20|0x08);
 80010c0:	20e8      	movs	r0, #232	@ 0xe8
 80010c2:	f7ff fecd 	bl	8000e60 <LCD_Write_Data>
			break;
 80010c6:	e000      	b.n	80010ca <LCD_Set_Rotation+0x5a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 80010c8:	bf00      	nop
	}
}
 80010ca:	bf00      	nop
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop

080010d4 <Filter_Button_Init>:

/* USER CODE BEGIN PV */
volatile FilterType selectedFilter = FILTER_LAPLACIAN;

#if USE_FILTER_BUTTON
void Filter_Button_Init(void) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE(); // Adjust if using a different port
 80010e8:	2300      	movs	r3, #0
 80010ea:	603b      	str	r3, [r7, #0]
 80010ec:	4b11      	ldr	r3, [pc, #68]	@ (8001134 <Filter_Button_Init+0x60>)
 80010ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f0:	4a10      	ldr	r2, [pc, #64]	@ (8001134 <Filter_Button_Init+0x60>)
 80010f2:	f043 0301 	orr.w	r3, r3, #1
 80010f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001134 <Filter_Button_Init+0x60>)
 80010fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fc:	f003 0301 	and.w	r3, r3, #1
 8001100:	603b      	str	r3, [r7, #0]
 8001102:	683b      	ldr	r3, [r7, #0]
    GPIO_InitStruct.Pin = FILTER_BUTTON_PIN;
 8001104:	2301      	movs	r3, #1
 8001106:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001108:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800110c:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800110e:	2301      	movs	r3, #1
 8001110:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(FILTER_BUTTON_PORT, &GPIO_InitStruct);
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	4619      	mov	r1, r3
 8001116:	4808      	ldr	r0, [pc, #32]	@ (8001138 <Filter_Button_Init+0x64>)
 8001118:	f002 fc2c 	bl	8003974 <HAL_GPIO_Init>
    // EXTI0_IRQn is for pin 0; change if using a different pin
    HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 800111c:	2200      	movs	r2, #0
 800111e:	2102      	movs	r1, #2
 8001120:	2006      	movs	r0, #6
 8001122:	f000 fd30 	bl	8001b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001126:	2006      	movs	r0, #6
 8001128:	f000 fd49 	bl	8001bbe <HAL_NVIC_EnableIRQ>
}
 800112c:	bf00      	nop
 800112e:	3718      	adds	r7, #24
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40023800 	.word	0x40023800
 8001138:	40020000 	.word	0x40020000

0800113c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08e      	sub	sp, #56	@ 0x38
 8001140:	af00      	add	r7, sp, #0
    HAL_Init();
 8001142:	f000 fbaf 	bl	80018a4 <HAL_Init>
    SystemClock_Config();
 8001146:	f000 f91b 	bl	8001380 <SystemClock_Config>
    te_CAMERA_ERROR_CODES cam_error;
    LCD_Open();
 800114a:	f7ff fc33 	bl	80009b4 <LCD_Open>
    cam_error = Camera_Open();
 800114e:	f7ff f9e3 	bl	8000518 <Camera_Open>
 8001152:	4603      	mov	r3, r0
 8001154:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (cam_error != E_CAMERA_ERR_NONE) while(1);
 8001158:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <main+0x28>
 8001160:	bf00      	nop
 8001162:	e7fd      	b.n	8001160 <main+0x24>
#if USE_FILTER_BUTTON
    Filter_Button_Init();
 8001164:	f7ff ffb6 	bl	80010d4 <Filter_Button_Init>
#endif
    LCD_Set_Rotation(SCREEN_HORIZONTAL_2);
 8001168:	2003      	movs	r0, #3
 800116a:	f7ff ff81 	bl	8001070 <LCD_Set_Rotation>
    while (1)
    {
        for (int row = 0; row < IMG_ROWS; row++) {
 800116e:	2300      	movs	r3, #0
 8001170:	637b      	str	r3, [r7, #52]	@ 0x34
 8001172:	e0e9      	b.n	8001348 <main+0x20c>
            dma_transfer_done_flag = 0;
 8001174:	4b79      	ldr	r3, [pc, #484]	@ (800135c <main+0x220>)
 8001176:	2200      	movs	r2, #0
 8001178:	701a      	strb	r2, [r3, #0]
            HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, (uint32_t)line_buffer[row % 3], IMG_COLUMNS / 2);
 800117a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800117c:	4b78      	ldr	r3, [pc, #480]	@ (8001360 <main+0x224>)
 800117e:	fb83 3201 	smull	r3, r2, r3, r1
 8001182:	17cb      	asrs	r3, r1, #31
 8001184:	1ad2      	subs	r2, r2, r3
 8001186:	4613      	mov	r3, r2
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	4413      	add	r3, r2
 800118c:	1aca      	subs	r2, r1, r3
 800118e:	4613      	mov	r3, r2
 8001190:	011b      	lsls	r3, r3, #4
 8001192:	1a9b      	subs	r3, r3, r2
 8001194:	015b      	lsls	r3, r3, #5
 8001196:	4a73      	ldr	r2, [pc, #460]	@ (8001364 <main+0x228>)
 8001198:	4413      	add	r3, r2
 800119a:	461a      	mov	r2, r3
 800119c:	2378      	movs	r3, #120	@ 0x78
 800119e:	2102      	movs	r1, #2
 80011a0:	4871      	ldr	r0, [pc, #452]	@ (8001368 <main+0x22c>)
 80011a2:	f000 fd27 	bl	8001bf4 <HAL_DCMI_Start_DMA>
            while (!dma_transfer_done_flag);
 80011a6:	bf00      	nop
 80011a8:	4b6c      	ldr	r3, [pc, #432]	@ (800135c <main+0x220>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d0fa      	beq.n	80011a8 <main+0x6c>

            if (selectedFilter == FILTER_NONE) {
 80011b2:	4b6e      	ldr	r3, [pc, #440]	@ (800136c <main+0x230>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d11d      	bne.n	80011f8 <main+0xbc>
                memcpy(&processed_image[row * IMG_COLUMNS], line_buffer[row % 3], IMG_COLUMNS * sizeof(uint16_t));
 80011bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80011be:	4613      	mov	r3, r2
 80011c0:	011b      	lsls	r3, r3, #4
 80011c2:	1a9b      	subs	r3, r3, r2
 80011c4:	011b      	lsls	r3, r3, #4
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	4a69      	ldr	r2, [pc, #420]	@ (8001370 <main+0x234>)
 80011ca:	1898      	adds	r0, r3, r2
 80011cc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80011ce:	4b64      	ldr	r3, [pc, #400]	@ (8001360 <main+0x224>)
 80011d0:	fb83 3201 	smull	r3, r2, r3, r1
 80011d4:	17cb      	asrs	r3, r1, #31
 80011d6:	1ad2      	subs	r2, r2, r3
 80011d8:	4613      	mov	r3, r2
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	4413      	add	r3, r2
 80011de:	1aca      	subs	r2, r1, r3
 80011e0:	4613      	mov	r3, r2
 80011e2:	011b      	lsls	r3, r3, #4
 80011e4:	1a9b      	subs	r3, r3, r2
 80011e6:	015b      	lsls	r3, r3, #5
 80011e8:	4a5e      	ldr	r2, [pc, #376]	@ (8001364 <main+0x228>)
 80011ea:	4413      	add	r3, r2
 80011ec:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80011f0:	4619      	mov	r1, r3
 80011f2:	f004 facb 	bl	800578c <memcpy>
 80011f6:	e0a4      	b.n	8001342 <main+0x206>
            } else if (row >= 2) {
 80011f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	f340 80a1 	ble.w	8001342 <main+0x206>
                int y = row - 1;
 8001200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001202:	3b01      	subs	r3, #1
 8001204:	623b      	str	r3, [r7, #32]
                const int (*kernel)[3] = (selectedFilter == FILTER_LAPLACIAN) ? laplacian_kernel : gaussian_kernel;
 8001206:	4b59      	ldr	r3, [pc, #356]	@ (800136c <main+0x230>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	b2db      	uxtb	r3, r3
 800120c:	2b01      	cmp	r3, #1
 800120e:	d101      	bne.n	8001214 <main+0xd8>
 8001210:	4b58      	ldr	r3, [pc, #352]	@ (8001374 <main+0x238>)
 8001212:	e000      	b.n	8001216 <main+0xda>
 8001214:	4b58      	ldr	r3, [pc, #352]	@ (8001378 <main+0x23c>)
 8001216:	61fb      	str	r3, [r7, #28]
                int kernel_factor = (selectedFilter == FILTER_LAPLACIAN) ? 1 : gaussian_factor;
 8001218:	4b54      	ldr	r3, [pc, #336]	@ (800136c <main+0x230>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2b01      	cmp	r3, #1
 8001220:	d002      	beq.n	8001228 <main+0xec>
 8001222:	4b56      	ldr	r3, [pc, #344]	@ (800137c <main+0x240>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	e000      	b.n	800122a <main+0xee>
 8001228:	2301      	movs	r3, #1
 800122a:	61bb      	str	r3, [r7, #24]
                for (int x = 1; x < IMG_COLUMNS - 1; x++) {
 800122c:	2301      	movs	r3, #1
 800122e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001230:	e083      	b.n	800133a <main+0x1fe>
                    uint8_t window[3][3];
                    for (int i = -1; i <= 1; i++) {
 8001232:	f04f 33ff 	mov.w	r3, #4294967295
 8001236:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001238:	e054      	b.n	80012e4 <main+0x1a8>
                        for (int j = -1; j <= 1; j++) {
 800123a:	f04f 33ff 	mov.w	r3, #4294967295
 800123e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001240:	e04a      	b.n	80012d8 <main+0x19c>
                            uint16_t rgb = line_buffer[(row - 1 + i + 3) % 3][x + j];
 8001242:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001244:	1e5a      	subs	r2, r3, #1
 8001246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001248:	4413      	add	r3, r2
 800124a:	1cd9      	adds	r1, r3, #3
 800124c:	4b44      	ldr	r3, [pc, #272]	@ (8001360 <main+0x224>)
 800124e:	fb83 3201 	smull	r3, r2, r3, r1
 8001252:	17cb      	asrs	r3, r1, #31
 8001254:	1ad2      	subs	r2, r2, r3
 8001256:	4613      	mov	r3, r2
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	4413      	add	r3, r2
 800125c:	1aca      	subs	r2, r1, r3
 800125e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001262:	4419      	add	r1, r3
 8001264:	483f      	ldr	r0, [pc, #252]	@ (8001364 <main+0x228>)
 8001266:	4613      	mov	r3, r2
 8001268:	011b      	lsls	r3, r3, #4
 800126a:	1a9b      	subs	r3, r3, r2
 800126c:	011b      	lsls	r3, r3, #4
 800126e:	440b      	add	r3, r1
 8001270:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001274:	82bb      	strh	r3, [r7, #20]
                            uint8_t r = (rgb >> 11) & 0x1F;
 8001276:	8abb      	ldrh	r3, [r7, #20]
 8001278:	0adb      	lsrs	r3, r3, #11
 800127a:	b29b      	uxth	r3, r3
 800127c:	b2db      	uxtb	r3, r3
 800127e:	f003 031f 	and.w	r3, r3, #31
 8001282:	74fb      	strb	r3, [r7, #19]
                            uint8_t g = (rgb >> 5) & 0x3F;
 8001284:	8abb      	ldrh	r3, [r7, #20]
 8001286:	095b      	lsrs	r3, r3, #5
 8001288:	b29b      	uxth	r3, r3
 800128a:	b2db      	uxtb	r3, r3
 800128c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001290:	74bb      	strb	r3, [r7, #18]
                            uint8_t b = rgb & 0x1F;
 8001292:	8abb      	ldrh	r3, [r7, #20]
 8001294:	b2db      	uxtb	r3, r3
 8001296:	f003 031f 	and.w	r3, r3, #31
 800129a:	747b      	strb	r3, [r7, #17]
                            window[i + 1][j + 1] = (r * 8 + g * 4 + b * 8) / 3;
 800129c:	7cfb      	ldrb	r3, [r7, #19]
 800129e:	005a      	lsls	r2, r3, #1
 80012a0:	7cbb      	ldrb	r3, [r7, #18]
 80012a2:	441a      	add	r2, r3
 80012a4:	7c7b      	ldrb	r3, [r7, #17]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	4413      	add	r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	4a2c      	ldr	r2, [pc, #176]	@ (8001360 <main+0x224>)
 80012ae:	fb82 1203 	smull	r1, r2, r2, r3
 80012b2:	17db      	asrs	r3, r3, #31
 80012b4:	1ad0      	subs	r0, r2, r3
 80012b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012b8:	1c5a      	adds	r2, r3, #1
 80012ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012bc:	1c59      	adds	r1, r3, #1
 80012be:	b2c0      	uxtb	r0, r0
 80012c0:	4613      	mov	r3, r2
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	4413      	add	r3, r2
 80012c6:	3338      	adds	r3, #56	@ 0x38
 80012c8:	443b      	add	r3, r7
 80012ca:	440b      	add	r3, r1
 80012cc:	3b30      	subs	r3, #48	@ 0x30
 80012ce:	4602      	mov	r2, r0
 80012d0:	701a      	strb	r2, [r3, #0]
                        for (int j = -1; j <= 1; j++) {
 80012d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012d4:	3301      	adds	r3, #1
 80012d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80012d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012da:	2b01      	cmp	r3, #1
 80012dc:	ddb1      	ble.n	8001242 <main+0x106>
                    for (int i = -1; i <= 1; i++) {
 80012de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012e0:	3301      	adds	r3, #1
 80012e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	dda7      	ble.n	800123a <main+0xfe>
                        }
                    }
                    int result;
                    applyKernel3x3_window(window, kernel, kernel_factor, &result);
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	f107 0008 	add.w	r0, r7, #8
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	69f9      	ldr	r1, [r7, #28]
 80012f4:	f000 fa5c 	bl	80017b0 <applyKernel3x3_window>
                    uint16_t rgb565 = ((result >> 3) << 11) | ((result >> 2) << 5) | (result >> 3);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	10db      	asrs	r3, r3, #3
 80012fc:	b21b      	sxth	r3, r3
 80012fe:	02db      	lsls	r3, r3, #11
 8001300:	b21a      	sxth	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	109b      	asrs	r3, r3, #2
 8001306:	b21b      	sxth	r3, r3
 8001308:	015b      	lsls	r3, r3, #5
 800130a:	b21b      	sxth	r3, r3
 800130c:	4313      	orrs	r3, r2
 800130e:	b21a      	sxth	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	10db      	asrs	r3, r3, #3
 8001314:	b21b      	sxth	r3, r3
 8001316:	4313      	orrs	r3, r2
 8001318:	b21b      	sxth	r3, r3
 800131a:	82fb      	strh	r3, [r7, #22]
                    processed_image[y * IMG_COLUMNS + x] = rgb565;
 800131c:	6a3a      	ldr	r2, [r7, #32]
 800131e:	4613      	mov	r3, r2
 8001320:	011b      	lsls	r3, r3, #4
 8001322:	1a9b      	subs	r3, r3, r2
 8001324:	011b      	lsls	r3, r3, #4
 8001326:	461a      	mov	r2, r3
 8001328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800132a:	4413      	add	r3, r2
 800132c:	4910      	ldr	r1, [pc, #64]	@ (8001370 <main+0x234>)
 800132e:	8afa      	ldrh	r2, [r7, #22]
 8001330:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                for (int x = 1; x < IMG_COLUMNS - 1; x++) {
 8001334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001336:	3301      	adds	r3, #1
 8001338:	633b      	str	r3, [r7, #48]	@ 0x30
 800133a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800133c:	2bee      	cmp	r3, #238	@ 0xee
 800133e:	f77f af78 	ble.w	8001232 <main+0xf6>
        for (int row = 0; row < IMG_ROWS; row++) {
 8001342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001344:	3301      	adds	r3, #1
 8001346:	637b      	str	r3, [r7, #52]	@ 0x34
 8001348:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800134a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800134e:	f6ff af11 	blt.w	8001174 <main+0x38>
                }
            }
        }
        LCD_Display_Image(processed_image);
 8001352:	4807      	ldr	r0, [pc, #28]	@ (8001370 <main+0x234>)
 8001354:	f7ff fe42 	bl	8000fdc <LCD_Display_Image>
        for (int row = 0; row < IMG_ROWS; row++) {
 8001358:	e709      	b.n	800116e <main+0x32>
 800135a:	bf00      	nop
 800135c:	20025dcc 	.word	0x20025dcc
 8001360:	55555556 	.word	0x55555556
 8001364:	2000002c 	.word	0x2000002c
 8001368:	20025dd0 	.word	0x20025dd0
 800136c:	20000000 	.word	0x20000000
 8001370:	200005cc 	.word	0x200005cc
 8001374:	080058cc 	.word	0x080058cc
 8001378:	080058f0 	.word	0x080058f0
 800137c:	08005914 	.word	0x08005914

08001380 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b094      	sub	sp, #80	@ 0x50
 8001384:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001386:	f107 0320 	add.w	r3, r7, #32
 800138a:	2230      	movs	r2, #48	@ 0x30
 800138c:	2100      	movs	r1, #0
 800138e:	4618      	mov	r0, r3
 8001390:	f004 f9d0 	bl	8005734 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001394:	f107 030c 	add.w	r3, r7, #12
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a4:	2300      	movs	r3, #0
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	4b30      	ldr	r3, [pc, #192]	@ (800146c <SystemClock_Config+0xec>)
 80013aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ac:	4a2f      	ldr	r2, [pc, #188]	@ (800146c <SystemClock_Config+0xec>)
 80013ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80013b4:	4b2d      	ldr	r3, [pc, #180]	@ (800146c <SystemClock_Config+0xec>)
 80013b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013c0:	2300      	movs	r3, #0
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001470 <SystemClock_Config+0xf0>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a29      	ldr	r2, [pc, #164]	@ (8001470 <SystemClock_Config+0xf0>)
 80013ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80013ce:	6013      	str	r3, [r2, #0]
 80013d0:	4b27      	ldr	r3, [pc, #156]	@ (8001470 <SystemClock_Config+0xf0>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013d8:	607b      	str	r3, [r7, #4]
 80013da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80013dc:	2303      	movs	r3, #3
 80013de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013e4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013e6:	2301      	movs	r3, #1
 80013e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013ea:	2310      	movs	r3, #16
 80013ec:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ee:	2302      	movs	r3, #2
 80013f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013f2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80013f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013f8:	2308      	movs	r3, #8
 80013fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 360;
 80013fc:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8001400:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001402:	2302      	movs	r3, #2
 8001404:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001406:	2307      	movs	r3, #7
 8001408:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800140a:	f107 0320 	add.w	r3, r7, #32
 800140e:	4618      	mov	r0, r3
 8001410:	f003 f9ee 	bl	80047f0 <HAL_RCC_OscConfig>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800141a:	f000 f82b 	bl	8001474 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800141e:	f003 f997 	bl	8004750 <HAL_PWREx_EnableOverDrive>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001428:	f000 f824 	bl	8001474 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800142c:	230f      	movs	r3, #15
 800142e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001430:	2302      	movs	r3, #2
 8001432:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001438:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800143c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800143e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001442:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001444:	f107 030c 	add.w	r3, r7, #12
 8001448:	2105      	movs	r1, #5
 800144a:	4618      	mov	r0, r3
 800144c:	f003 fc48 	bl	8004ce0 <HAL_RCC_ClockConfig>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <SystemClock_Config+0xda>
  {
    Error_Handler();
 8001456:	f000 f80d 	bl	8001474 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 800145a:	2200      	movs	r2, #0
 800145c:	2100      	movs	r1, #0
 800145e:	2000      	movs	r0, #0
 8001460:	f003 fd24 	bl	8004eac <HAL_RCC_MCOConfig>
}
 8001464:	bf00      	nop
 8001466:	3750      	adds	r7, #80	@ 0x50
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40023800 	.word	0x40023800
 8001470:	40007000 	.word	0x40007000

08001474 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001478:	b672      	cpsid	i
}
 800147a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800147c:	bf00      	nop
 800147e:	e7fd      	b.n	800147c <Error_Handler+0x8>

08001480 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	607b      	str	r3, [r7, #4]
 800148a:	4b10      	ldr	r3, [pc, #64]	@ (80014cc <HAL_MspInit+0x4c>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800148e:	4a0f      	ldr	r2, [pc, #60]	@ (80014cc <HAL_MspInit+0x4c>)
 8001490:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001494:	6453      	str	r3, [r2, #68]	@ 0x44
 8001496:	4b0d      	ldr	r3, [pc, #52]	@ (80014cc <HAL_MspInit+0x4c>)
 8001498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800149a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800149e:	607b      	str	r3, [r7, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	603b      	str	r3, [r7, #0]
 80014a6:	4b09      	ldr	r3, [pc, #36]	@ (80014cc <HAL_MspInit+0x4c>)
 80014a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014aa:	4a08      	ldr	r2, [pc, #32]	@ (80014cc <HAL_MspInit+0x4c>)
 80014ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80014b2:	4b06      	ldr	r3, [pc, #24]	@ (80014cc <HAL_MspInit+0x4c>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ba:	603b      	str	r3, [r7, #0]
 80014bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014be:	2007      	movs	r0, #7
 80014c0:	f000 fb56 	bl	8001b70 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014c4:	bf00      	nop
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40023800 	.word	0x40023800

080014d0 <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08c      	sub	sp, #48	@ 0x30
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d8:	f107 031c 	add.w	r3, r7, #28
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a3e      	ldr	r2, [pc, #248]	@ (80015e8 <HAL_DCMI_MspInit+0x118>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d176      	bne.n	80015e0 <HAL_DCMI_MspInit+0x110>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	61bb      	str	r3, [r7, #24]
 80014f6:	4b3d      	ldr	r3, [pc, #244]	@ (80015ec <HAL_DCMI_MspInit+0x11c>)
 80014f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014fa:	4a3c      	ldr	r2, [pc, #240]	@ (80015ec <HAL_DCMI_MspInit+0x11c>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	6353      	str	r3, [r2, #52]	@ 0x34
 8001502:	4b3a      	ldr	r3, [pc, #232]	@ (80015ec <HAL_DCMI_MspInit+0x11c>)
 8001504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	61bb      	str	r3, [r7, #24]
 800150c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]
 8001512:	4b36      	ldr	r3, [pc, #216]	@ (80015ec <HAL_DCMI_MspInit+0x11c>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001516:	4a35      	ldr	r2, [pc, #212]	@ (80015ec <HAL_DCMI_MspInit+0x11c>)
 8001518:	f043 0310 	orr.w	r3, r3, #16
 800151c:	6313      	str	r3, [r2, #48]	@ 0x30
 800151e:	4b33      	ldr	r3, [pc, #204]	@ (80015ec <HAL_DCMI_MspInit+0x11c>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001522:	f003 0310 	and.w	r3, r3, #16
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	613b      	str	r3, [r7, #16]
 800152e:	4b2f      	ldr	r3, [pc, #188]	@ (80015ec <HAL_DCMI_MspInit+0x11c>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001532:	4a2e      	ldr	r2, [pc, #184]	@ (80015ec <HAL_DCMI_MspInit+0x11c>)
 8001534:	f043 0301 	orr.w	r3, r3, #1
 8001538:	6313      	str	r3, [r2, #48]	@ 0x30
 800153a:	4b2c      	ldr	r3, [pc, #176]	@ (80015ec <HAL_DCMI_MspInit+0x11c>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	613b      	str	r3, [r7, #16]
 8001544:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	4b28      	ldr	r3, [pc, #160]	@ (80015ec <HAL_DCMI_MspInit+0x11c>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154e:	4a27      	ldr	r2, [pc, #156]	@ (80015ec <HAL_DCMI_MspInit+0x11c>)
 8001550:	f043 0304 	orr.w	r3, r3, #4
 8001554:	6313      	str	r3, [r2, #48]	@ 0x30
 8001556:	4b25      	ldr	r3, [pc, #148]	@ (80015ec <HAL_DCMI_MspInit+0x11c>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155a:	f003 0304 	and.w	r3, r3, #4
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	4b21      	ldr	r3, [pc, #132]	@ (80015ec <HAL_DCMI_MspInit+0x11c>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156a:	4a20      	ldr	r2, [pc, #128]	@ (80015ec <HAL_DCMI_MspInit+0x11c>)
 800156c:	f043 0302 	orr.w	r3, r3, #2
 8001570:	6313      	str	r3, [r2, #48]	@ 0x30
 8001572:	4b1e      	ldr	r3, [pc, #120]	@ (80015ec <HAL_DCMI_MspInit+0x11c>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	60bb      	str	r3, [r7, #8]
 800157c:	68bb      	ldr	r3, [r7, #8]
//    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
//    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 800157e:	4b1c      	ldr	r3, [pc, #112]	@ (80015f0 <HAL_DCMI_MspInit+0x120>)
 8001580:	4a1c      	ldr	r2, [pc, #112]	@ (80015f4 <HAL_DCMI_MspInit+0x124>)
 8001582:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8001584:	4b1a      	ldr	r3, [pc, #104]	@ (80015f0 <HAL_DCMI_MspInit+0x120>)
 8001586:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800158a:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800158c:	4b18      	ldr	r3, [pc, #96]	@ (80015f0 <HAL_DCMI_MspInit+0x120>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8001592:	4b17      	ldr	r3, [pc, #92]	@ (80015f0 <HAL_DCMI_MspInit+0x120>)
 8001594:	2200      	movs	r2, #0
 8001596:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8001598:	4b15      	ldr	r3, [pc, #84]	@ (80015f0 <HAL_DCMI_MspInit+0x120>)
 800159a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800159e:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015a0:	4b13      	ldr	r3, [pc, #76]	@ (80015f0 <HAL_DCMI_MspInit+0x120>)
 80015a2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80015a6:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80015a8:	4b11      	ldr	r3, [pc, #68]	@ (80015f0 <HAL_DCMI_MspInit+0x120>)
 80015aa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015ae:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 80015b0:	4b0f      	ldr	r3, [pc, #60]	@ (80015f0 <HAL_DCMI_MspInit+0x120>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 80015b6:	4b0e      	ldr	r3, [pc, #56]	@ (80015f0 <HAL_DCMI_MspInit+0x120>)
 80015b8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80015bc:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015be:	4b0c      	ldr	r3, [pc, #48]	@ (80015f0 <HAL_DCMI_MspInit+0x120>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80015c4:	480a      	ldr	r0, [pc, #40]	@ (80015f0 <HAL_DCMI_MspInit+0x120>)
 80015c6:	f000 fcdd 	bl	8001f84 <HAL_DMA_Init>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <HAL_DCMI_MspInit+0x104>
    {
      Error_Handler();
 80015d0:	f7ff ff50 	bl	8001474 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4a06      	ldr	r2, [pc, #24]	@ (80015f0 <HAL_DCMI_MspInit+0x120>)
 80015d8:	639a      	str	r2, [r3, #56]	@ 0x38
 80015da:	4a05      	ldr	r2, [pc, #20]	@ (80015f0 <HAL_DCMI_MspInit+0x120>)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 80015e0:	bf00      	nop
 80015e2:	3730      	adds	r7, #48	@ 0x30
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	50050000 	.word	0x50050000
 80015ec:	40023800 	.word	0x40023800
 80015f0:	20025e10 	.word	0x20025e10
 80015f4:	40026428 	.word	0x40026428

080015f8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08a      	sub	sp, #40	@ 0x28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001600:	f107 0314 	add.w	r3, r7, #20
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a19      	ldr	r2, [pc, #100]	@ (800167c <HAL_I2C_MspInit+0x84>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d12c      	bne.n	8001674 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	613b      	str	r3, [r7, #16]
 800161e:	4b18      	ldr	r3, [pc, #96]	@ (8001680 <HAL_I2C_MspInit+0x88>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001622:	4a17      	ldr	r2, [pc, #92]	@ (8001680 <HAL_I2C_MspInit+0x88>)
 8001624:	f043 0302 	orr.w	r3, r3, #2
 8001628:	6313      	str	r3, [r2, #48]	@ 0x30
 800162a:	4b15      	ldr	r3, [pc, #84]	@ (8001680 <HAL_I2C_MspInit+0x88>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	613b      	str	r3, [r7, #16]
 8001634:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001636:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800163a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800163c:	2312      	movs	r3, #18
 800163e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001640:	2301      	movs	r3, #1
 8001642:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001644:	2303      	movs	r3, #3
 8001646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001648:	2304      	movs	r3, #4
 800164a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	4619      	mov	r1, r3
 8001652:	480c      	ldr	r0, [pc, #48]	@ (8001684 <HAL_I2C_MspInit+0x8c>)
 8001654:	f002 f98e 	bl	8003974 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001658:	2300      	movs	r3, #0
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	4b08      	ldr	r3, [pc, #32]	@ (8001680 <HAL_I2C_MspInit+0x88>)
 800165e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001660:	4a07      	ldr	r2, [pc, #28]	@ (8001680 <HAL_I2C_MspInit+0x88>)
 8001662:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001666:	6413      	str	r3, [r2, #64]	@ 0x40
 8001668:	4b05      	ldr	r3, [pc, #20]	@ (8001680 <HAL_I2C_MspInit+0x88>)
 800166a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001674:	bf00      	nop
 8001676:	3728      	adds	r7, #40	@ 0x28
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40005400 	.word	0x40005400
 8001680:	40023800 	.word	0x40023800
 8001684:	40020400 	.word	0x40020400

08001688 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08a      	sub	sp, #40	@ 0x28
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a19      	ldr	r2, [pc, #100]	@ (800170c <HAL_SPI_MspInit+0x84>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d12c      	bne.n	8001704 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI5_MspInit 0 */

    /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	4b18      	ldr	r3, [pc, #96]	@ (8001710 <HAL_SPI_MspInit+0x88>)
 80016b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b2:	4a17      	ldr	r2, [pc, #92]	@ (8001710 <HAL_SPI_MspInit+0x88>)
 80016b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80016b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80016ba:	4b15      	ldr	r3, [pc, #84]	@ (8001710 <HAL_SPI_MspInit+0x88>)
 80016bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016c2:	613b      	str	r3, [r7, #16]
 80016c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	4b11      	ldr	r3, [pc, #68]	@ (8001710 <HAL_SPI_MspInit+0x88>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ce:	4a10      	ldr	r2, [pc, #64]	@ (8001710 <HAL_SPI_MspInit+0x88>)
 80016d0:	f043 0320 	orr.w	r3, r3, #32
 80016d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001710 <HAL_SPI_MspInit+0x88>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016da:	f003 0320 	and.w	r3, r3, #32
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80016e2:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80016e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e8:	2302      	movs	r3, #2
 80016ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f0:	2303      	movs	r3, #3
 80016f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80016f4:	2305      	movs	r3, #5
 80016f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	4619      	mov	r1, r3
 80016fe:	4805      	ldr	r0, [pc, #20]	@ (8001714 <HAL_SPI_MspInit+0x8c>)
 8001700:	f002 f938 	bl	8003974 <HAL_GPIO_Init>

    /* USER CODE END SPI5_MspInit 1 */

  }

}
 8001704:	bf00      	nop
 8001706:	3728      	adds	r7, #40	@ 0x28
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40015000 	.word	0x40015000
 8001710:	40023800 	.word	0x40023800
 8001714:	40021400 	.word	0x40021400

08001718 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800171c:	bf00      	nop
 800171e:	e7fd      	b.n	800171c <NMI_Handler+0x4>

08001720 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001724:	bf00      	nop
 8001726:	e7fd      	b.n	8001724 <HardFault_Handler+0x4>

08001728 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800172c:	bf00      	nop
 800172e:	e7fd      	b.n	800172c <MemManage_Handler+0x4>

08001730 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001734:	bf00      	nop
 8001736:	e7fd      	b.n	8001734 <BusFault_Handler+0x4>

08001738 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800173c:	bf00      	nop
 800173e:	e7fd      	b.n	800173c <UsageFault_Handler+0x4>

08001740 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800176e:	f000 f8eb 	bl	8001948 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 800177c:	4802      	ldr	r0, [pc, #8]	@ (8001788 <DMA2_Stream1_IRQHandler+0x10>)
 800177e:	f000 fd07 	bl	8002190 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20025e10 	.word	0x20025e10

0800178c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001790:	4b06      	ldr	r3, [pc, #24]	@ (80017ac <SystemInit+0x20>)
 8001792:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001796:	4a05      	ldr	r2, [pc, #20]	@ (80017ac <SystemInit+0x20>)
 8001798:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800179c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <applyKernel3x3_window>:
    {2, 4, 2},
    {1, 2, 1}
};
const int gaussian_factor = 16;

void applyKernel3x3_window(uint8_t window[3][3], const int kernel[3][3], int kernel_factor, int *result) {
 80017b0:	b480      	push	{r7}
 80017b2:	b089      	sub	sp, #36	@ 0x24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
 80017bc:	603b      	str	r3, [r7, #0]
    int sum = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < 3; i++)
 80017c2:	2300      	movs	r3, #0
 80017c4:	61bb      	str	r3, [r7, #24]
 80017c6:	e025      	b.n	8001814 <applyKernel3x3_window+0x64>
        for (int j = 0; j < 3; j++)
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
 80017cc:	e01c      	b.n	8001808 <applyKernel3x3_window+0x58>
            sum += window[i][j] * kernel[i][j];
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	4613      	mov	r3, r2
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	4413      	add	r3, r2
 80017d6:	68fa      	ldr	r2, [r7, #12]
 80017d8:	441a      	add	r2, r3
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	4413      	add	r3, r2
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	4619      	mov	r1, r3
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4613      	mov	r3, r2
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	4413      	add	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	461a      	mov	r2, r3
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	4413      	add	r3, r2
 80017f2:	697a      	ldr	r2, [r7, #20]
 80017f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017f8:	fb01 f303 	mul.w	r3, r1, r3
 80017fc:	69fa      	ldr	r2, [r7, #28]
 80017fe:	4413      	add	r3, r2
 8001800:	61fb      	str	r3, [r7, #28]
        for (int j = 0; j < 3; j++)
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	3301      	adds	r3, #1
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	2b02      	cmp	r3, #2
 800180c:	dddf      	ble.n	80017ce <applyKernel3x3_window+0x1e>
    for (int i = 0; i < 3; i++)
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	3301      	adds	r3, #1
 8001812:	61bb      	str	r3, [r7, #24]
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	2b02      	cmp	r3, #2
 8001818:	ddd6      	ble.n	80017c8 <applyKernel3x3_window+0x18>
    if (kernel_factor != 0) sum /= kernel_factor;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d004      	beq.n	800182a <applyKernel3x3_window+0x7a>
 8001820:	69fa      	ldr	r2, [r7, #28]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	fb92 f3f3 	sdiv	r3, r2, r3
 8001828:	61fb      	str	r3, [r7, #28]
    if (sum > 255) sum = 255;
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	2bff      	cmp	r3, #255	@ 0xff
 800182e:	dd01      	ble.n	8001834 <applyKernel3x3_window+0x84>
 8001830:	23ff      	movs	r3, #255	@ 0xff
 8001832:	61fb      	str	r3, [r7, #28]
    if (sum < 0) sum = 0;
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	2b00      	cmp	r3, #0
 8001838:	da01      	bge.n	800183e <applyKernel3x3_window+0x8e>
 800183a:	2300      	movs	r3, #0
 800183c:	61fb      	str	r3, [r7, #28]
    *result = sum;
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	69fa      	ldr	r2, [r7, #28]
 8001842:	601a      	str	r2, [r3, #0]
}
 8001844:	bf00      	nop
 8001846:	3724      	adds	r7, #36	@ 0x24
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001850:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001888 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001854:	f7ff ff9a 	bl	800178c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001858:	480c      	ldr	r0, [pc, #48]	@ (800188c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800185a:	490d      	ldr	r1, [pc, #52]	@ (8001890 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800185c:	4a0d      	ldr	r2, [pc, #52]	@ (8001894 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800185e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001860:	e002      	b.n	8001868 <LoopCopyDataInit>

08001862 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001862:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001864:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001866:	3304      	adds	r3, #4

08001868 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001868:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800186a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800186c:	d3f9      	bcc.n	8001862 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800186e:	4a0a      	ldr	r2, [pc, #40]	@ (8001898 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001870:	4c0a      	ldr	r4, [pc, #40]	@ (800189c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001872:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001874:	e001      	b.n	800187a <LoopFillZerobss>

08001876 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001876:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001878:	3204      	adds	r2, #4

0800187a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800187a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800187c:	d3fb      	bcc.n	8001876 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800187e:	f003 ff61 	bl	8005744 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001882:	f7ff fc5b 	bl	800113c <main>
  bx  lr    
 8001886:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001888:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800188c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001890:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001894:	08005930 	.word	0x08005930
  ldr r2, =_sbss
 8001898:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800189c:	20025f20 	.word	0x20025f20

080018a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018a0:	e7fe      	b.n	80018a0 <ADC_IRQHandler>
	...

080018a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018a8:	4b0e      	ldr	r3, [pc, #56]	@ (80018e4 <HAL_Init+0x40>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a0d      	ldr	r2, [pc, #52]	@ (80018e4 <HAL_Init+0x40>)
 80018ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018b4:	4b0b      	ldr	r3, [pc, #44]	@ (80018e4 <HAL_Init+0x40>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a0a      	ldr	r2, [pc, #40]	@ (80018e4 <HAL_Init+0x40>)
 80018ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018c0:	4b08      	ldr	r3, [pc, #32]	@ (80018e4 <HAL_Init+0x40>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a07      	ldr	r2, [pc, #28]	@ (80018e4 <HAL_Init+0x40>)
 80018c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018cc:	2003      	movs	r0, #3
 80018ce:	f000 f94f 	bl	8001b70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018d2:	2000      	movs	r0, #0
 80018d4:	f000 f808 	bl	80018e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018d8:	f7ff fdd2 	bl	8001480 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40023c00 	.word	0x40023c00

080018e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018f0:	4b12      	ldr	r3, [pc, #72]	@ (800193c <HAL_InitTick+0x54>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	4b12      	ldr	r3, [pc, #72]	@ (8001940 <HAL_InitTick+0x58>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	4619      	mov	r1, r3
 80018fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001902:	fbb2 f3f3 	udiv	r3, r2, r3
 8001906:	4618      	mov	r0, r3
 8001908:	f000 f967 	bl	8001bda <HAL_SYSTICK_Config>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e00e      	b.n	8001934 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b0f      	cmp	r3, #15
 800191a:	d80a      	bhi.n	8001932 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800191c:	2200      	movs	r2, #0
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	f04f 30ff 	mov.w	r0, #4294967295
 8001924:	f000 f92f 	bl	8001b86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001928:	4a06      	ldr	r2, [pc, #24]	@ (8001944 <HAL_InitTick+0x5c>)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800192e:	2300      	movs	r3, #0
 8001930:	e000      	b.n	8001934 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
}
 8001934:	4618      	mov	r0, r3
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20000004 	.word	0x20000004
 8001940:	2000000c 	.word	0x2000000c
 8001944:	20000008 	.word	0x20000008

08001948 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800194c:	4b06      	ldr	r3, [pc, #24]	@ (8001968 <HAL_IncTick+0x20>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	461a      	mov	r2, r3
 8001952:	4b06      	ldr	r3, [pc, #24]	@ (800196c <HAL_IncTick+0x24>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4413      	add	r3, r2
 8001958:	4a04      	ldr	r2, [pc, #16]	@ (800196c <HAL_IncTick+0x24>)
 800195a:	6013      	str	r3, [r2, #0]
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	2000000c 	.word	0x2000000c
 800196c:	20025f1c 	.word	0x20025f1c

08001970 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  return uwTick;
 8001974:	4b03      	ldr	r3, [pc, #12]	@ (8001984 <HAL_GetTick+0x14>)
 8001976:	681b      	ldr	r3, [r3, #0]
}
 8001978:	4618      	mov	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	20025f1c 	.word	0x20025f1c

08001988 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001990:	f7ff ffee 	bl	8001970 <HAL_GetTick>
 8001994:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a0:	d005      	beq.n	80019ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019a2:	4b0a      	ldr	r3, [pc, #40]	@ (80019cc <HAL_Delay+0x44>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	461a      	mov	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	4413      	add	r3, r2
 80019ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019ae:	bf00      	nop
 80019b0:	f7ff ffde 	bl	8001970 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d8f7      	bhi.n	80019b0 <HAL_Delay+0x28>
  {
  }
}
 80019c0:	bf00      	nop
 80019c2:	bf00      	nop
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	2000000c 	.word	0x2000000c

080019d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a14 <__NVIC_SetPriorityGrouping+0x44>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019e6:	68ba      	ldr	r2, [r7, #8]
 80019e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019ec:	4013      	ands	r3, r2
 80019ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a02:	4a04      	ldr	r2, [pc, #16]	@ (8001a14 <__NVIC_SetPriorityGrouping+0x44>)
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	60d3      	str	r3, [r2, #12]
}
 8001a08:	bf00      	nop
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a1c:	4b04      	ldr	r3, [pc, #16]	@ (8001a30 <__NVIC_GetPriorityGrouping+0x18>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	0a1b      	lsrs	r3, r3, #8
 8001a22:	f003 0307 	and.w	r3, r3, #7
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	db0b      	blt.n	8001a5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a46:	79fb      	ldrb	r3, [r7, #7]
 8001a48:	f003 021f 	and.w	r2, r3, #31
 8001a4c:	4907      	ldr	r1, [pc, #28]	@ (8001a6c <__NVIC_EnableIRQ+0x38>)
 8001a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a52:	095b      	lsrs	r3, r3, #5
 8001a54:	2001      	movs	r0, #1
 8001a56:	fa00 f202 	lsl.w	r2, r0, r2
 8001a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	e000e100 	.word	0xe000e100

08001a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	6039      	str	r1, [r7, #0]
 8001a7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	db0a      	blt.n	8001a9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	b2da      	uxtb	r2, r3
 8001a88:	490c      	ldr	r1, [pc, #48]	@ (8001abc <__NVIC_SetPriority+0x4c>)
 8001a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8e:	0112      	lsls	r2, r2, #4
 8001a90:	b2d2      	uxtb	r2, r2
 8001a92:	440b      	add	r3, r1
 8001a94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a98:	e00a      	b.n	8001ab0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	4908      	ldr	r1, [pc, #32]	@ (8001ac0 <__NVIC_SetPriority+0x50>)
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	3b04      	subs	r3, #4
 8001aa8:	0112      	lsls	r2, r2, #4
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	440b      	add	r3, r1
 8001aae:	761a      	strb	r2, [r3, #24]
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	e000e100 	.word	0xe000e100
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b089      	sub	sp, #36	@ 0x24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	f1c3 0307 	rsb	r3, r3, #7
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	bf28      	it	cs
 8001ae2:	2304      	movcs	r3, #4
 8001ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	3304      	adds	r3, #4
 8001aea:	2b06      	cmp	r3, #6
 8001aec:	d902      	bls.n	8001af4 <NVIC_EncodePriority+0x30>
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	3b03      	subs	r3, #3
 8001af2:	e000      	b.n	8001af6 <NVIC_EncodePriority+0x32>
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af8:	f04f 32ff 	mov.w	r2, #4294967295
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43da      	mvns	r2, r3
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	401a      	ands	r2, r3
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	fa01 f303 	lsl.w	r3, r1, r3
 8001b16:	43d9      	mvns	r1, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b1c:	4313      	orrs	r3, r2
         );
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3724      	adds	r7, #36	@ 0x24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
	...

08001b2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3b01      	subs	r3, #1
 8001b38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b3c:	d301      	bcc.n	8001b42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e00f      	b.n	8001b62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b42:	4a0a      	ldr	r2, [pc, #40]	@ (8001b6c <SysTick_Config+0x40>)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3b01      	subs	r3, #1
 8001b48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b4a:	210f      	movs	r1, #15
 8001b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b50:	f7ff ff8e 	bl	8001a70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b54:	4b05      	ldr	r3, [pc, #20]	@ (8001b6c <SysTick_Config+0x40>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b5a:	4b04      	ldr	r3, [pc, #16]	@ (8001b6c <SysTick_Config+0x40>)
 8001b5c:	2207      	movs	r2, #7
 8001b5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	e000e010 	.word	0xe000e010

08001b70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f7ff ff29 	bl	80019d0 <__NVIC_SetPriorityGrouping>
}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b086      	sub	sp, #24
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	60b9      	str	r1, [r7, #8]
 8001b90:	607a      	str	r2, [r7, #4]
 8001b92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b98:	f7ff ff3e 	bl	8001a18 <__NVIC_GetPriorityGrouping>
 8001b9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	68b9      	ldr	r1, [r7, #8]
 8001ba2:	6978      	ldr	r0, [r7, #20]
 8001ba4:	f7ff ff8e 	bl	8001ac4 <NVIC_EncodePriority>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bae:	4611      	mov	r1, r2
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff ff5d 	bl	8001a70 <__NVIC_SetPriority>
}
 8001bb6:	bf00      	nop
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff ff31 	bl	8001a34 <__NVIC_EnableIRQ>
}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b082      	sub	sp, #8
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7ff ffa2 	bl	8001b2c <SysTick_Config>
 8001be8:	4603      	mov	r3, r0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
	...

08001bf4 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b088      	sub	sp, #32
 8001bf8:	af02      	add	r7, sp, #8
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
 8001c00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;

  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	613b      	str	r3, [r7, #16]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d101      	bne.n	8001c14 <HAL_DCMI_Start_DMA+0x20>
 8001c10:	2302      	movs	r3, #2
 8001c12:	e08a      	b.n	8001d2a <HAL_DCMI_Start_DMA+0x136>
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2202      	movs	r2, #2
 8001c20:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001c32:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f022 0202 	bic.w	r2, r2, #2
 8001c42:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6819      	ldr	r1, [r3, #0]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68ba      	ldr	r2, [r7, #8]
 8001c50:	430a      	orrs	r2, r1
 8001c52:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c58:	4a36      	ldr	r2, [pc, #216]	@ (8001d34 <HAL_DCMI_Start_DMA+0x140>)
 8001c5a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c60:	4a35      	ldr	r2, [pc, #212]	@ (8001d38 <HAL_DCMI_Start_DMA+0x144>)
 8001c62:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c68:	2200      	movs	r2, #0
 8001c6a:	651a      	str	r2, [r3, #80]	@ 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi->XferTransferNumber = 0U;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2200      	movs	r2, #0
 8001c76:	631a      	str	r2, [r3, #48]	@ 0x30

  if(Length <= 0xFFFFU)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c7e:	d20c      	bcs.n	8001c9a <HAL_DCMI_Start_DMA+0xa6>
  {
    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	3328      	adds	r3, #40	@ 0x28
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	f000 fa26 	bl	80020e0 <HAL_DMA_Start_IT>
 8001c94:	4603      	mov	r3, r0
 8001c96:	75fb      	strb	r3, [r7, #23]
 8001c98:	e03a      	b.n	8001d10 <HAL_DCMI_Start_DMA+0x11c>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c9e:	4a25      	ldr	r2, [pc, #148]	@ (8001d34 <HAL_DCMI_Start_DMA+0x140>)
 8001ca0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	629a      	str	r2, [r3, #40]	@ 0x28
    hdcmi->XferSize = Length;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdcmi->pBuffPtr = pData;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 8001cb4:	e009      	b.n	8001cca <HAL_DCMI_Start_DMA+0xd6>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cba:	085a      	lsrs	r2, r3, #1
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	62da      	str	r2, [r3, #44]	@ 0x2c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cc4:	005a      	lsls	r2, r3, #1
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	629a      	str	r2, [r3, #40]	@ 0x28
    while(hdcmi->XferSize > 0xFFFFU)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cd2:	d2f0      	bcs.n	8001cb6 <HAL_DCMI_Start_DMA+0xc2>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cd8:	1e9a      	subs	r2, r3, #2
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	629a      	str	r2, [r3, #40]	@ 0x28
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	4413      	add	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]

    /* Start DMA multi buffer transfer */
    status = HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	3328      	adds	r3, #40	@ 0x28
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	f000 fcac 	bl	8002664 <HAL_DMAEx_MultiBufferStart_IT>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	75fb      	strb	r3, [r7, #23]
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f042 0201 	orr.w	r2, r2, #1
 8001d1e:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  /* Return function status */
  return status;
 8001d28:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3718      	adds	r7, #24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	08001d51 	.word	0x08001d51
 8001d38:	08001e7b 	.word	0x08001e7b

08001d3c <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d60:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d043      	beq.n	8001df2 <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d76:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d118      	bne.n	8001db6 <DCMI_DMAXferCplt+0x66>
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d015      	beq.n	8001db6 <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d9c:	00da      	lsls	r2, r3, #3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	4413      	add	r3, r2
 8001da2:	2200      	movs	r2, #0
 8001da4:	4619      	mov	r1, r3
 8001da6:	f001 fda5 	bl	80038f4 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dae:	1e5a      	subs	r2, r3, #1
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	629a      	str	r2, [r3, #40]	@ 0x28
 8001db4:	e044      	b.n	8001e40 <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d13c      	bne.n	8001e40 <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dd8:	00da      	lsls	r2, r3, #3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	4413      	add	r3, r2
 8001dde:	2201      	movs	r2, #1
 8001de0:	4619      	mov	r1, r3
 8001de2:	f001 fd87 	bl	80038f4 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dea:	1e5a      	subs	r2, r3, #1
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	629a      	str	r2, [r3, #40]	@ 0x28
 8001df0:	e026      	b.n	8001e40 <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d006      	beq.n	8001e10 <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68ba      	ldr	r2, [r7, #8]
 8001e0a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	e017      	b.n	8001e40 <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d10f      	bne.n	8001e40 <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e24:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e2a:	0099      	lsls	r1, r3, #2
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	440a      	add	r2, r1
 8001e36:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d112      	bne.n	8001e72 <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	68da      	ldr	r2, [r3, #12]
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f042 0201 	orr.w	r2, r2, #1
 8001e5a:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d103      	bne.n	8001e72 <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }
}
 8001e72:	bf00      	nop
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b084      	sub	sp, #16
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e86:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d003      	beq.n	8001e9a <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f7ff ff4e 	bl	8001d3c <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 8001ea0:	bf00      	nop
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e05f      	b.n	8001f7a <HAL_DCMI_Init+0xd2>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d109      	bne.n	8001eda <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7ff fafe 	bl	80014d0 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f7ff fafb 	bl	80014d0 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2202      	movs	r2, #2
 8001ede:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	6812      	ldr	r2, [r2, #0]
 8001eec:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001ef0:	f023 0308 	bic.w	r3, r3, #8
 8001ef4:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6819      	ldr	r1, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	695b      	ldr	r3, [r3, #20]
 8001f04:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001f0a:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001f16:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001f22:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	601a      	str	r2, [r3, #0]
                                     | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	2b10      	cmp	r3, #16
 8001f32:	d112      	bne.n	8001f5a <HAL_DCMI_Init+0xb2>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	7f1b      	ldrb	r3, [r3, #28]
 8001f38:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	7f5b      	ldrb	r3, [r3, #29]
 8001f3e:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001f40:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	7f9b      	ldrb	r3, [r3, #30]
 8001f46:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8001f48:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	7fdb      	ldrb	r3, [r3, #31]
 8001f50:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8001f56:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001f58:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68da      	ldr	r2, [r3, #12]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f042 021e 	orr.w	r2, r2, #30
 8001f68:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
	...

08001f84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f90:	f7ff fcee 	bl	8001970 <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d101      	bne.n	8001fa0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e099      	b.n	80020d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 0201 	bic.w	r2, r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fc0:	e00f      	b.n	8001fe2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fc2:	f7ff fcd5 	bl	8001970 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b05      	cmp	r3, #5
 8001fce:	d908      	bls.n	8001fe2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2220      	movs	r2, #32
 8001fd4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2203      	movs	r2, #3
 8001fda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e078      	b.n	80020d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d1e8      	bne.n	8001fc2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ff8:	697a      	ldr	r2, [r7, #20]
 8001ffa:	4b38      	ldr	r3, [pc, #224]	@ (80020dc <HAL_DMA_Init+0x158>)
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685a      	ldr	r2, [r3, #4]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800200e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	691b      	ldr	r3, [r3, #16]
 8002014:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800201a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002026:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	4313      	orrs	r3, r2
 8002032:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002038:	2b04      	cmp	r3, #4
 800203a:	d107      	bne.n	800204c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002044:	4313      	orrs	r3, r2
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	4313      	orrs	r3, r2
 800204a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	697a      	ldr	r2, [r7, #20]
 8002052:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	f023 0307 	bic.w	r3, r3, #7
 8002062:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002068:	697a      	ldr	r2, [r7, #20]
 800206a:	4313      	orrs	r3, r2
 800206c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002072:	2b04      	cmp	r3, #4
 8002074:	d117      	bne.n	80020a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	4313      	orrs	r3, r2
 800207e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002084:	2b00      	cmp	r3, #0
 8002086:	d00e      	beq.n	80020a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 fa6f 	bl	800256c <DMA_CheckFifoParam>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d008      	beq.n	80020a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2240      	movs	r2, #64	@ 0x40
 8002098:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2201      	movs	r2, #1
 800209e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80020a2:	2301      	movs	r3, #1
 80020a4:	e016      	b.n	80020d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 fa26 	bl	8002500 <DMA_CalcBaseAndBitshift>
 80020b4:	4603      	mov	r3, r0
 80020b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020bc:	223f      	movs	r2, #63	@ 0x3f
 80020be:	409a      	lsls	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3718      	adds	r7, #24
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	f010803f 	.word	0xf010803f

080020e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
 80020ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020ee:	2300      	movs	r3, #0
 80020f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d101      	bne.n	8002106 <HAL_DMA_Start_IT+0x26>
 8002102:	2302      	movs	r3, #2
 8002104:	e040      	b.n	8002188 <HAL_DMA_Start_IT+0xa8>
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b01      	cmp	r3, #1
 8002118:	d12f      	bne.n	800217a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2202      	movs	r2, #2
 800211e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2200      	movs	r2, #0
 8002126:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	68b9      	ldr	r1, [r7, #8]
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f000 f9b8 	bl	80024a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002138:	223f      	movs	r2, #63	@ 0x3f
 800213a:	409a      	lsls	r2, r3
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f042 0216 	orr.w	r2, r2, #22
 800214e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002154:	2b00      	cmp	r3, #0
 8002156:	d007      	beq.n	8002168 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f042 0208 	orr.w	r2, r2, #8
 8002166:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f042 0201 	orr.w	r2, r2, #1
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	e005      	b.n	8002186 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002182:	2302      	movs	r3, #2
 8002184:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002186:	7dfb      	ldrb	r3, [r7, #23]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002198:	2300      	movs	r3, #0
 800219a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800219c:	4b8e      	ldr	r3, [pc, #568]	@ (80023d8 <HAL_DMA_IRQHandler+0x248>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a8e      	ldr	r2, [pc, #568]	@ (80023dc <HAL_DMA_IRQHandler+0x24c>)
 80021a2:	fba2 2303 	umull	r2, r3, r2, r3
 80021a6:	0a9b      	lsrs	r3, r3, #10
 80021a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ba:	2208      	movs	r2, #8
 80021bc:	409a      	lsls	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	4013      	ands	r3, r2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d01a      	beq.n	80021fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d013      	beq.n	80021fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 0204 	bic.w	r2, r2, #4
 80021e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e8:	2208      	movs	r2, #8
 80021ea:	409a      	lsls	r2, r3
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021f4:	f043 0201 	orr.w	r2, r3, #1
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002200:	2201      	movs	r2, #1
 8002202:	409a      	lsls	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4013      	ands	r3, r2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d012      	beq.n	8002232 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00b      	beq.n	8002232 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800221e:	2201      	movs	r2, #1
 8002220:	409a      	lsls	r2, r3
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800222a:	f043 0202 	orr.w	r2, r3, #2
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002236:	2204      	movs	r2, #4
 8002238:	409a      	lsls	r2, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	4013      	ands	r3, r2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d012      	beq.n	8002268 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00b      	beq.n	8002268 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002254:	2204      	movs	r2, #4
 8002256:	409a      	lsls	r2, r3
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002260:	f043 0204 	orr.w	r2, r3, #4
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800226c:	2210      	movs	r2, #16
 800226e:	409a      	lsls	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4013      	ands	r3, r2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d043      	beq.n	8002300 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0308 	and.w	r3, r3, #8
 8002282:	2b00      	cmp	r3, #0
 8002284:	d03c      	beq.n	8002300 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800228a:	2210      	movs	r2, #16
 800228c:	409a      	lsls	r2, r3
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d018      	beq.n	80022d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d108      	bne.n	80022c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d024      	beq.n	8002300 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	4798      	blx	r3
 80022be:	e01f      	b.n	8002300 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d01b      	beq.n	8002300 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	4798      	blx	r3
 80022d0:	e016      	b.n	8002300 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d107      	bne.n	80022f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 0208 	bic.w	r2, r2, #8
 80022ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d003      	beq.n	8002300 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002304:	2220      	movs	r2, #32
 8002306:	409a      	lsls	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	4013      	ands	r3, r2
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 808f 	beq.w	8002430 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0310 	and.w	r3, r3, #16
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 8087 	beq.w	8002430 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002326:	2220      	movs	r2, #32
 8002328:	409a      	lsls	r2, r3
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b05      	cmp	r3, #5
 8002338:	d136      	bne.n	80023a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f022 0216 	bic.w	r2, r2, #22
 8002348:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	695a      	ldr	r2, [r3, #20]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002358:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235e:	2b00      	cmp	r3, #0
 8002360:	d103      	bne.n	800236a <HAL_DMA_IRQHandler+0x1da>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002366:	2b00      	cmp	r3, #0
 8002368:	d007      	beq.n	800237a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 0208 	bic.w	r2, r2, #8
 8002378:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800237e:	223f      	movs	r2, #63	@ 0x3f
 8002380:	409a      	lsls	r2, r3
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800239a:	2b00      	cmp	r3, #0
 800239c:	d07e      	beq.n	800249c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	4798      	blx	r3
        }
        return;
 80023a6:	e079      	b.n	800249c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d01d      	beq.n	80023f2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d10d      	bne.n	80023e0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d031      	beq.n	8002430 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	4798      	blx	r3
 80023d4:	e02c      	b.n	8002430 <HAL_DMA_IRQHandler+0x2a0>
 80023d6:	bf00      	nop
 80023d8:	20000004 	.word	0x20000004
 80023dc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d023      	beq.n	8002430 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	4798      	blx	r3
 80023f0:	e01e      	b.n	8002430 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10f      	bne.n	8002420 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f022 0210 	bic.w	r2, r2, #16
 800240e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002424:	2b00      	cmp	r3, #0
 8002426:	d003      	beq.n	8002430 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002434:	2b00      	cmp	r3, #0
 8002436:	d032      	beq.n	800249e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	2b00      	cmp	r3, #0
 8002442:	d022      	beq.n	800248a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2205      	movs	r2, #5
 8002448:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f022 0201 	bic.w	r2, r2, #1
 800245a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	3301      	adds	r3, #1
 8002460:	60bb      	str	r3, [r7, #8]
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	429a      	cmp	r2, r3
 8002466:	d307      	bcc.n	8002478 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1f2      	bne.n	800245c <HAL_DMA_IRQHandler+0x2cc>
 8002476:	e000      	b.n	800247a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002478:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800248e:	2b00      	cmp	r3, #0
 8002490:	d005      	beq.n	800249e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	4798      	blx	r3
 800249a:	e000      	b.n	800249e <HAL_DMA_IRQHandler+0x30e>
        return;
 800249c:	bf00      	nop
    }
  }
}
 800249e:	3718      	adds	r7, #24
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
 80024b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80024c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	2b40      	cmp	r3, #64	@ 0x40
 80024d0:	d108      	bne.n	80024e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80024e2:	e007      	b.n	80024f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68ba      	ldr	r2, [r7, #8]
 80024ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	60da      	str	r2, [r3, #12]
}
 80024f4:	bf00      	nop
 80024f6:	3714      	adds	r7, #20
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	b2db      	uxtb	r3, r3
 800250e:	3b10      	subs	r3, #16
 8002510:	4a14      	ldr	r2, [pc, #80]	@ (8002564 <DMA_CalcBaseAndBitshift+0x64>)
 8002512:	fba2 2303 	umull	r2, r3, r2, r3
 8002516:	091b      	lsrs	r3, r3, #4
 8002518:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800251a:	4a13      	ldr	r2, [pc, #76]	@ (8002568 <DMA_CalcBaseAndBitshift+0x68>)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	4413      	add	r3, r2
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	461a      	mov	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2b03      	cmp	r3, #3
 800252c:	d909      	bls.n	8002542 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002536:	f023 0303 	bic.w	r3, r3, #3
 800253a:	1d1a      	adds	r2, r3, #4
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002540:	e007      	b.n	8002552 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800254a:	f023 0303 	bic.w	r3, r3, #3
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002556:	4618      	mov	r0, r3
 8002558:	3714      	adds	r7, #20
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	aaaaaaab 	.word	0xaaaaaaab
 8002568:	08005918 	.word	0x08005918

0800256c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002574:	2300      	movs	r3, #0
 8002576:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800257c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d11f      	bne.n	80025c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	2b03      	cmp	r3, #3
 800258a:	d856      	bhi.n	800263a <DMA_CheckFifoParam+0xce>
 800258c:	a201      	add	r2, pc, #4	@ (adr r2, 8002594 <DMA_CheckFifoParam+0x28>)
 800258e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002592:	bf00      	nop
 8002594:	080025a5 	.word	0x080025a5
 8002598:	080025b7 	.word	0x080025b7
 800259c:	080025a5 	.word	0x080025a5
 80025a0:	0800263b 	.word	0x0800263b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d046      	beq.n	800263e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025b4:	e043      	b.n	800263e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ba:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80025be:	d140      	bne.n	8002642 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025c4:	e03d      	b.n	8002642 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025ce:	d121      	bne.n	8002614 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	2b03      	cmp	r3, #3
 80025d4:	d837      	bhi.n	8002646 <DMA_CheckFifoParam+0xda>
 80025d6:	a201      	add	r2, pc, #4	@ (adr r2, 80025dc <DMA_CheckFifoParam+0x70>)
 80025d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025dc:	080025ed 	.word	0x080025ed
 80025e0:	080025f3 	.word	0x080025f3
 80025e4:	080025ed 	.word	0x080025ed
 80025e8:	08002605 	.word	0x08002605
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	73fb      	strb	r3, [r7, #15]
      break;
 80025f0:	e030      	b.n	8002654 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d025      	beq.n	800264a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002602:	e022      	b.n	800264a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002608:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800260c:	d11f      	bne.n	800264e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002612:	e01c      	b.n	800264e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	2b02      	cmp	r3, #2
 8002618:	d903      	bls.n	8002622 <DMA_CheckFifoParam+0xb6>
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	2b03      	cmp	r3, #3
 800261e:	d003      	beq.n	8002628 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002620:	e018      	b.n	8002654 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	73fb      	strb	r3, [r7, #15]
      break;
 8002626:	e015      	b.n	8002654 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800262c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00e      	beq.n	8002652 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	73fb      	strb	r3, [r7, #15]
      break;
 8002638:	e00b      	b.n	8002652 <DMA_CheckFifoParam+0xe6>
      break;
 800263a:	bf00      	nop
 800263c:	e00a      	b.n	8002654 <DMA_CheckFifoParam+0xe8>
      break;
 800263e:	bf00      	nop
 8002640:	e008      	b.n	8002654 <DMA_CheckFifoParam+0xe8>
      break;
 8002642:	bf00      	nop
 8002644:	e006      	b.n	8002654 <DMA_CheckFifoParam+0xe8>
      break;
 8002646:	bf00      	nop
 8002648:	e004      	b.n	8002654 <DMA_CheckFifoParam+0xe8>
      break;
 800264a:	bf00      	nop
 800264c:	e002      	b.n	8002654 <DMA_CheckFifoParam+0xe8>
      break;   
 800264e:	bf00      	nop
 8002650:	e000      	b.n	8002654 <DMA_CheckFifoParam+0xe8>
      break;
 8002652:	bf00      	nop
    }
  } 
  
  return status; 
 8002654:	7bfb      	ldrb	r3, [r7, #15]
}
 8002656:	4618      	mov	r0, r3
 8002658:	3714      	adds	r7, #20
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop

08002664 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
 8002670:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002672:	2300      	movs	r3, #0
 8002674:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	2b80      	cmp	r3, #128	@ 0x80
 800267c:	d106      	bne.n	800268c <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002684:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	f001 b911 	b.w	80038ae <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002690:	2b00      	cmp	r3, #0
 8002692:	d007      	beq.n	80026a4 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002698:	2b00      	cmp	r3, #0
 800269a:	d003      	beq.n	80026a4 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d105      	bne.n	80026b0 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2240      	movs	r2, #64	@ 0x40
 80026a8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	f001 b8ff 	b.w	80038ae <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d102      	bne.n	80026c0 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 80026ba:	2302      	movs	r3, #2
 80026bc:	f001 b8f7 	b.w	80038ae <HAL_DMAEx_MultiBufferStart_IT+0x124a>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	f041 80e5 	bne.w	80038a0 <HAL_DMAEx_MultiBufferStart_IT+0x123c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2202      	movs	r2, #2
 80026da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80026f2:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 80026fc:	6a3b      	ldr	r3, [r7, #32]
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	68b9      	ldr	r1, [r7, #8]
 8002702:	68f8      	ldr	r0, [r7, #12]
 8002704:	f001 f910 	bl	8003928 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	461a      	mov	r2, r3
 800270e:	4b8d      	ldr	r3, [pc, #564]	@ (8002944 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8002710:	429a      	cmp	r2, r3
 8002712:	d960      	bls.n	80027d6 <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a8b      	ldr	r2, [pc, #556]	@ (8002948 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d057      	beq.n	80027ce <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a8a      	ldr	r2, [pc, #552]	@ (800294c <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d050      	beq.n	80027ca <HAL_DMAEx_MultiBufferStart_IT+0x166>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a88      	ldr	r2, [pc, #544]	@ (8002950 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d049      	beq.n	80027c6 <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a87      	ldr	r2, [pc, #540]	@ (8002954 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d042      	beq.n	80027c2 <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a85      	ldr	r2, [pc, #532]	@ (8002958 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d03a      	beq.n	80027bc <HAL_DMAEx_MultiBufferStart_IT+0x158>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a84      	ldr	r2, [pc, #528]	@ (800295c <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d032      	beq.n	80027b6 <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a82      	ldr	r2, [pc, #520]	@ (8002960 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d02a      	beq.n	80027b0 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a81      	ldr	r2, [pc, #516]	@ (8002964 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d022      	beq.n	80027aa <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a7f      	ldr	r2, [pc, #508]	@ (8002968 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d01a      	beq.n	80027a4 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a7e      	ldr	r2, [pc, #504]	@ (800296c <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d012      	beq.n	800279e <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a7c      	ldr	r2, [pc, #496]	@ (8002970 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d00a      	beq.n	8002798 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a7b      	ldr	r2, [pc, #492]	@ (8002974 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d102      	bne.n	8002792 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 800278c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002790:	e01e      	b.n	80027d0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002792:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002796:	e01b      	b.n	80027d0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002798:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800279c:	e018      	b.n	80027d0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800279e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80027a2:	e015      	b.n	80027d0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80027a4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80027a8:	e012      	b.n	80027d0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80027aa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80027ae:	e00f      	b.n	80027d0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80027b0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80027b4:	e00c      	b.n	80027d0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80027b6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80027ba:	e009      	b.n	80027d0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80027bc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80027c0:	e006      	b.n	80027d0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80027c2:	2320      	movs	r3, #32
 80027c4:	e004      	b.n	80027d0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80027c6:	2320      	movs	r3, #32
 80027c8:	e002      	b.n	80027d0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80027ca:	2320      	movs	r3, #32
 80027cc:	e000      	b.n	80027d0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80027ce:	2320      	movs	r3, #32
 80027d0:	4a69      	ldr	r2, [pc, #420]	@ (8002978 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80027d2:	60d3      	str	r3, [r2, #12]
 80027d4:	e14f      	b.n	8002a76 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	461a      	mov	r2, r3
 80027dc:	4b67      	ldr	r3, [pc, #412]	@ (800297c <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 80027de:	429a      	cmp	r2, r3
 80027e0:	d960      	bls.n	80028a4 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a58      	ldr	r2, [pc, #352]	@ (8002948 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d057      	beq.n	800289c <HAL_DMAEx_MultiBufferStart_IT+0x238>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a56      	ldr	r2, [pc, #344]	@ (800294c <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d050      	beq.n	8002898 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a55      	ldr	r2, [pc, #340]	@ (8002950 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d049      	beq.n	8002894 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a53      	ldr	r2, [pc, #332]	@ (8002954 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d042      	beq.n	8002890 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a52      	ldr	r2, [pc, #328]	@ (8002958 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d03a      	beq.n	800288a <HAL_DMAEx_MultiBufferStart_IT+0x226>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a50      	ldr	r2, [pc, #320]	@ (800295c <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d032      	beq.n	8002884 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a4f      	ldr	r2, [pc, #316]	@ (8002960 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d02a      	beq.n	800287e <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a4d      	ldr	r2, [pc, #308]	@ (8002964 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d022      	beq.n	8002878 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a4c      	ldr	r2, [pc, #304]	@ (8002968 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d01a      	beq.n	8002872 <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a4a      	ldr	r2, [pc, #296]	@ (800296c <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d012      	beq.n	800286c <HAL_DMAEx_MultiBufferStart_IT+0x208>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a49      	ldr	r2, [pc, #292]	@ (8002970 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d00a      	beq.n	8002866 <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a47      	ldr	r2, [pc, #284]	@ (8002974 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d102      	bne.n	8002860 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 800285a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800285e:	e01e      	b.n	800289e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002860:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002864:	e01b      	b.n	800289e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002866:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800286a:	e018      	b.n	800289e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800286c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002870:	e015      	b.n	800289e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002872:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002876:	e012      	b.n	800289e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002878:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800287c:	e00f      	b.n	800289e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800287e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002882:	e00c      	b.n	800289e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002884:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002888:	e009      	b.n	800289e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800288a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800288e:	e006      	b.n	800289e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002890:	2320      	movs	r3, #32
 8002892:	e004      	b.n	800289e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002894:	2320      	movs	r3, #32
 8002896:	e002      	b.n	800289e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002898:	2320      	movs	r3, #32
 800289a:	e000      	b.n	800289e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800289c:	2320      	movs	r3, #32
 800289e:	4a36      	ldr	r2, [pc, #216]	@ (8002978 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80028a0:	6093      	str	r3, [r2, #8]
 80028a2:	e0e8      	b.n	8002a76 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	461a      	mov	r2, r3
 80028aa:	4b35      	ldr	r3, [pc, #212]	@ (8002980 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 80028ac:	429a      	cmp	r2, r3
 80028ae:	f240 8082 	bls.w	80029b6 <HAL_DMAEx_MultiBufferStart_IT+0x352>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a24      	ldr	r2, [pc, #144]	@ (8002948 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d078      	beq.n	80029ae <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a22      	ldr	r2, [pc, #136]	@ (800294c <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d071      	beq.n	80029aa <HAL_DMAEx_MultiBufferStart_IT+0x346>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a21      	ldr	r2, [pc, #132]	@ (8002950 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d06a      	beq.n	80029a6 <HAL_DMAEx_MultiBufferStart_IT+0x342>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a1f      	ldr	r2, [pc, #124]	@ (8002954 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d063      	beq.n	80029a2 <HAL_DMAEx_MultiBufferStart_IT+0x33e>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a1e      	ldr	r2, [pc, #120]	@ (8002958 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d05b      	beq.n	800299c <HAL_DMAEx_MultiBufferStart_IT+0x338>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a1c      	ldr	r2, [pc, #112]	@ (800295c <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d053      	beq.n	8002996 <HAL_DMAEx_MultiBufferStart_IT+0x332>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a1b      	ldr	r2, [pc, #108]	@ (8002960 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d04b      	beq.n	8002990 <HAL_DMAEx_MultiBufferStart_IT+0x32c>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a19      	ldr	r2, [pc, #100]	@ (8002964 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d043      	beq.n	800298a <HAL_DMAEx_MultiBufferStart_IT+0x326>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a18      	ldr	r2, [pc, #96]	@ (8002968 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d03b      	beq.n	8002984 <HAL_DMAEx_MultiBufferStart_IT+0x320>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a16      	ldr	r2, [pc, #88]	@ (800296c <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d012      	beq.n	800293c <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a15      	ldr	r2, [pc, #84]	@ (8002970 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d00a      	beq.n	8002936 <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a13      	ldr	r2, [pc, #76]	@ (8002974 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d102      	bne.n	8002930 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 800292a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800292e:	e03f      	b.n	80029b0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002930:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002934:	e03c      	b.n	80029b0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002936:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800293a:	e039      	b.n	80029b0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800293c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002940:	e036      	b.n	80029b0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002942:	bf00      	nop
 8002944:	40026458 	.word	0x40026458
 8002948:	40026010 	.word	0x40026010
 800294c:	40026410 	.word	0x40026410
 8002950:	40026070 	.word	0x40026070
 8002954:	40026470 	.word	0x40026470
 8002958:	40026028 	.word	0x40026028
 800295c:	40026428 	.word	0x40026428
 8002960:	40026088 	.word	0x40026088
 8002964:	40026488 	.word	0x40026488
 8002968:	40026040 	.word	0x40026040
 800296c:	40026440 	.word	0x40026440
 8002970:	400260a0 	.word	0x400260a0
 8002974:	400264a0 	.word	0x400264a0
 8002978:	40026400 	.word	0x40026400
 800297c:	400260b8 	.word	0x400260b8
 8002980:	40026058 	.word	0x40026058
 8002984:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002988:	e012      	b.n	80029b0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800298a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800298e:	e00f      	b.n	80029b0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002990:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002994:	e00c      	b.n	80029b0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002996:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800299a:	e009      	b.n	80029b0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800299c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80029a0:	e006      	b.n	80029b0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80029a2:	2320      	movs	r3, #32
 80029a4:	e004      	b.n	80029b0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80029a6:	2320      	movs	r3, #32
 80029a8:	e002      	b.n	80029b0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80029aa:	2320      	movs	r3, #32
 80029ac:	e000      	b.n	80029b0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80029ae:	2320      	movs	r3, #32
 80029b0:	4a8c      	ldr	r2, [pc, #560]	@ (8002be4 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 80029b2:	60d3      	str	r3, [r2, #12]
 80029b4:	e05f      	b.n	8002a76 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a8b      	ldr	r2, [pc, #556]	@ (8002be8 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d057      	beq.n	8002a70 <HAL_DMAEx_MultiBufferStart_IT+0x40c>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a89      	ldr	r2, [pc, #548]	@ (8002bec <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d050      	beq.n	8002a6c <HAL_DMAEx_MultiBufferStart_IT+0x408>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a88      	ldr	r2, [pc, #544]	@ (8002bf0 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d049      	beq.n	8002a68 <HAL_DMAEx_MultiBufferStart_IT+0x404>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a86      	ldr	r2, [pc, #536]	@ (8002bf4 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d042      	beq.n	8002a64 <HAL_DMAEx_MultiBufferStart_IT+0x400>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a85      	ldr	r2, [pc, #532]	@ (8002bf8 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d03a      	beq.n	8002a5e <HAL_DMAEx_MultiBufferStart_IT+0x3fa>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a83      	ldr	r2, [pc, #524]	@ (8002bfc <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d032      	beq.n	8002a58 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a82      	ldr	r2, [pc, #520]	@ (8002c00 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d02a      	beq.n	8002a52 <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a80      	ldr	r2, [pc, #512]	@ (8002c04 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d022      	beq.n	8002a4c <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a7f      	ldr	r2, [pc, #508]	@ (8002c08 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d01a      	beq.n	8002a46 <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a7d      	ldr	r2, [pc, #500]	@ (8002c0c <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d012      	beq.n	8002a40 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a7c      	ldr	r2, [pc, #496]	@ (8002c10 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d00a      	beq.n	8002a3a <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a7a      	ldr	r2, [pc, #488]	@ (8002c14 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d102      	bne.n	8002a34 <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 8002a2e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002a32:	e01e      	b.n	8002a72 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002a34:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002a38:	e01b      	b.n	8002a72 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002a3a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002a3e:	e018      	b.n	8002a72 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002a40:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002a44:	e015      	b.n	8002a72 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002a46:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002a4a:	e012      	b.n	8002a72 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002a4c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002a50:	e00f      	b.n	8002a72 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002a52:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002a56:	e00c      	b.n	8002a72 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002a58:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002a5c:	e009      	b.n	8002a72 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002a5e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002a62:	e006      	b.n	8002a72 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002a64:	2320      	movs	r3, #32
 8002a66:	e004      	b.n	8002a72 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002a68:	2320      	movs	r3, #32
 8002a6a:	e002      	b.n	8002a72 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002a6c:	2320      	movs	r3, #32
 8002a6e:	e000      	b.n	8002a72 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002a70:	2320      	movs	r3, #32
 8002a72:	4a5c      	ldr	r2, [pc, #368]	@ (8002be4 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8002a74:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	4b66      	ldr	r3, [pc, #408]	@ (8002c18 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d960      	bls.n	8002b44 <HAL_DMAEx_MultiBufferStart_IT+0x4e0>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a58      	ldr	r2, [pc, #352]	@ (8002be8 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d057      	beq.n	8002b3c <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a56      	ldr	r2, [pc, #344]	@ (8002bec <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d050      	beq.n	8002b38 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a55      	ldr	r2, [pc, #340]	@ (8002bf0 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d049      	beq.n	8002b34 <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a53      	ldr	r2, [pc, #332]	@ (8002bf4 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d042      	beq.n	8002b30 <HAL_DMAEx_MultiBufferStart_IT+0x4cc>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a52      	ldr	r2, [pc, #328]	@ (8002bf8 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d03a      	beq.n	8002b2a <HAL_DMAEx_MultiBufferStart_IT+0x4c6>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a50      	ldr	r2, [pc, #320]	@ (8002bfc <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d032      	beq.n	8002b24 <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a4f      	ldr	r2, [pc, #316]	@ (8002c00 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d02a      	beq.n	8002b1e <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a4d      	ldr	r2, [pc, #308]	@ (8002c04 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d022      	beq.n	8002b18 <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a4c      	ldr	r2, [pc, #304]	@ (8002c08 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d01a      	beq.n	8002b12 <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a4a      	ldr	r2, [pc, #296]	@ (8002c0c <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d012      	beq.n	8002b0c <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a49      	ldr	r2, [pc, #292]	@ (8002c10 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d00a      	beq.n	8002b06 <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a47      	ldr	r2, [pc, #284]	@ (8002c14 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d102      	bne.n	8002b00 <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 8002afa:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002afe:	e01e      	b.n	8002b3e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002b00:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002b04:	e01b      	b.n	8002b3e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002b06:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002b0a:	e018      	b.n	8002b3e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002b0c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002b10:	e015      	b.n	8002b3e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002b12:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002b16:	e012      	b.n	8002b3e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002b18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b1c:	e00f      	b.n	8002b3e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002b1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b22:	e00c      	b.n	8002b3e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002b24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b28:	e009      	b.n	8002b3e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002b2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b2e:	e006      	b.n	8002b3e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002b30:	2310      	movs	r3, #16
 8002b32:	e004      	b.n	8002b3e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002b34:	2310      	movs	r3, #16
 8002b36:	e002      	b.n	8002b3e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002b38:	2310      	movs	r3, #16
 8002b3a:	e000      	b.n	8002b3e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002b3c:	2310      	movs	r3, #16
 8002b3e:	4a37      	ldr	r2, [pc, #220]	@ (8002c1c <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8002b40:	60d3      	str	r3, [r2, #12]
 8002b42:	e14f      	b.n	8002de4 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	461a      	mov	r2, r3
 8002b4a:	4b35      	ldr	r3, [pc, #212]	@ (8002c20 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	f240 8082 	bls.w	8002c56 <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a24      	ldr	r2, [pc, #144]	@ (8002be8 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d078      	beq.n	8002c4e <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a22      	ldr	r2, [pc, #136]	@ (8002bec <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d071      	beq.n	8002c4a <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a21      	ldr	r2, [pc, #132]	@ (8002bf0 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d06a      	beq.n	8002c46 <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a1f      	ldr	r2, [pc, #124]	@ (8002bf4 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d063      	beq.n	8002c42 <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a1e      	ldr	r2, [pc, #120]	@ (8002bf8 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d05b      	beq.n	8002c3c <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a1c      	ldr	r2, [pc, #112]	@ (8002bfc <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d053      	beq.n	8002c36 <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a1b      	ldr	r2, [pc, #108]	@ (8002c00 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d04b      	beq.n	8002c30 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a19      	ldr	r2, [pc, #100]	@ (8002c04 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d043      	beq.n	8002c2a <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a18      	ldr	r2, [pc, #96]	@ (8002c08 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d03b      	beq.n	8002c24 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a16      	ldr	r2, [pc, #88]	@ (8002c0c <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d012      	beq.n	8002bdc <HAL_DMAEx_MultiBufferStart_IT+0x578>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a15      	ldr	r2, [pc, #84]	@ (8002c10 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d00a      	beq.n	8002bd6 <HAL_DMAEx_MultiBufferStart_IT+0x572>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a13      	ldr	r2, [pc, #76]	@ (8002c14 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d102      	bne.n	8002bd0 <HAL_DMAEx_MultiBufferStart_IT+0x56c>
 8002bca:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002bce:	e03f      	b.n	8002c50 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002bd0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002bd4:	e03c      	b.n	8002c50 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002bd6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002bda:	e039      	b.n	8002c50 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002bdc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002be0:	e036      	b.n	8002c50 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002be2:	bf00      	nop
 8002be4:	40026000 	.word	0x40026000
 8002be8:	40026010 	.word	0x40026010
 8002bec:	40026410 	.word	0x40026410
 8002bf0:	40026070 	.word	0x40026070
 8002bf4:	40026470 	.word	0x40026470
 8002bf8:	40026028 	.word	0x40026028
 8002bfc:	40026428 	.word	0x40026428
 8002c00:	40026088 	.word	0x40026088
 8002c04:	40026488 	.word	0x40026488
 8002c08:	40026040 	.word	0x40026040
 8002c0c:	40026440 	.word	0x40026440
 8002c10:	400260a0 	.word	0x400260a0
 8002c14:	400264a0 	.word	0x400264a0
 8002c18:	40026458 	.word	0x40026458
 8002c1c:	40026400 	.word	0x40026400
 8002c20:	400260b8 	.word	0x400260b8
 8002c24:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002c28:	e012      	b.n	8002c50 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002c2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c2e:	e00f      	b.n	8002c50 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002c30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c34:	e00c      	b.n	8002c50 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002c36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c3a:	e009      	b.n	8002c50 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002c3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c40:	e006      	b.n	8002c50 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002c42:	2310      	movs	r3, #16
 8002c44:	e004      	b.n	8002c50 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002c46:	2310      	movs	r3, #16
 8002c48:	e002      	b.n	8002c50 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002c4a:	2310      	movs	r3, #16
 8002c4c:	e000      	b.n	8002c50 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002c4e:	2310      	movs	r3, #16
 8002c50:	4a8c      	ldr	r2, [pc, #560]	@ (8002e84 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 8002c52:	6093      	str	r3, [r2, #8]
 8002c54:	e0c6      	b.n	8002de4 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	4b8a      	ldr	r3, [pc, #552]	@ (8002e88 <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d960      	bls.n	8002d24 <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a89      	ldr	r2, [pc, #548]	@ (8002e8c <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d057      	beq.n	8002d1c <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a87      	ldr	r2, [pc, #540]	@ (8002e90 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d050      	beq.n	8002d18 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a86      	ldr	r2, [pc, #536]	@ (8002e94 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d049      	beq.n	8002d14 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a84      	ldr	r2, [pc, #528]	@ (8002e98 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d042      	beq.n	8002d10 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a83      	ldr	r2, [pc, #524]	@ (8002e9c <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d03a      	beq.n	8002d0a <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a81      	ldr	r2, [pc, #516]	@ (8002ea0 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d032      	beq.n	8002d04 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a80      	ldr	r2, [pc, #512]	@ (8002ea4 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d02a      	beq.n	8002cfe <HAL_DMAEx_MultiBufferStart_IT+0x69a>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a7e      	ldr	r2, [pc, #504]	@ (8002ea8 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d022      	beq.n	8002cf8 <HAL_DMAEx_MultiBufferStart_IT+0x694>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a7d      	ldr	r2, [pc, #500]	@ (8002eac <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d01a      	beq.n	8002cf2 <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a7b      	ldr	r2, [pc, #492]	@ (8002eb0 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d012      	beq.n	8002cec <HAL_DMAEx_MultiBufferStart_IT+0x688>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a7a      	ldr	r2, [pc, #488]	@ (8002eb4 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d00a      	beq.n	8002ce6 <HAL_DMAEx_MultiBufferStart_IT+0x682>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a78      	ldr	r2, [pc, #480]	@ (8002eb8 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d102      	bne.n	8002ce0 <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 8002cda:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002cde:	e01e      	b.n	8002d1e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002ce0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002ce4:	e01b      	b.n	8002d1e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002ce6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002cea:	e018      	b.n	8002d1e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002cec:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002cf0:	e015      	b.n	8002d1e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002cf2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002cf6:	e012      	b.n	8002d1e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002cf8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002cfc:	e00f      	b.n	8002d1e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002cfe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d02:	e00c      	b.n	8002d1e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002d04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d08:	e009      	b.n	8002d1e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002d0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d0e:	e006      	b.n	8002d1e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002d10:	2310      	movs	r3, #16
 8002d12:	e004      	b.n	8002d1e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002d14:	2310      	movs	r3, #16
 8002d16:	e002      	b.n	8002d1e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002d18:	2310      	movs	r3, #16
 8002d1a:	e000      	b.n	8002d1e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002d1c:	2310      	movs	r3, #16
 8002d1e:	4a67      	ldr	r2, [pc, #412]	@ (8002ebc <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8002d20:	60d3      	str	r3, [r2, #12]
 8002d22:	e05f      	b.n	8002de4 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a58      	ldr	r2, [pc, #352]	@ (8002e8c <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d057      	beq.n	8002dde <HAL_DMAEx_MultiBufferStart_IT+0x77a>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a57      	ldr	r2, [pc, #348]	@ (8002e90 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d050      	beq.n	8002dda <HAL_DMAEx_MultiBufferStart_IT+0x776>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a55      	ldr	r2, [pc, #340]	@ (8002e94 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d049      	beq.n	8002dd6 <HAL_DMAEx_MultiBufferStart_IT+0x772>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a54      	ldr	r2, [pc, #336]	@ (8002e98 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d042      	beq.n	8002dd2 <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a52      	ldr	r2, [pc, #328]	@ (8002e9c <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d03a      	beq.n	8002dcc <HAL_DMAEx_MultiBufferStart_IT+0x768>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a51      	ldr	r2, [pc, #324]	@ (8002ea0 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d032      	beq.n	8002dc6 <HAL_DMAEx_MultiBufferStart_IT+0x762>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a4f      	ldr	r2, [pc, #316]	@ (8002ea4 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d02a      	beq.n	8002dc0 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a4e      	ldr	r2, [pc, #312]	@ (8002ea8 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d022      	beq.n	8002dba <HAL_DMAEx_MultiBufferStart_IT+0x756>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a4c      	ldr	r2, [pc, #304]	@ (8002eac <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d01a      	beq.n	8002db4 <HAL_DMAEx_MultiBufferStart_IT+0x750>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a4b      	ldr	r2, [pc, #300]	@ (8002eb0 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d012      	beq.n	8002dae <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a49      	ldr	r2, [pc, #292]	@ (8002eb4 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d00a      	beq.n	8002da8 <HAL_DMAEx_MultiBufferStart_IT+0x744>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a48      	ldr	r2, [pc, #288]	@ (8002eb8 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d102      	bne.n	8002da2 <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 8002d9c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002da0:	e01e      	b.n	8002de0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002da2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002da6:	e01b      	b.n	8002de0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002da8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002dac:	e018      	b.n	8002de0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002dae:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002db2:	e015      	b.n	8002de0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002db4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002db8:	e012      	b.n	8002de0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002dba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002dbe:	e00f      	b.n	8002de0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002dc0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002dc4:	e00c      	b.n	8002de0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002dc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002dca:	e009      	b.n	8002de0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002dcc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002dd0:	e006      	b.n	8002de0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002dd2:	2310      	movs	r3, #16
 8002dd4:	e004      	b.n	8002de0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002dd6:	2310      	movs	r3, #16
 8002dd8:	e002      	b.n	8002de0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002dda:	2310      	movs	r3, #16
 8002ddc:	e000      	b.n	8002de0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002dde:	2310      	movs	r3, #16
 8002de0:	4a36      	ldr	r2, [pc, #216]	@ (8002ebc <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8002de2:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	461a      	mov	r2, r3
 8002dea:	4b35      	ldr	r3, [pc, #212]	@ (8002ec0 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8002dec:	429a      	cmp	r2, r3
 8002dee:	f240 8082 	bls.w	8002ef6 <HAL_DMAEx_MultiBufferStart_IT+0x892>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a25      	ldr	r2, [pc, #148]	@ (8002e8c <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d078      	beq.n	8002eee <HAL_DMAEx_MultiBufferStart_IT+0x88a>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a23      	ldr	r2, [pc, #140]	@ (8002e90 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d071      	beq.n	8002eea <HAL_DMAEx_MultiBufferStart_IT+0x886>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a22      	ldr	r2, [pc, #136]	@ (8002e94 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d06a      	beq.n	8002ee6 <HAL_DMAEx_MultiBufferStart_IT+0x882>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a20      	ldr	r2, [pc, #128]	@ (8002e98 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d063      	beq.n	8002ee2 <HAL_DMAEx_MultiBufferStart_IT+0x87e>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a1f      	ldr	r2, [pc, #124]	@ (8002e9c <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d05b      	beq.n	8002edc <HAL_DMAEx_MultiBufferStart_IT+0x878>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a1d      	ldr	r2, [pc, #116]	@ (8002ea0 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d053      	beq.n	8002ed6 <HAL_DMAEx_MultiBufferStart_IT+0x872>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a1c      	ldr	r2, [pc, #112]	@ (8002ea4 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d04b      	beq.n	8002ed0 <HAL_DMAEx_MultiBufferStart_IT+0x86c>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a1a      	ldr	r2, [pc, #104]	@ (8002ea8 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d043      	beq.n	8002eca <HAL_DMAEx_MultiBufferStart_IT+0x866>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a19      	ldr	r2, [pc, #100]	@ (8002eac <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d03b      	beq.n	8002ec4 <HAL_DMAEx_MultiBufferStart_IT+0x860>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a17      	ldr	r2, [pc, #92]	@ (8002eb0 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d012      	beq.n	8002e7c <HAL_DMAEx_MultiBufferStart_IT+0x818>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a16      	ldr	r2, [pc, #88]	@ (8002eb4 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d00a      	beq.n	8002e76 <HAL_DMAEx_MultiBufferStart_IT+0x812>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a14      	ldr	r2, [pc, #80]	@ (8002eb8 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d102      	bne.n	8002e70 <HAL_DMAEx_MultiBufferStart_IT+0x80c>
 8002e6a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002e6e:	e03f      	b.n	8002ef0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002e70:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e74:	e03c      	b.n	8002ef0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002e76:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002e7a:	e039      	b.n	8002ef0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002e7c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002e80:	e036      	b.n	8002ef0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002e82:	bf00      	nop
 8002e84:	40026400 	.word	0x40026400
 8002e88:	40026058 	.word	0x40026058
 8002e8c:	40026010 	.word	0x40026010
 8002e90:	40026410 	.word	0x40026410
 8002e94:	40026070 	.word	0x40026070
 8002e98:	40026470 	.word	0x40026470
 8002e9c:	40026028 	.word	0x40026028
 8002ea0:	40026428 	.word	0x40026428
 8002ea4:	40026088 	.word	0x40026088
 8002ea8:	40026488 	.word	0x40026488
 8002eac:	40026040 	.word	0x40026040
 8002eb0:	40026440 	.word	0x40026440
 8002eb4:	400260a0 	.word	0x400260a0
 8002eb8:	400264a0 	.word	0x400264a0
 8002ebc:	40026000 	.word	0x40026000
 8002ec0:	40026458 	.word	0x40026458
 8002ec4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002ec8:	e012      	b.n	8002ef0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002eca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ece:	e00f      	b.n	8002ef0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002ed0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ed4:	e00c      	b.n	8002ef0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002ed6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002eda:	e009      	b.n	8002ef0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002edc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ee0:	e006      	b.n	8002ef0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002ee2:	2308      	movs	r3, #8
 8002ee4:	e004      	b.n	8002ef0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002ee6:	2308      	movs	r3, #8
 8002ee8:	e002      	b.n	8002ef0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002eea:	2308      	movs	r3, #8
 8002eec:	e000      	b.n	8002ef0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002eee:	2308      	movs	r3, #8
 8002ef0:	4a8c      	ldr	r2, [pc, #560]	@ (8003124 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8002ef2:	60d3      	str	r3, [r2, #12]
 8002ef4:	e14e      	b.n	8003194 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	461a      	mov	r2, r3
 8002efc:	4b8a      	ldr	r3, [pc, #552]	@ (8003128 <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d960      	bls.n	8002fc4 <HAL_DMAEx_MultiBufferStart_IT+0x960>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a89      	ldr	r2, [pc, #548]	@ (800312c <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d057      	beq.n	8002fbc <HAL_DMAEx_MultiBufferStart_IT+0x958>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a87      	ldr	r2, [pc, #540]	@ (8003130 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d050      	beq.n	8002fb8 <HAL_DMAEx_MultiBufferStart_IT+0x954>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a86      	ldr	r2, [pc, #536]	@ (8003134 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d049      	beq.n	8002fb4 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a84      	ldr	r2, [pc, #528]	@ (8003138 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d042      	beq.n	8002fb0 <HAL_DMAEx_MultiBufferStart_IT+0x94c>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a83      	ldr	r2, [pc, #524]	@ (800313c <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d03a      	beq.n	8002faa <HAL_DMAEx_MultiBufferStart_IT+0x946>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a81      	ldr	r2, [pc, #516]	@ (8003140 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d032      	beq.n	8002fa4 <HAL_DMAEx_MultiBufferStart_IT+0x940>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a80      	ldr	r2, [pc, #512]	@ (8003144 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d02a      	beq.n	8002f9e <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a7e      	ldr	r2, [pc, #504]	@ (8003148 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d022      	beq.n	8002f98 <HAL_DMAEx_MultiBufferStart_IT+0x934>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a7d      	ldr	r2, [pc, #500]	@ (800314c <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d01a      	beq.n	8002f92 <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a7b      	ldr	r2, [pc, #492]	@ (8003150 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d012      	beq.n	8002f8c <HAL_DMAEx_MultiBufferStart_IT+0x928>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a7a      	ldr	r2, [pc, #488]	@ (8003154 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d00a      	beq.n	8002f86 <HAL_DMAEx_MultiBufferStart_IT+0x922>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a78      	ldr	r2, [pc, #480]	@ (8003158 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d102      	bne.n	8002f80 <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 8002f7a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002f7e:	e01e      	b.n	8002fbe <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002f80:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f84:	e01b      	b.n	8002fbe <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002f86:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002f8a:	e018      	b.n	8002fbe <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002f8c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002f90:	e015      	b.n	8002fbe <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002f92:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002f96:	e012      	b.n	8002fbe <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002f98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f9c:	e00f      	b.n	8002fbe <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002f9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002fa2:	e00c      	b.n	8002fbe <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002fa4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002fa8:	e009      	b.n	8002fbe <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002faa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002fae:	e006      	b.n	8002fbe <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002fb0:	2308      	movs	r3, #8
 8002fb2:	e004      	b.n	8002fbe <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002fb4:	2308      	movs	r3, #8
 8002fb6:	e002      	b.n	8002fbe <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002fb8:	2308      	movs	r3, #8
 8002fba:	e000      	b.n	8002fbe <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002fbc:	2308      	movs	r3, #8
 8002fbe:	4a59      	ldr	r2, [pc, #356]	@ (8003124 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8002fc0:	6093      	str	r3, [r2, #8]
 8002fc2:	e0e7      	b.n	8003194 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	461a      	mov	r2, r3
 8002fca:	4b64      	ldr	r3, [pc, #400]	@ (800315c <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d960      	bls.n	8003092 <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a55      	ldr	r2, [pc, #340]	@ (800312c <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d057      	beq.n	800308a <HAL_DMAEx_MultiBufferStart_IT+0xa26>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a54      	ldr	r2, [pc, #336]	@ (8003130 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d050      	beq.n	8003086 <HAL_DMAEx_MultiBufferStart_IT+0xa22>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a52      	ldr	r2, [pc, #328]	@ (8003134 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d049      	beq.n	8003082 <HAL_DMAEx_MultiBufferStart_IT+0xa1e>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a51      	ldr	r2, [pc, #324]	@ (8003138 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d042      	beq.n	800307e <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a4f      	ldr	r2, [pc, #316]	@ (800313c <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d03a      	beq.n	8003078 <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a4e      	ldr	r2, [pc, #312]	@ (8003140 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d032      	beq.n	8003072 <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a4c      	ldr	r2, [pc, #304]	@ (8003144 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d02a      	beq.n	800306c <HAL_DMAEx_MultiBufferStart_IT+0xa08>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a4b      	ldr	r2, [pc, #300]	@ (8003148 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d022      	beq.n	8003066 <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a49      	ldr	r2, [pc, #292]	@ (800314c <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d01a      	beq.n	8003060 <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a48      	ldr	r2, [pc, #288]	@ (8003150 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d012      	beq.n	800305a <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a46      	ldr	r2, [pc, #280]	@ (8003154 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d00a      	beq.n	8003054 <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a45      	ldr	r2, [pc, #276]	@ (8003158 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d102      	bne.n	800304e <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 8003048:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800304c:	e01e      	b.n	800308c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800304e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003052:	e01b      	b.n	800308c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003054:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003058:	e018      	b.n	800308c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800305a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800305e:	e015      	b.n	800308c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003060:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003064:	e012      	b.n	800308c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003066:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800306a:	e00f      	b.n	800308c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800306c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003070:	e00c      	b.n	800308c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003072:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003076:	e009      	b.n	800308c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003078:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800307c:	e006      	b.n	800308c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800307e:	2308      	movs	r3, #8
 8003080:	e004      	b.n	800308c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003082:	2308      	movs	r3, #8
 8003084:	e002      	b.n	800308c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003086:	2308      	movs	r3, #8
 8003088:	e000      	b.n	800308c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800308a:	2308      	movs	r3, #8
 800308c:	4a34      	ldr	r2, [pc, #208]	@ (8003160 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 800308e:	60d3      	str	r3, [r2, #12]
 8003090:	e080      	b.n	8003194 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a25      	ldr	r2, [pc, #148]	@ (800312c <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d078      	beq.n	800318e <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a23      	ldr	r2, [pc, #140]	@ (8003130 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d071      	beq.n	800318a <HAL_DMAEx_MultiBufferStart_IT+0xb26>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a22      	ldr	r2, [pc, #136]	@ (8003134 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d06a      	beq.n	8003186 <HAL_DMAEx_MultiBufferStart_IT+0xb22>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a20      	ldr	r2, [pc, #128]	@ (8003138 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d063      	beq.n	8003182 <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a1f      	ldr	r2, [pc, #124]	@ (800313c <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d05b      	beq.n	800317c <HAL_DMAEx_MultiBufferStart_IT+0xb18>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a1d      	ldr	r2, [pc, #116]	@ (8003140 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d053      	beq.n	8003176 <HAL_DMAEx_MultiBufferStart_IT+0xb12>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a1c      	ldr	r2, [pc, #112]	@ (8003144 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d04b      	beq.n	8003170 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a1a      	ldr	r2, [pc, #104]	@ (8003148 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d043      	beq.n	800316a <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a19      	ldr	r2, [pc, #100]	@ (800314c <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d03b      	beq.n	8003164 <HAL_DMAEx_MultiBufferStart_IT+0xb00>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a17      	ldr	r2, [pc, #92]	@ (8003150 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d012      	beq.n	800311c <HAL_DMAEx_MultiBufferStart_IT+0xab8>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a16      	ldr	r2, [pc, #88]	@ (8003154 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d00a      	beq.n	8003116 <HAL_DMAEx_MultiBufferStart_IT+0xab2>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a14      	ldr	r2, [pc, #80]	@ (8003158 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d102      	bne.n	8003110 <HAL_DMAEx_MultiBufferStart_IT+0xaac>
 800310a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800310e:	e03f      	b.n	8003190 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003110:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003114:	e03c      	b.n	8003190 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003116:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800311a:	e039      	b.n	8003190 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800311c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003120:	e036      	b.n	8003190 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003122:	bf00      	nop
 8003124:	40026400 	.word	0x40026400
 8003128:	400260b8 	.word	0x400260b8
 800312c:	40026010 	.word	0x40026010
 8003130:	40026410 	.word	0x40026410
 8003134:	40026070 	.word	0x40026070
 8003138:	40026470 	.word	0x40026470
 800313c:	40026028 	.word	0x40026028
 8003140:	40026428 	.word	0x40026428
 8003144:	40026088 	.word	0x40026088
 8003148:	40026488 	.word	0x40026488
 800314c:	40026040 	.word	0x40026040
 8003150:	40026440 	.word	0x40026440
 8003154:	400260a0 	.word	0x400260a0
 8003158:	400264a0 	.word	0x400264a0
 800315c:	40026058 	.word	0x40026058
 8003160:	40026000 	.word	0x40026000
 8003164:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003168:	e012      	b.n	8003190 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800316a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800316e:	e00f      	b.n	8003190 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003170:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003174:	e00c      	b.n	8003190 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003176:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800317a:	e009      	b.n	8003190 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800317c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003180:	e006      	b.n	8003190 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003182:	2308      	movs	r3, #8
 8003184:	e004      	b.n	8003190 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003186:	2308      	movs	r3, #8
 8003188:	e002      	b.n	8003190 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800318a:	2308      	movs	r3, #8
 800318c:	e000      	b.n	8003190 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800318e:	2308      	movs	r3, #8
 8003190:	4a8a      	ldr	r2, [pc, #552]	@ (80033bc <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 8003192:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	461a      	mov	r2, r3
 800319a:	4b89      	ldr	r3, [pc, #548]	@ (80033c0 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 800319c:	429a      	cmp	r2, r3
 800319e:	d960      	bls.n	8003262 <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a87      	ldr	r2, [pc, #540]	@ (80033c4 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d057      	beq.n	800325a <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a86      	ldr	r2, [pc, #536]	@ (80033c8 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d050      	beq.n	8003256 <HAL_DMAEx_MultiBufferStart_IT+0xbf2>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a84      	ldr	r2, [pc, #528]	@ (80033cc <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d049      	beq.n	8003252 <HAL_DMAEx_MultiBufferStart_IT+0xbee>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a83      	ldr	r2, [pc, #524]	@ (80033d0 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d042      	beq.n	800324e <HAL_DMAEx_MultiBufferStart_IT+0xbea>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a81      	ldr	r2, [pc, #516]	@ (80033d4 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d03a      	beq.n	8003248 <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a80      	ldr	r2, [pc, #512]	@ (80033d8 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d032      	beq.n	8003242 <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a7e      	ldr	r2, [pc, #504]	@ (80033dc <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d02a      	beq.n	800323c <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a7d      	ldr	r2, [pc, #500]	@ (80033e0 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d022      	beq.n	8003236 <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a7b      	ldr	r2, [pc, #492]	@ (80033e4 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d01a      	beq.n	8003230 <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a7a      	ldr	r2, [pc, #488]	@ (80033e8 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d012      	beq.n	800322a <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a78      	ldr	r2, [pc, #480]	@ (80033ec <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d00a      	beq.n	8003224 <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a77      	ldr	r2, [pc, #476]	@ (80033f0 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d102      	bne.n	800321e <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 8003218:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800321c:	e01e      	b.n	800325c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800321e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003222:	e01b      	b.n	800325c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003224:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003228:	e018      	b.n	800325c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800322a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800322e:	e015      	b.n	800325c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003230:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003234:	e012      	b.n	800325c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003236:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800323a:	e00f      	b.n	800325c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800323c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003240:	e00c      	b.n	800325c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003242:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003246:	e009      	b.n	800325c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003248:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800324c:	e006      	b.n	800325c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800324e:	2304      	movs	r3, #4
 8003250:	e004      	b.n	800325c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003252:	2304      	movs	r3, #4
 8003254:	e002      	b.n	800325c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003256:	2304      	movs	r3, #4
 8003258:	e000      	b.n	800325c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800325a:	2304      	movs	r3, #4
 800325c:	4a65      	ldr	r2, [pc, #404]	@ (80033f4 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 800325e:	60d3      	str	r3, [r2, #12]
 8003260:	e150      	b.n	8003504 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	461a      	mov	r2, r3
 8003268:	4b63      	ldr	r3, [pc, #396]	@ (80033f8 <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 800326a:	429a      	cmp	r2, r3
 800326c:	d960      	bls.n	8003330 <HAL_DMAEx_MultiBufferStart_IT+0xccc>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a54      	ldr	r2, [pc, #336]	@ (80033c4 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d057      	beq.n	8003328 <HAL_DMAEx_MultiBufferStart_IT+0xcc4>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a52      	ldr	r2, [pc, #328]	@ (80033c8 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d050      	beq.n	8003324 <HAL_DMAEx_MultiBufferStart_IT+0xcc0>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a51      	ldr	r2, [pc, #324]	@ (80033cc <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d049      	beq.n	8003320 <HAL_DMAEx_MultiBufferStart_IT+0xcbc>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a4f      	ldr	r2, [pc, #316]	@ (80033d0 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d042      	beq.n	800331c <HAL_DMAEx_MultiBufferStart_IT+0xcb8>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a4e      	ldr	r2, [pc, #312]	@ (80033d4 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d03a      	beq.n	8003316 <HAL_DMAEx_MultiBufferStart_IT+0xcb2>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a4c      	ldr	r2, [pc, #304]	@ (80033d8 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d032      	beq.n	8003310 <HAL_DMAEx_MultiBufferStart_IT+0xcac>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a4b      	ldr	r2, [pc, #300]	@ (80033dc <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d02a      	beq.n	800330a <HAL_DMAEx_MultiBufferStart_IT+0xca6>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a49      	ldr	r2, [pc, #292]	@ (80033e0 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d022      	beq.n	8003304 <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a48      	ldr	r2, [pc, #288]	@ (80033e4 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d01a      	beq.n	80032fe <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a46      	ldr	r2, [pc, #280]	@ (80033e8 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d012      	beq.n	80032f8 <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a45      	ldr	r2, [pc, #276]	@ (80033ec <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d00a      	beq.n	80032f2 <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a43      	ldr	r2, [pc, #268]	@ (80033f0 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d102      	bne.n	80032ec <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 80032e6:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80032ea:	e01e      	b.n	800332a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80032ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80032f0:	e01b      	b.n	800332a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80032f2:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80032f6:	e018      	b.n	800332a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80032f8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80032fc:	e015      	b.n	800332a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80032fe:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003302:	e012      	b.n	800332a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003304:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003308:	e00f      	b.n	800332a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800330a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800330e:	e00c      	b.n	800332a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003310:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003314:	e009      	b.n	800332a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003316:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800331a:	e006      	b.n	800332a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800331c:	2304      	movs	r3, #4
 800331e:	e004      	b.n	800332a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003320:	2304      	movs	r3, #4
 8003322:	e002      	b.n	800332a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003324:	2304      	movs	r3, #4
 8003326:	e000      	b.n	800332a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003328:	2304      	movs	r3, #4
 800332a:	4a32      	ldr	r2, [pc, #200]	@ (80033f4 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 800332c:	6093      	str	r3, [r2, #8]
 800332e:	e0e9      	b.n	8003504 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	461a      	mov	r2, r3
 8003336:	4b31      	ldr	r3, [pc, #196]	@ (80033fc <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8003338:	429a      	cmp	r2, r3
 800333a:	f240 8083 	bls.w	8003444 <HAL_DMAEx_MultiBufferStart_IT+0xde0>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a20      	ldr	r2, [pc, #128]	@ (80033c4 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d079      	beq.n	800343c <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a1e      	ldr	r2, [pc, #120]	@ (80033c8 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d072      	beq.n	8003438 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a1d      	ldr	r2, [pc, #116]	@ (80033cc <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d06b      	beq.n	8003434 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a1b      	ldr	r2, [pc, #108]	@ (80033d0 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d064      	beq.n	8003430 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a1a      	ldr	r2, [pc, #104]	@ (80033d4 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d05c      	beq.n	800342a <HAL_DMAEx_MultiBufferStart_IT+0xdc6>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a18      	ldr	r2, [pc, #96]	@ (80033d8 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d054      	beq.n	8003424 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a17      	ldr	r2, [pc, #92]	@ (80033dc <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d04c      	beq.n	800341e <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a15      	ldr	r2, [pc, #84]	@ (80033e0 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d044      	beq.n	8003418 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a14      	ldr	r2, [pc, #80]	@ (80033e4 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d03c      	beq.n	8003412 <HAL_DMAEx_MultiBufferStart_IT+0xdae>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a12      	ldr	r2, [pc, #72]	@ (80033e8 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d034      	beq.n	800340c <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a11      	ldr	r2, [pc, #68]	@ (80033ec <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d02c      	beq.n	8003406 <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a0f      	ldr	r2, [pc, #60]	@ (80033f0 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d124      	bne.n	8003400 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 80033b6:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80033ba:	e040      	b.n	800343e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80033bc:	40026000 	.word	0x40026000
 80033c0:	40026458 	.word	0x40026458
 80033c4:	40026010 	.word	0x40026010
 80033c8:	40026410 	.word	0x40026410
 80033cc:	40026070 	.word	0x40026070
 80033d0:	40026470 	.word	0x40026470
 80033d4:	40026028 	.word	0x40026028
 80033d8:	40026428 	.word	0x40026428
 80033dc:	40026088 	.word	0x40026088
 80033e0:	40026488 	.word	0x40026488
 80033e4:	40026040 	.word	0x40026040
 80033e8:	40026440 	.word	0x40026440
 80033ec:	400260a0 	.word	0x400260a0
 80033f0:	400264a0 	.word	0x400264a0
 80033f4:	40026400 	.word	0x40026400
 80033f8:	400260b8 	.word	0x400260b8
 80033fc:	40026058 	.word	0x40026058
 8003400:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003404:	e01b      	b.n	800343e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003406:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800340a:	e018      	b.n	800343e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800340c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003410:	e015      	b.n	800343e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003412:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003416:	e012      	b.n	800343e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003418:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800341c:	e00f      	b.n	800343e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800341e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003422:	e00c      	b.n	800343e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003424:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003428:	e009      	b.n	800343e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800342a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800342e:	e006      	b.n	800343e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003430:	2304      	movs	r3, #4
 8003432:	e004      	b.n	800343e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003434:	2304      	movs	r3, #4
 8003436:	e002      	b.n	800343e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003438:	2304      	movs	r3, #4
 800343a:	e000      	b.n	800343e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800343c:	2304      	movs	r3, #4
 800343e:	4a8b      	ldr	r2, [pc, #556]	@ (800366c <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8003440:	60d3      	str	r3, [r2, #12]
 8003442:	e05f      	b.n	8003504 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a89      	ldr	r2, [pc, #548]	@ (8003670 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d057      	beq.n	80034fe <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a88      	ldr	r2, [pc, #544]	@ (8003674 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d050      	beq.n	80034fa <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a86      	ldr	r2, [pc, #536]	@ (8003678 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d049      	beq.n	80034f6 <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a85      	ldr	r2, [pc, #532]	@ (800367c <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d042      	beq.n	80034f2 <HAL_DMAEx_MultiBufferStart_IT+0xe8e>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a83      	ldr	r2, [pc, #524]	@ (8003680 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d03a      	beq.n	80034ec <HAL_DMAEx_MultiBufferStart_IT+0xe88>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a82      	ldr	r2, [pc, #520]	@ (8003684 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d032      	beq.n	80034e6 <HAL_DMAEx_MultiBufferStart_IT+0xe82>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a80      	ldr	r2, [pc, #512]	@ (8003688 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d02a      	beq.n	80034e0 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a7f      	ldr	r2, [pc, #508]	@ (800368c <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d022      	beq.n	80034da <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a7d      	ldr	r2, [pc, #500]	@ (8003690 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d01a      	beq.n	80034d4 <HAL_DMAEx_MultiBufferStart_IT+0xe70>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a7c      	ldr	r2, [pc, #496]	@ (8003694 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d012      	beq.n	80034ce <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a7a      	ldr	r2, [pc, #488]	@ (8003698 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d00a      	beq.n	80034c8 <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a79      	ldr	r2, [pc, #484]	@ (800369c <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d102      	bne.n	80034c2 <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 80034bc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80034c0:	e01e      	b.n	8003500 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80034c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80034c6:	e01b      	b.n	8003500 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80034c8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80034cc:	e018      	b.n	8003500 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80034ce:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80034d2:	e015      	b.n	8003500 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80034d4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80034d8:	e012      	b.n	8003500 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80034da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80034de:	e00f      	b.n	8003500 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80034e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80034e4:	e00c      	b.n	8003500 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80034e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80034ea:	e009      	b.n	8003500 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80034ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80034f0:	e006      	b.n	8003500 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80034f2:	2304      	movs	r3, #4
 80034f4:	e004      	b.n	8003500 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80034f6:	2304      	movs	r3, #4
 80034f8:	e002      	b.n	8003500 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80034fa:	2304      	movs	r3, #4
 80034fc:	e000      	b.n	8003500 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80034fe:	2304      	movs	r3, #4
 8003500:	4a5a      	ldr	r2, [pc, #360]	@ (800366c <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8003502:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	461a      	mov	r2, r3
 800350a:	4b65      	ldr	r3, [pc, #404]	@ (80036a0 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 800350c:	429a      	cmp	r2, r3
 800350e:	d95c      	bls.n	80035ca <HAL_DMAEx_MultiBufferStart_IT+0xf66>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a56      	ldr	r2, [pc, #344]	@ (8003670 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d053      	beq.n	80035c2 <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a55      	ldr	r2, [pc, #340]	@ (8003674 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d04c      	beq.n	80035be <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a53      	ldr	r2, [pc, #332]	@ (8003678 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d045      	beq.n	80035ba <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a52      	ldr	r2, [pc, #328]	@ (800367c <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d03e      	beq.n	80035b6 <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a50      	ldr	r2, [pc, #320]	@ (8003680 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d037      	beq.n	80035b2 <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a4f      	ldr	r2, [pc, #316]	@ (8003684 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d030      	beq.n	80035ae <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a4d      	ldr	r2, [pc, #308]	@ (8003688 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d029      	beq.n	80035aa <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a4c      	ldr	r2, [pc, #304]	@ (800368c <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d022      	beq.n	80035a6 <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a4a      	ldr	r2, [pc, #296]	@ (8003690 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d01a      	beq.n	80035a0 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a49      	ldr	r2, [pc, #292]	@ (8003694 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d012      	beq.n	800359a <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a47      	ldr	r2, [pc, #284]	@ (8003698 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d00a      	beq.n	8003594 <HAL_DMAEx_MultiBufferStart_IT+0xf30>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a46      	ldr	r2, [pc, #280]	@ (800369c <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d102      	bne.n	800358e <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 8003588:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800358c:	e01a      	b.n	80035c4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800358e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003592:	e017      	b.n	80035c4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003594:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003598:	e014      	b.n	80035c4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800359a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800359e:	e011      	b.n	80035c4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80035a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80035a4:	e00e      	b.n	80035c4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80035a6:	2340      	movs	r3, #64	@ 0x40
 80035a8:	e00c      	b.n	80035c4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80035aa:	2340      	movs	r3, #64	@ 0x40
 80035ac:	e00a      	b.n	80035c4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80035ae:	2340      	movs	r3, #64	@ 0x40
 80035b0:	e008      	b.n	80035c4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80035b2:	2340      	movs	r3, #64	@ 0x40
 80035b4:	e006      	b.n	80035c4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80035b6:	2301      	movs	r3, #1
 80035b8:	e004      	b.n	80035c4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80035ba:	2301      	movs	r3, #1
 80035bc:	e002      	b.n	80035c4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80035be:	2301      	movs	r3, #1
 80035c0:	e000      	b.n	80035c4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80035c2:	2301      	movs	r3, #1
 80035c4:	4a37      	ldr	r2, [pc, #220]	@ (80036a4 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 80035c6:	60d3      	str	r3, [r2, #12]
 80035c8:	e141      	b.n	800384e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	461a      	mov	r2, r3
 80035d0:	4b35      	ldr	r3, [pc, #212]	@ (80036a8 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d97c      	bls.n	80036d0 <HAL_DMAEx_MultiBufferStart_IT+0x106c>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a25      	ldr	r2, [pc, #148]	@ (8003670 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d073      	beq.n	80036c8 <HAL_DMAEx_MultiBufferStart_IT+0x1064>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a23      	ldr	r2, [pc, #140]	@ (8003674 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d06c      	beq.n	80036c4 <HAL_DMAEx_MultiBufferStart_IT+0x1060>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a22      	ldr	r2, [pc, #136]	@ (8003678 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d065      	beq.n	80036c0 <HAL_DMAEx_MultiBufferStart_IT+0x105c>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a20      	ldr	r2, [pc, #128]	@ (800367c <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d05e      	beq.n	80036bc <HAL_DMAEx_MultiBufferStart_IT+0x1058>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a1f      	ldr	r2, [pc, #124]	@ (8003680 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d057      	beq.n	80036b8 <HAL_DMAEx_MultiBufferStart_IT+0x1054>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a1d      	ldr	r2, [pc, #116]	@ (8003684 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d050      	beq.n	80036b4 <HAL_DMAEx_MultiBufferStart_IT+0x1050>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a1c      	ldr	r2, [pc, #112]	@ (8003688 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d049      	beq.n	80036b0 <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a1a      	ldr	r2, [pc, #104]	@ (800368c <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d042      	beq.n	80036ac <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a19      	ldr	r2, [pc, #100]	@ (8003690 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d01a      	beq.n	8003666 <HAL_DMAEx_MultiBufferStart_IT+0x1002>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a17      	ldr	r2, [pc, #92]	@ (8003694 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d012      	beq.n	8003660 <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a16      	ldr	r2, [pc, #88]	@ (8003698 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d00a      	beq.n	800365a <HAL_DMAEx_MultiBufferStart_IT+0xff6>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a14      	ldr	r2, [pc, #80]	@ (800369c <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d102      	bne.n	8003654 <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 800364e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003652:	e03a      	b.n	80036ca <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003654:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003658:	e037      	b.n	80036ca <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800365a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800365e:	e034      	b.n	80036ca <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003660:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003664:	e031      	b.n	80036ca <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003666:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800366a:	e02e      	b.n	80036ca <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800366c:	40026000 	.word	0x40026000
 8003670:	40026010 	.word	0x40026010
 8003674:	40026410 	.word	0x40026410
 8003678:	40026070 	.word	0x40026070
 800367c:	40026470 	.word	0x40026470
 8003680:	40026028 	.word	0x40026028
 8003684:	40026428 	.word	0x40026428
 8003688:	40026088 	.word	0x40026088
 800368c:	40026488 	.word	0x40026488
 8003690:	40026040 	.word	0x40026040
 8003694:	40026440 	.word	0x40026440
 8003698:	400260a0 	.word	0x400260a0
 800369c:	400264a0 	.word	0x400264a0
 80036a0:	40026458 	.word	0x40026458
 80036a4:	40026400 	.word	0x40026400
 80036a8:	400260b8 	.word	0x400260b8
 80036ac:	2340      	movs	r3, #64	@ 0x40
 80036ae:	e00c      	b.n	80036ca <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80036b0:	2340      	movs	r3, #64	@ 0x40
 80036b2:	e00a      	b.n	80036ca <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80036b4:	2340      	movs	r3, #64	@ 0x40
 80036b6:	e008      	b.n	80036ca <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80036b8:	2340      	movs	r3, #64	@ 0x40
 80036ba:	e006      	b.n	80036ca <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80036bc:	2301      	movs	r3, #1
 80036be:	e004      	b.n	80036ca <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80036c0:	2301      	movs	r3, #1
 80036c2:	e002      	b.n	80036ca <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80036c4:	2301      	movs	r3, #1
 80036c6:	e000      	b.n	80036ca <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80036c8:	2301      	movs	r3, #1
 80036ca:	4a7b      	ldr	r2, [pc, #492]	@ (80038b8 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 80036cc:	6093      	str	r3, [r2, #8]
 80036ce:	e0be      	b.n	800384e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	461a      	mov	r2, r3
 80036d6:	4b79      	ldr	r3, [pc, #484]	@ (80038bc <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 80036d8:	429a      	cmp	r2, r3
 80036da:	d95c      	bls.n	8003796 <HAL_DMAEx_MultiBufferStart_IT+0x1132>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a77      	ldr	r2, [pc, #476]	@ (80038c0 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d053      	beq.n	800378e <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a76      	ldr	r2, [pc, #472]	@ (80038c4 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d04c      	beq.n	800378a <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a74      	ldr	r2, [pc, #464]	@ (80038c8 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d045      	beq.n	8003786 <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a73      	ldr	r2, [pc, #460]	@ (80038cc <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d03e      	beq.n	8003782 <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a71      	ldr	r2, [pc, #452]	@ (80038d0 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d037      	beq.n	800377e <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a70      	ldr	r2, [pc, #448]	@ (80038d4 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d030      	beq.n	800377a <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a6e      	ldr	r2, [pc, #440]	@ (80038d8 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d029      	beq.n	8003776 <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a6d      	ldr	r2, [pc, #436]	@ (80038dc <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d022      	beq.n	8003772 <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a6b      	ldr	r2, [pc, #428]	@ (80038e0 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d01a      	beq.n	800376c <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a6a      	ldr	r2, [pc, #424]	@ (80038e4 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d012      	beq.n	8003766 <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a68      	ldr	r2, [pc, #416]	@ (80038e8 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d00a      	beq.n	8003760 <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a67      	ldr	r2, [pc, #412]	@ (80038ec <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d102      	bne.n	800375a <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 8003754:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003758:	e01a      	b.n	8003790 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800375a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800375e:	e017      	b.n	8003790 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003760:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003764:	e014      	b.n	8003790 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003766:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800376a:	e011      	b.n	8003790 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800376c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003770:	e00e      	b.n	8003790 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003772:	2340      	movs	r3, #64	@ 0x40
 8003774:	e00c      	b.n	8003790 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003776:	2340      	movs	r3, #64	@ 0x40
 8003778:	e00a      	b.n	8003790 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800377a:	2340      	movs	r3, #64	@ 0x40
 800377c:	e008      	b.n	8003790 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800377e:	2340      	movs	r3, #64	@ 0x40
 8003780:	e006      	b.n	8003790 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003782:	2301      	movs	r3, #1
 8003784:	e004      	b.n	8003790 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003786:	2301      	movs	r3, #1
 8003788:	e002      	b.n	8003790 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800378a:	2301      	movs	r3, #1
 800378c:	e000      	b.n	8003790 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800378e:	2301      	movs	r3, #1
 8003790:	4a57      	ldr	r2, [pc, #348]	@ (80038f0 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8003792:	60d3      	str	r3, [r2, #12]
 8003794:	e05b      	b.n	800384e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a49      	ldr	r2, [pc, #292]	@ (80038c0 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d053      	beq.n	8003848 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a47      	ldr	r2, [pc, #284]	@ (80038c4 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d04c      	beq.n	8003844 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a46      	ldr	r2, [pc, #280]	@ (80038c8 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d045      	beq.n	8003840 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a44      	ldr	r2, [pc, #272]	@ (80038cc <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d03e      	beq.n	800383c <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a43      	ldr	r2, [pc, #268]	@ (80038d0 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d037      	beq.n	8003838 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a41      	ldr	r2, [pc, #260]	@ (80038d4 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d030      	beq.n	8003834 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a40      	ldr	r2, [pc, #256]	@ (80038d8 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d029      	beq.n	8003830 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a3e      	ldr	r2, [pc, #248]	@ (80038dc <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d022      	beq.n	800382c <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a3d      	ldr	r2, [pc, #244]	@ (80038e0 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d01a      	beq.n	8003826 <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a3b      	ldr	r2, [pc, #236]	@ (80038e4 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d012      	beq.n	8003820 <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a3a      	ldr	r2, [pc, #232]	@ (80038e8 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d00a      	beq.n	800381a <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a38      	ldr	r2, [pc, #224]	@ (80038ec <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d102      	bne.n	8003814 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 800380e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003812:	e01a      	b.n	800384a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003814:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003818:	e017      	b.n	800384a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800381a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800381e:	e014      	b.n	800384a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003820:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003824:	e011      	b.n	800384a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003826:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800382a:	e00e      	b.n	800384a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800382c:	2340      	movs	r3, #64	@ 0x40
 800382e:	e00c      	b.n	800384a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003830:	2340      	movs	r3, #64	@ 0x40
 8003832:	e00a      	b.n	800384a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003834:	2340      	movs	r3, #64	@ 0x40
 8003836:	e008      	b.n	800384a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003838:	2340      	movs	r3, #64	@ 0x40
 800383a:	e006      	b.n	800384a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800383c:	2301      	movs	r3, #1
 800383e:	e004      	b.n	800384a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003840:	2301      	movs	r3, #1
 8003842:	e002      	b.n	800384a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003844:	2301      	movs	r3, #1
 8003846:	e000      	b.n	800384a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003848:	2301      	movs	r3, #1
 800384a:	4a29      	ldr	r2, [pc, #164]	@ (80038f0 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 800384c:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f042 0216 	orr.w	r2, r2, #22
 800385c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	695a      	ldr	r2, [r3, #20]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800386c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003872:	2b00      	cmp	r3, #0
 8003874:	d103      	bne.n	800387e <HAL_DMAEx_MultiBufferStart_IT+0x121a>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800387a:	2b00      	cmp	r3, #0
 800387c:	d007      	beq.n	800388e <HAL_DMAEx_MultiBufferStart_IT+0x122a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f042 0208 	orr.w	r2, r2, #8
 800388c:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f042 0201 	orr.w	r2, r2, #1
 800389c:	601a      	str	r2, [r3, #0]
 800389e:	e005      	b.n	80038ac <HAL_DMAEx_MultiBufferStart_IT+0x1248>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80038a8:	2302      	movs	r3, #2
 80038aa:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 80038ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3718      	adds	r7, #24
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	40026400 	.word	0x40026400
 80038bc:	40026058 	.word	0x40026058
 80038c0:	40026010 	.word	0x40026010
 80038c4:	40026410 	.word	0x40026410
 80038c8:	40026070 	.word	0x40026070
 80038cc:	40026470 	.word	0x40026470
 80038d0:	40026028 	.word	0x40026028
 80038d4:	40026428 	.word	0x40026428
 80038d8:	40026088 	.word	0x40026088
 80038dc:	40026488 	.word	0x40026488
 80038e0:	40026040 	.word	0x40026040
 80038e4:	40026440 	.word	0x40026440
 80038e8:	400260a0 	.word	0x400260a0
 80038ec:	400264a0 	.word	0x400264a0
 80038f0:	40026000 	.word	0x40026000

080038f4 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	4613      	mov	r3, r2
 8003900:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 8003902:	79fb      	ldrb	r3, [r7, #7]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d104      	bne.n	8003912 <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68ba      	ldr	r2, [r7, #8]
 800390e:	60da      	str	r2, [r3, #12]
 8003910:	e003      	b.n	800391a <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68ba      	ldr	r2, [r7, #8]
 8003918:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3714      	adds	r7, #20
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
 8003934:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	683a      	ldr	r2, [r7, #0]
 800393c:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	2b40      	cmp	r3, #64	@ 0x40
 8003944:	d108      	bne.n	8003958 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68ba      	ldr	r2, [r7, #8]
 8003954:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003956:	e007      	b.n	8003968 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68ba      	ldr	r2, [r7, #8]
 800395e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	60da      	str	r2, [r3, #12]
}
 8003968:	bf00      	nop
 800396a:	3714      	adds	r7, #20
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003974:	b480      	push	{r7}
 8003976:	b089      	sub	sp, #36	@ 0x24
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800397e:	2300      	movs	r3, #0
 8003980:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003982:	2300      	movs	r3, #0
 8003984:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003986:	2300      	movs	r3, #0
 8003988:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800398a:	2300      	movs	r3, #0
 800398c:	61fb      	str	r3, [r7, #28]
 800398e:	e177      	b.n	8003c80 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003990:	2201      	movs	r2, #1
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	fa02 f303 	lsl.w	r3, r2, r3
 8003998:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	4013      	ands	r3, r2
 80039a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	f040 8166 	bne.w	8003c7a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f003 0303 	and.w	r3, r3, #3
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d005      	beq.n	80039c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d130      	bne.n	8003a28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	2203      	movs	r2, #3
 80039d2:	fa02 f303 	lsl.w	r3, r2, r3
 80039d6:	43db      	mvns	r3, r3
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	4013      	ands	r3, r2
 80039dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	68da      	ldr	r2, [r3, #12]
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ea:	69ba      	ldr	r2, [r7, #24]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039fc:	2201      	movs	r2, #1
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	43db      	mvns	r3, r3
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	091b      	lsrs	r3, r3, #4
 8003a12:	f003 0201 	and.w	r2, r3, #1
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	69ba      	ldr	r2, [r7, #24]
 8003a26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f003 0303 	and.w	r3, r3, #3
 8003a30:	2b03      	cmp	r3, #3
 8003a32:	d017      	beq.n	8003a64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	2203      	movs	r2, #3
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	43db      	mvns	r3, r3
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	689a      	ldr	r2, [r3, #8]
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	005b      	lsls	r3, r3, #1
 8003a54:	fa02 f303 	lsl.w	r3, r2, r3
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f003 0303 	and.w	r3, r3, #3
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d123      	bne.n	8003ab8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	08da      	lsrs	r2, r3, #3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	3208      	adds	r2, #8
 8003a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	f003 0307 	and.w	r3, r3, #7
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	220f      	movs	r2, #15
 8003a88:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8c:	43db      	mvns	r3, r3
 8003a8e:	69ba      	ldr	r2, [r7, #24]
 8003a90:	4013      	ands	r3, r2
 8003a92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	691a      	ldr	r2, [r3, #16]
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	f003 0307 	and.w	r3, r3, #7
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	08da      	lsrs	r2, r3, #3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	3208      	adds	r2, #8
 8003ab2:	69b9      	ldr	r1, [r7, #24]
 8003ab4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	2203      	movs	r2, #3
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	43db      	mvns	r3, r3
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	4013      	ands	r3, r2
 8003ace:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f003 0203 	and.w	r2, r3, #3
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	005b      	lsls	r3, r3, #1
 8003adc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 80c0 	beq.w	8003c7a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003afa:	2300      	movs	r3, #0
 8003afc:	60fb      	str	r3, [r7, #12]
 8003afe:	4b66      	ldr	r3, [pc, #408]	@ (8003c98 <HAL_GPIO_Init+0x324>)
 8003b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b02:	4a65      	ldr	r2, [pc, #404]	@ (8003c98 <HAL_GPIO_Init+0x324>)
 8003b04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b08:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b0a:	4b63      	ldr	r3, [pc, #396]	@ (8003c98 <HAL_GPIO_Init+0x324>)
 8003b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b12:	60fb      	str	r3, [r7, #12]
 8003b14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b16:	4a61      	ldr	r2, [pc, #388]	@ (8003c9c <HAL_GPIO_Init+0x328>)
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	089b      	lsrs	r3, r3, #2
 8003b1c:	3302      	adds	r3, #2
 8003b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	f003 0303 	and.w	r3, r3, #3
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	220f      	movs	r2, #15
 8003b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b32:	43db      	mvns	r3, r3
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	4013      	ands	r3, r2
 8003b38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a58      	ldr	r2, [pc, #352]	@ (8003ca0 <HAL_GPIO_Init+0x32c>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d037      	beq.n	8003bb2 <HAL_GPIO_Init+0x23e>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a57      	ldr	r2, [pc, #348]	@ (8003ca4 <HAL_GPIO_Init+0x330>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d031      	beq.n	8003bae <HAL_GPIO_Init+0x23a>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a56      	ldr	r2, [pc, #344]	@ (8003ca8 <HAL_GPIO_Init+0x334>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d02b      	beq.n	8003baa <HAL_GPIO_Init+0x236>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a55      	ldr	r2, [pc, #340]	@ (8003cac <HAL_GPIO_Init+0x338>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d025      	beq.n	8003ba6 <HAL_GPIO_Init+0x232>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a54      	ldr	r2, [pc, #336]	@ (8003cb0 <HAL_GPIO_Init+0x33c>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d01f      	beq.n	8003ba2 <HAL_GPIO_Init+0x22e>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a53      	ldr	r2, [pc, #332]	@ (8003cb4 <HAL_GPIO_Init+0x340>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d019      	beq.n	8003b9e <HAL_GPIO_Init+0x22a>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a52      	ldr	r2, [pc, #328]	@ (8003cb8 <HAL_GPIO_Init+0x344>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d013      	beq.n	8003b9a <HAL_GPIO_Init+0x226>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a51      	ldr	r2, [pc, #324]	@ (8003cbc <HAL_GPIO_Init+0x348>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d00d      	beq.n	8003b96 <HAL_GPIO_Init+0x222>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a50      	ldr	r2, [pc, #320]	@ (8003cc0 <HAL_GPIO_Init+0x34c>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d007      	beq.n	8003b92 <HAL_GPIO_Init+0x21e>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a4f      	ldr	r2, [pc, #316]	@ (8003cc4 <HAL_GPIO_Init+0x350>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d101      	bne.n	8003b8e <HAL_GPIO_Init+0x21a>
 8003b8a:	2309      	movs	r3, #9
 8003b8c:	e012      	b.n	8003bb4 <HAL_GPIO_Init+0x240>
 8003b8e:	230a      	movs	r3, #10
 8003b90:	e010      	b.n	8003bb4 <HAL_GPIO_Init+0x240>
 8003b92:	2308      	movs	r3, #8
 8003b94:	e00e      	b.n	8003bb4 <HAL_GPIO_Init+0x240>
 8003b96:	2307      	movs	r3, #7
 8003b98:	e00c      	b.n	8003bb4 <HAL_GPIO_Init+0x240>
 8003b9a:	2306      	movs	r3, #6
 8003b9c:	e00a      	b.n	8003bb4 <HAL_GPIO_Init+0x240>
 8003b9e:	2305      	movs	r3, #5
 8003ba0:	e008      	b.n	8003bb4 <HAL_GPIO_Init+0x240>
 8003ba2:	2304      	movs	r3, #4
 8003ba4:	e006      	b.n	8003bb4 <HAL_GPIO_Init+0x240>
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e004      	b.n	8003bb4 <HAL_GPIO_Init+0x240>
 8003baa:	2302      	movs	r3, #2
 8003bac:	e002      	b.n	8003bb4 <HAL_GPIO_Init+0x240>
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e000      	b.n	8003bb4 <HAL_GPIO_Init+0x240>
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	69fa      	ldr	r2, [r7, #28]
 8003bb6:	f002 0203 	and.w	r2, r2, #3
 8003bba:	0092      	lsls	r2, r2, #2
 8003bbc:	4093      	lsls	r3, r2
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bc4:	4935      	ldr	r1, [pc, #212]	@ (8003c9c <HAL_GPIO_Init+0x328>)
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	089b      	lsrs	r3, r3, #2
 8003bca:	3302      	adds	r3, #2
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bd2:	4b3d      	ldr	r3, [pc, #244]	@ (8003cc8 <HAL_GPIO_Init+0x354>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	43db      	mvns	r3, r3
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	4013      	ands	r3, r2
 8003be0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bf6:	4a34      	ldr	r2, [pc, #208]	@ (8003cc8 <HAL_GPIO_Init+0x354>)
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003bfc:	4b32      	ldr	r3, [pc, #200]	@ (8003cc8 <HAL_GPIO_Init+0x354>)
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	43db      	mvns	r3, r3
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d003      	beq.n	8003c20 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c20:	4a29      	ldr	r2, [pc, #164]	@ (8003cc8 <HAL_GPIO_Init+0x354>)
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c26:	4b28      	ldr	r3, [pc, #160]	@ (8003cc8 <HAL_GPIO_Init+0x354>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	43db      	mvns	r3, r3
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	4013      	ands	r3, r2
 8003c34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c4a:	4a1f      	ldr	r2, [pc, #124]	@ (8003cc8 <HAL_GPIO_Init+0x354>)
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c50:	4b1d      	ldr	r3, [pc, #116]	@ (8003cc8 <HAL_GPIO_Init+0x354>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	43db      	mvns	r3, r3
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d003      	beq.n	8003c74 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c74:	4a14      	ldr	r2, [pc, #80]	@ (8003cc8 <HAL_GPIO_Init+0x354>)
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	61fb      	str	r3, [r7, #28]
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	2b0f      	cmp	r3, #15
 8003c84:	f67f ae84 	bls.w	8003990 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c88:	bf00      	nop
 8003c8a:	bf00      	nop
 8003c8c:	3724      	adds	r7, #36	@ 0x24
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	40023800 	.word	0x40023800
 8003c9c:	40013800 	.word	0x40013800
 8003ca0:	40020000 	.word	0x40020000
 8003ca4:	40020400 	.word	0x40020400
 8003ca8:	40020800 	.word	0x40020800
 8003cac:	40020c00 	.word	0x40020c00
 8003cb0:	40021000 	.word	0x40021000
 8003cb4:	40021400 	.word	0x40021400
 8003cb8:	40021800 	.word	0x40021800
 8003cbc:	40021c00 	.word	0x40021c00
 8003cc0:	40022000 	.word	0x40022000
 8003cc4:	40022400 	.word	0x40022400
 8003cc8:	40013c00 	.word	0x40013c00

08003ccc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	807b      	strh	r3, [r7, #2]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cdc:	787b      	ldrb	r3, [r7, #1]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d003      	beq.n	8003cea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ce2:	887a      	ldrh	r2, [r7, #2]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ce8:	e003      	b.n	8003cf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003cea:	887b      	ldrh	r3, [r7, #2]
 8003cec:	041a      	lsls	r2, r3, #16
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	619a      	str	r2, [r3, #24]
}
 8003cf2:	bf00      	nop
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
	...

08003d00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e12b      	b.n	8003f6a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d106      	bne.n	8003d2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f7fd fc66 	bl	80015f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2224      	movs	r2, #36	@ 0x24
 8003d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f022 0201 	bic.w	r2, r2, #1
 8003d42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d64:	f001 fa28 	bl	80051b8 <HAL_RCC_GetPCLK1Freq>
 8003d68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	4a81      	ldr	r2, [pc, #516]	@ (8003f74 <HAL_I2C_Init+0x274>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d807      	bhi.n	8003d84 <HAL_I2C_Init+0x84>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	4a80      	ldr	r2, [pc, #512]	@ (8003f78 <HAL_I2C_Init+0x278>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	bf94      	ite	ls
 8003d7c:	2301      	movls	r3, #1
 8003d7e:	2300      	movhi	r3, #0
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	e006      	b.n	8003d92 <HAL_I2C_Init+0x92>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	4a7d      	ldr	r2, [pc, #500]	@ (8003f7c <HAL_I2C_Init+0x27c>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	bf94      	ite	ls
 8003d8c:	2301      	movls	r3, #1
 8003d8e:	2300      	movhi	r3, #0
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e0e7      	b.n	8003f6a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	4a78      	ldr	r2, [pc, #480]	@ (8003f80 <HAL_I2C_Init+0x280>)
 8003d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003da2:	0c9b      	lsrs	r3, r3, #18
 8003da4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68ba      	ldr	r2, [r7, #8]
 8003db6:	430a      	orrs	r2, r1
 8003db8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	4a6a      	ldr	r2, [pc, #424]	@ (8003f74 <HAL_I2C_Init+0x274>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d802      	bhi.n	8003dd4 <HAL_I2C_Init+0xd4>
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	e009      	b.n	8003de8 <HAL_I2C_Init+0xe8>
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003dda:	fb02 f303 	mul.w	r3, r2, r3
 8003dde:	4a69      	ldr	r2, [pc, #420]	@ (8003f84 <HAL_I2C_Init+0x284>)
 8003de0:	fba2 2303 	umull	r2, r3, r2, r3
 8003de4:	099b      	lsrs	r3, r3, #6
 8003de6:	3301      	adds	r3, #1
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	6812      	ldr	r2, [r2, #0]
 8003dec:	430b      	orrs	r3, r1
 8003dee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	69db      	ldr	r3, [r3, #28]
 8003df6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003dfa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	495c      	ldr	r1, [pc, #368]	@ (8003f74 <HAL_I2C_Init+0x274>)
 8003e04:	428b      	cmp	r3, r1
 8003e06:	d819      	bhi.n	8003e3c <HAL_I2C_Init+0x13c>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	1e59      	subs	r1, r3, #1
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e16:	1c59      	adds	r1, r3, #1
 8003e18:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003e1c:	400b      	ands	r3, r1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00a      	beq.n	8003e38 <HAL_I2C_Init+0x138>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	1e59      	subs	r1, r3, #1
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	005b      	lsls	r3, r3, #1
 8003e2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e30:	3301      	adds	r3, #1
 8003e32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e36:	e051      	b.n	8003edc <HAL_I2C_Init+0x1dc>
 8003e38:	2304      	movs	r3, #4
 8003e3a:	e04f      	b.n	8003edc <HAL_I2C_Init+0x1dc>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d111      	bne.n	8003e68 <HAL_I2C_Init+0x168>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	1e58      	subs	r0, r3, #1
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6859      	ldr	r1, [r3, #4]
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	005b      	lsls	r3, r3, #1
 8003e50:	440b      	add	r3, r1
 8003e52:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e56:	3301      	adds	r3, #1
 8003e58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	bf0c      	ite	eq
 8003e60:	2301      	moveq	r3, #1
 8003e62:	2300      	movne	r3, #0
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	e012      	b.n	8003e8e <HAL_I2C_Init+0x18e>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	1e58      	subs	r0, r3, #1
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6859      	ldr	r1, [r3, #4]
 8003e70:	460b      	mov	r3, r1
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	440b      	add	r3, r1
 8003e76:	0099      	lsls	r1, r3, #2
 8003e78:	440b      	add	r3, r1
 8003e7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e7e:	3301      	adds	r3, #1
 8003e80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	bf0c      	ite	eq
 8003e88:	2301      	moveq	r3, #1
 8003e8a:	2300      	movne	r3, #0
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d001      	beq.n	8003e96 <HAL_I2C_Init+0x196>
 8003e92:	2301      	movs	r3, #1
 8003e94:	e022      	b.n	8003edc <HAL_I2C_Init+0x1dc>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10e      	bne.n	8003ebc <HAL_I2C_Init+0x1bc>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	1e58      	subs	r0, r3, #1
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6859      	ldr	r1, [r3, #4]
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	440b      	add	r3, r1
 8003eac:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003eba:	e00f      	b.n	8003edc <HAL_I2C_Init+0x1dc>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	1e58      	subs	r0, r3, #1
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6859      	ldr	r1, [r3, #4]
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	440b      	add	r3, r1
 8003eca:	0099      	lsls	r1, r3, #2
 8003ecc:	440b      	add	r3, r1
 8003ece:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ed8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003edc:	6879      	ldr	r1, [r7, #4]
 8003ede:	6809      	ldr	r1, [r1, #0]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	69da      	ldr	r2, [r3, #28]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	430a      	orrs	r2, r1
 8003efe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003f0a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	6911      	ldr	r1, [r2, #16]
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	68d2      	ldr	r2, [r2, #12]
 8003f16:	4311      	orrs	r1, r2
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	6812      	ldr	r2, [r2, #0]
 8003f1c:	430b      	orrs	r3, r1
 8003f1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	695a      	ldr	r2, [r3, #20]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	431a      	orrs	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f042 0201 	orr.w	r2, r2, #1
 8003f4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2220      	movs	r2, #32
 8003f56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	000186a0 	.word	0x000186a0
 8003f78:	001e847f 	.word	0x001e847f
 8003f7c:	003d08ff 	.word	0x003d08ff
 8003f80:	431bde83 	.word	0x431bde83
 8003f84:	10624dd3 	.word	0x10624dd3

08003f88 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b088      	sub	sp, #32
 8003f8c:	af02      	add	r7, sp, #8
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	4608      	mov	r0, r1
 8003f92:	4611      	mov	r1, r2
 8003f94:	461a      	mov	r2, r3
 8003f96:	4603      	mov	r3, r0
 8003f98:	817b      	strh	r3, [r7, #10]
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	813b      	strh	r3, [r7, #8]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fa2:	f7fd fce5 	bl	8001970 <HAL_GetTick>
 8003fa6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2b20      	cmp	r3, #32
 8003fb2:	f040 80d9 	bne.w	8004168 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	9300      	str	r3, [sp, #0]
 8003fba:	2319      	movs	r3, #25
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	496d      	ldr	r1, [pc, #436]	@ (8004174 <HAL_I2C_Mem_Write+0x1ec>)
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f000 f971 	bl	80042a8 <I2C_WaitOnFlagUntilTimeout>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d001      	beq.n	8003fd0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003fcc:	2302      	movs	r3, #2
 8003fce:	e0cc      	b.n	800416a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d101      	bne.n	8003fde <HAL_I2C_Mem_Write+0x56>
 8003fda:	2302      	movs	r3, #2
 8003fdc:	e0c5      	b.n	800416a <HAL_I2C_Mem_Write+0x1e2>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d007      	beq.n	8004004 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f042 0201 	orr.w	r2, r2, #1
 8004002:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004012:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2221      	movs	r2, #33	@ 0x21
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2240      	movs	r2, #64	@ 0x40
 8004020:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6a3a      	ldr	r2, [r7, #32]
 800402e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004034:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800403a:	b29a      	uxth	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	4a4d      	ldr	r2, [pc, #308]	@ (8004178 <HAL_I2C_Mem_Write+0x1f0>)
 8004044:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004046:	88f8      	ldrh	r0, [r7, #6]
 8004048:	893a      	ldrh	r2, [r7, #8]
 800404a:	8979      	ldrh	r1, [r7, #10]
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	9301      	str	r3, [sp, #4]
 8004050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	4603      	mov	r3, r0
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f000 f890 	bl	800417c <I2C_RequestMemoryWrite>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d052      	beq.n	8004108 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e081      	b.n	800416a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	f000 fa36 	bl	80044dc <I2C_WaitOnTXEFlagUntilTimeout>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00d      	beq.n	8004092 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407a:	2b04      	cmp	r3, #4
 800407c:	d107      	bne.n	800408e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800408c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e06b      	b.n	800416a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004096:	781a      	ldrb	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a2:	1c5a      	adds	r2, r3, #1
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040ac:	3b01      	subs	r3, #1
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	3b01      	subs	r3, #1
 80040bc:	b29a      	uxth	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	f003 0304 	and.w	r3, r3, #4
 80040cc:	2b04      	cmp	r3, #4
 80040ce:	d11b      	bne.n	8004108 <HAL_I2C_Mem_Write+0x180>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d017      	beq.n	8004108 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040dc:	781a      	ldrb	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e8:	1c5a      	adds	r2, r3, #1
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040f2:	3b01      	subs	r3, #1
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040fe:	b29b      	uxth	r3, r3
 8004100:	3b01      	subs	r3, #1
 8004102:	b29a      	uxth	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1aa      	bne.n	8004066 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f000 fa29 	bl	800456c <I2C_WaitOnBTFFlagUntilTimeout>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00d      	beq.n	800413c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004124:	2b04      	cmp	r3, #4
 8004126:	d107      	bne.n	8004138 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004136:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e016      	b.n	800416a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800414a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2220      	movs	r2, #32
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004164:	2300      	movs	r3, #0
 8004166:	e000      	b.n	800416a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004168:	2302      	movs	r3, #2
  }
}
 800416a:	4618      	mov	r0, r3
 800416c:	3718      	adds	r7, #24
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	00100002 	.word	0x00100002
 8004178:	ffff0000 	.word	0xffff0000

0800417c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b088      	sub	sp, #32
 8004180:	af02      	add	r7, sp, #8
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	4608      	mov	r0, r1
 8004186:	4611      	mov	r1, r2
 8004188:	461a      	mov	r2, r3
 800418a:	4603      	mov	r3, r0
 800418c:	817b      	strh	r3, [r7, #10]
 800418e:	460b      	mov	r3, r1
 8004190:	813b      	strh	r3, [r7, #8]
 8004192:	4613      	mov	r3, r2
 8004194:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a8:	9300      	str	r3, [sp, #0]
 80041aa:	6a3b      	ldr	r3, [r7, #32]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f000 f878 	bl	80042a8 <I2C_WaitOnFlagUntilTimeout>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00d      	beq.n	80041da <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041cc:	d103      	bne.n	80041d6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041d4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e05f      	b.n	800429a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041da:	897b      	ldrh	r3, [r7, #10]
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	461a      	mov	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80041e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ec:	6a3a      	ldr	r2, [r7, #32]
 80041ee:	492d      	ldr	r1, [pc, #180]	@ (80042a4 <I2C_RequestMemoryWrite+0x128>)
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f000 f8d3 	bl	800439c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e04c      	b.n	800429a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004200:	2300      	movs	r3, #0
 8004202:	617b      	str	r3, [r7, #20]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	617b      	str	r3, [r7, #20]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	617b      	str	r3, [r7, #20]
 8004214:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004216:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004218:	6a39      	ldr	r1, [r7, #32]
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f000 f95e 	bl	80044dc <I2C_WaitOnTXEFlagUntilTimeout>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00d      	beq.n	8004242 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422a:	2b04      	cmp	r3, #4
 800422c:	d107      	bne.n	800423e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800423c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e02b      	b.n	800429a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004242:	88fb      	ldrh	r3, [r7, #6]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d105      	bne.n	8004254 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004248:	893b      	ldrh	r3, [r7, #8]
 800424a:	b2da      	uxtb	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	611a      	str	r2, [r3, #16]
 8004252:	e021      	b.n	8004298 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004254:	893b      	ldrh	r3, [r7, #8]
 8004256:	0a1b      	lsrs	r3, r3, #8
 8004258:	b29b      	uxth	r3, r3
 800425a:	b2da      	uxtb	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004262:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004264:	6a39      	ldr	r1, [r7, #32]
 8004266:	68f8      	ldr	r0, [r7, #12]
 8004268:	f000 f938 	bl	80044dc <I2C_WaitOnTXEFlagUntilTimeout>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00d      	beq.n	800428e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004276:	2b04      	cmp	r3, #4
 8004278:	d107      	bne.n	800428a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004288:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e005      	b.n	800429a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800428e:	893b      	ldrh	r3, [r7, #8]
 8004290:	b2da      	uxtb	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3718      	adds	r7, #24
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	00010002 	.word	0x00010002

080042a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	603b      	str	r3, [r7, #0]
 80042b4:	4613      	mov	r3, r2
 80042b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042b8:	e048      	b.n	800434c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c0:	d044      	beq.n	800434c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042c2:	f7fd fb55 	bl	8001970 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	683a      	ldr	r2, [r7, #0]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d302      	bcc.n	80042d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d139      	bne.n	800434c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	0c1b      	lsrs	r3, r3, #16
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d10d      	bne.n	80042fe <I2C_WaitOnFlagUntilTimeout+0x56>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	695b      	ldr	r3, [r3, #20]
 80042e8:	43da      	mvns	r2, r3
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	4013      	ands	r3, r2
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	bf0c      	ite	eq
 80042f4:	2301      	moveq	r3, #1
 80042f6:	2300      	movne	r3, #0
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	461a      	mov	r2, r3
 80042fc:	e00c      	b.n	8004318 <I2C_WaitOnFlagUntilTimeout+0x70>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	43da      	mvns	r2, r3
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	4013      	ands	r3, r2
 800430a:	b29b      	uxth	r3, r3
 800430c:	2b00      	cmp	r3, #0
 800430e:	bf0c      	ite	eq
 8004310:	2301      	moveq	r3, #1
 8004312:	2300      	movne	r3, #0
 8004314:	b2db      	uxtb	r3, r3
 8004316:	461a      	mov	r2, r3
 8004318:	79fb      	ldrb	r3, [r7, #7]
 800431a:	429a      	cmp	r2, r3
 800431c:	d116      	bne.n	800434c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2220      	movs	r2, #32
 8004328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004338:	f043 0220 	orr.w	r2, r3, #32
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e023      	b.n	8004394 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	0c1b      	lsrs	r3, r3, #16
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b01      	cmp	r3, #1
 8004354:	d10d      	bne.n	8004372 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	43da      	mvns	r2, r3
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	4013      	ands	r3, r2
 8004362:	b29b      	uxth	r3, r3
 8004364:	2b00      	cmp	r3, #0
 8004366:	bf0c      	ite	eq
 8004368:	2301      	moveq	r3, #1
 800436a:	2300      	movne	r3, #0
 800436c:	b2db      	uxtb	r3, r3
 800436e:	461a      	mov	r2, r3
 8004370:	e00c      	b.n	800438c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	43da      	mvns	r2, r3
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	4013      	ands	r3, r2
 800437e:	b29b      	uxth	r3, r3
 8004380:	2b00      	cmp	r3, #0
 8004382:	bf0c      	ite	eq
 8004384:	2301      	moveq	r3, #1
 8004386:	2300      	movne	r3, #0
 8004388:	b2db      	uxtb	r3, r3
 800438a:	461a      	mov	r2, r3
 800438c:	79fb      	ldrb	r3, [r7, #7]
 800438e:	429a      	cmp	r2, r3
 8004390:	d093      	beq.n	80042ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	3710      	adds	r7, #16
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
 80043a8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043aa:	e071      	b.n	8004490 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043ba:	d123      	bne.n	8004404 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043ca:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80043d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2220      	movs	r2, #32
 80043e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f0:	f043 0204 	orr.w	r2, r3, #4
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e067      	b.n	80044d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800440a:	d041      	beq.n	8004490 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800440c:	f7fd fab0 	bl	8001970 <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	429a      	cmp	r2, r3
 800441a:	d302      	bcc.n	8004422 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d136      	bne.n	8004490 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	0c1b      	lsrs	r3, r3, #16
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b01      	cmp	r3, #1
 800442a:	d10c      	bne.n	8004446 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	43da      	mvns	r2, r3
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	4013      	ands	r3, r2
 8004438:	b29b      	uxth	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	bf14      	ite	ne
 800443e:	2301      	movne	r3, #1
 8004440:	2300      	moveq	r3, #0
 8004442:	b2db      	uxtb	r3, r3
 8004444:	e00b      	b.n	800445e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	43da      	mvns	r2, r3
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	4013      	ands	r3, r2
 8004452:	b29b      	uxth	r3, r3
 8004454:	2b00      	cmp	r3, #0
 8004456:	bf14      	ite	ne
 8004458:	2301      	movne	r3, #1
 800445a:	2300      	moveq	r3, #0
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d016      	beq.n	8004490 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2220      	movs	r2, #32
 800446c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800447c:	f043 0220 	orr.w	r2, r3, #32
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e021      	b.n	80044d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	0c1b      	lsrs	r3, r3, #16
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b01      	cmp	r3, #1
 8004498:	d10c      	bne.n	80044b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	695b      	ldr	r3, [r3, #20]
 80044a0:	43da      	mvns	r2, r3
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	4013      	ands	r3, r2
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	bf14      	ite	ne
 80044ac:	2301      	movne	r3, #1
 80044ae:	2300      	moveq	r3, #0
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	e00b      	b.n	80044cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	43da      	mvns	r2, r3
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	4013      	ands	r3, r2
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	bf14      	ite	ne
 80044c6:	2301      	movne	r3, #1
 80044c8:	2300      	moveq	r3, #0
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f47f af6d 	bne.w	80043ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3710      	adds	r7, #16
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044e8:	e034      	b.n	8004554 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	f000 f886 	bl	80045fc <I2C_IsAcknowledgeFailed>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e034      	b.n	8004564 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004500:	d028      	beq.n	8004554 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004502:	f7fd fa35 	bl	8001970 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	68ba      	ldr	r2, [r7, #8]
 800450e:	429a      	cmp	r2, r3
 8004510:	d302      	bcc.n	8004518 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d11d      	bne.n	8004554 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004522:	2b80      	cmp	r3, #128	@ 0x80
 8004524:	d016      	beq.n	8004554 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2220      	movs	r2, #32
 8004530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004540:	f043 0220 	orr.w	r2, r3, #32
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e007      	b.n	8004564 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800455e:	2b80      	cmp	r3, #128	@ 0x80
 8004560:	d1c3      	bne.n	80044ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	3710      	adds	r7, #16
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004578:	e034      	b.n	80045e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f000 f83e 	bl	80045fc <I2C_IsAcknowledgeFailed>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d001      	beq.n	800458a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e034      	b.n	80045f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004590:	d028      	beq.n	80045e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004592:	f7fd f9ed 	bl	8001970 <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	68ba      	ldr	r2, [r7, #8]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d302      	bcc.n	80045a8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d11d      	bne.n	80045e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	f003 0304 	and.w	r3, r3, #4
 80045b2:	2b04      	cmp	r3, #4
 80045b4:	d016      	beq.n	80045e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2220      	movs	r2, #32
 80045c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d0:	f043 0220 	orr.w	r2, r3, #32
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e007      	b.n	80045f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	f003 0304 	and.w	r3, r3, #4
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	d1c3      	bne.n	800457a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3710      	adds	r7, #16
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800460e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004612:	d11b      	bne.n	800464c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800461c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2220      	movs	r2, #32
 8004628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004638:	f043 0204 	orr.w	r2, r3, #4
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e000      	b.n	800464e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	370c      	adds	r7, #12
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr

0800465a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800465a:	b480      	push	{r7}
 800465c:	b083      	sub	sp, #12
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
 8004662:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800466a:	b2db      	uxtb	r3, r3
 800466c:	2b20      	cmp	r3, #32
 800466e:	d129      	bne.n	80046c4 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2224      	movs	r2, #36	@ 0x24
 8004674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f022 0201 	bic.w	r2, r2, #1
 8004686:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 0210 	bic.w	r2, r2, #16
 8004696:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	430a      	orrs	r2, r1
 80046a6:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f042 0201 	orr.w	r2, r2, #1
 80046b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2220      	movs	r2, #32
 80046bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80046c0:	2300      	movs	r3, #0
 80046c2:	e000      	b.n	80046c6 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80046c4:	2302      	movs	r3, #2
  }
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr

080046d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80046d2:	b480      	push	{r7}
 80046d4:	b085      	sub	sp, #20
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
 80046da:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80046dc:	2300      	movs	r3, #0
 80046de:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	2b20      	cmp	r3, #32
 80046ea:	d12a      	bne.n	8004742 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2224      	movs	r2, #36	@ 0x24
 80046f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f022 0201 	bic.w	r2, r2, #1
 8004702:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800470a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800470c:	89fb      	ldrh	r3, [r7, #14]
 800470e:	f023 030f 	bic.w	r3, r3, #15
 8004712:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	b29a      	uxth	r2, r3
 8004718:	89fb      	ldrh	r3, [r7, #14]
 800471a:	4313      	orrs	r3, r2
 800471c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	89fa      	ldrh	r2, [r7, #14]
 8004724:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f042 0201 	orr.w	r2, r2, #1
 8004734:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2220      	movs	r2, #32
 800473a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800473e:	2300      	movs	r3, #0
 8004740:	e000      	b.n	8004744 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004742:	2302      	movs	r3, #2
  }
}
 8004744:	4618      	mov	r0, r3
 8004746:	3714      	adds	r7, #20
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004756:	2300      	movs	r3, #0
 8004758:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800475a:	2300      	movs	r3, #0
 800475c:	603b      	str	r3, [r7, #0]
 800475e:	4b20      	ldr	r3, [pc, #128]	@ (80047e0 <HAL_PWREx_EnableOverDrive+0x90>)
 8004760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004762:	4a1f      	ldr	r2, [pc, #124]	@ (80047e0 <HAL_PWREx_EnableOverDrive+0x90>)
 8004764:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004768:	6413      	str	r3, [r2, #64]	@ 0x40
 800476a:	4b1d      	ldr	r3, [pc, #116]	@ (80047e0 <HAL_PWREx_EnableOverDrive+0x90>)
 800476c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004772:	603b      	str	r3, [r7, #0]
 8004774:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004776:	4b1b      	ldr	r3, [pc, #108]	@ (80047e4 <HAL_PWREx_EnableOverDrive+0x94>)
 8004778:	2201      	movs	r2, #1
 800477a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800477c:	f7fd f8f8 	bl	8001970 <HAL_GetTick>
 8004780:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004782:	e009      	b.n	8004798 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004784:	f7fd f8f4 	bl	8001970 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004792:	d901      	bls.n	8004798 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e01f      	b.n	80047d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004798:	4b13      	ldr	r3, [pc, #76]	@ (80047e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047a4:	d1ee      	bne.n	8004784 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80047a6:	4b11      	ldr	r3, [pc, #68]	@ (80047ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80047a8:	2201      	movs	r2, #1
 80047aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80047ac:	f7fd f8e0 	bl	8001970 <HAL_GetTick>
 80047b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80047b2:	e009      	b.n	80047c8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80047b4:	f7fd f8dc 	bl	8001970 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80047c2:	d901      	bls.n	80047c8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e007      	b.n	80047d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80047c8:	4b07      	ldr	r3, [pc, #28]	@ (80047e8 <HAL_PWREx_EnableOverDrive+0x98>)
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80047d4:	d1ee      	bne.n	80047b4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3708      	adds	r7, #8
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	40023800 	.word	0x40023800
 80047e4:	420e0040 	.word	0x420e0040
 80047e8:	40007000 	.word	0x40007000
 80047ec:	420e0044 	.word	0x420e0044

080047f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e267      	b.n	8004cd2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d075      	beq.n	80048fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800480e:	4b88      	ldr	r3, [pc, #544]	@ (8004a30 <HAL_RCC_OscConfig+0x240>)
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f003 030c 	and.w	r3, r3, #12
 8004816:	2b04      	cmp	r3, #4
 8004818:	d00c      	beq.n	8004834 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800481a:	4b85      	ldr	r3, [pc, #532]	@ (8004a30 <HAL_RCC_OscConfig+0x240>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004822:	2b08      	cmp	r3, #8
 8004824:	d112      	bne.n	800484c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004826:	4b82      	ldr	r3, [pc, #520]	@ (8004a30 <HAL_RCC_OscConfig+0x240>)
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800482e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004832:	d10b      	bne.n	800484c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004834:	4b7e      	ldr	r3, [pc, #504]	@ (8004a30 <HAL_RCC_OscConfig+0x240>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d05b      	beq.n	80048f8 <HAL_RCC_OscConfig+0x108>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d157      	bne.n	80048f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e242      	b.n	8004cd2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004854:	d106      	bne.n	8004864 <HAL_RCC_OscConfig+0x74>
 8004856:	4b76      	ldr	r3, [pc, #472]	@ (8004a30 <HAL_RCC_OscConfig+0x240>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a75      	ldr	r2, [pc, #468]	@ (8004a30 <HAL_RCC_OscConfig+0x240>)
 800485c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004860:	6013      	str	r3, [r2, #0]
 8004862:	e01d      	b.n	80048a0 <HAL_RCC_OscConfig+0xb0>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800486c:	d10c      	bne.n	8004888 <HAL_RCC_OscConfig+0x98>
 800486e:	4b70      	ldr	r3, [pc, #448]	@ (8004a30 <HAL_RCC_OscConfig+0x240>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a6f      	ldr	r2, [pc, #444]	@ (8004a30 <HAL_RCC_OscConfig+0x240>)
 8004874:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004878:	6013      	str	r3, [r2, #0]
 800487a:	4b6d      	ldr	r3, [pc, #436]	@ (8004a30 <HAL_RCC_OscConfig+0x240>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a6c      	ldr	r2, [pc, #432]	@ (8004a30 <HAL_RCC_OscConfig+0x240>)
 8004880:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004884:	6013      	str	r3, [r2, #0]
 8004886:	e00b      	b.n	80048a0 <HAL_RCC_OscConfig+0xb0>
 8004888:	4b69      	ldr	r3, [pc, #420]	@ (8004a30 <HAL_RCC_OscConfig+0x240>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a68      	ldr	r2, [pc, #416]	@ (8004a30 <HAL_RCC_OscConfig+0x240>)
 800488e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004892:	6013      	str	r3, [r2, #0]
 8004894:	4b66      	ldr	r3, [pc, #408]	@ (8004a30 <HAL_RCC_OscConfig+0x240>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a65      	ldr	r2, [pc, #404]	@ (8004a30 <HAL_RCC_OscConfig+0x240>)
 800489a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800489e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d013      	beq.n	80048d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a8:	f7fd f862 	bl	8001970 <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ae:	e008      	b.n	80048c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048b0:	f7fd f85e 	bl	8001970 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b64      	cmp	r3, #100	@ 0x64
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e207      	b.n	8004cd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048c2:	4b5b      	ldr	r3, [pc, #364]	@ (8004a30 <HAL_RCC_OscConfig+0x240>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d0f0      	beq.n	80048b0 <HAL_RCC_OscConfig+0xc0>
 80048ce:	e014      	b.n	80048fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d0:	f7fd f84e 	bl	8001970 <HAL_GetTick>
 80048d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048d6:	e008      	b.n	80048ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048d8:	f7fd f84a 	bl	8001970 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b64      	cmp	r3, #100	@ 0x64
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e1f3      	b.n	8004cd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ea:	4b51      	ldr	r3, [pc, #324]	@ (8004a30 <HAL_RCC_OscConfig+0x240>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1f0      	bne.n	80048d8 <HAL_RCC_OscConfig+0xe8>
 80048f6:	e000      	b.n	80048fa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d063      	beq.n	80049ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004906:	4b4a      	ldr	r3, [pc, #296]	@ (8004a30 <HAL_RCC_OscConfig+0x240>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f003 030c 	and.w	r3, r3, #12
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00b      	beq.n	800492a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004912:	4b47      	ldr	r3, [pc, #284]	@ (8004a30 <HAL_RCC_OscConfig+0x240>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800491a:	2b08      	cmp	r3, #8
 800491c:	d11c      	bne.n	8004958 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800491e:	4b44      	ldr	r3, [pc, #272]	@ (8004a30 <HAL_RCC_OscConfig+0x240>)
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d116      	bne.n	8004958 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800492a:	4b41      	ldr	r3, [pc, #260]	@ (8004a30 <HAL_RCC_OscConfig+0x240>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d005      	beq.n	8004942 <HAL_RCC_OscConfig+0x152>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d001      	beq.n	8004942 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e1c7      	b.n	8004cd2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004942:	4b3b      	ldr	r3, [pc, #236]	@ (8004a30 <HAL_RCC_OscConfig+0x240>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	00db      	lsls	r3, r3, #3
 8004950:	4937      	ldr	r1, [pc, #220]	@ (8004a30 <HAL_RCC_OscConfig+0x240>)
 8004952:	4313      	orrs	r3, r2
 8004954:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004956:	e03a      	b.n	80049ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d020      	beq.n	80049a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004960:	4b34      	ldr	r3, [pc, #208]	@ (8004a34 <HAL_RCC_OscConfig+0x244>)
 8004962:	2201      	movs	r2, #1
 8004964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004966:	f7fd f803 	bl	8001970 <HAL_GetTick>
 800496a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800496c:	e008      	b.n	8004980 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800496e:	f7fc ffff 	bl	8001970 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	2b02      	cmp	r3, #2
 800497a:	d901      	bls.n	8004980 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e1a8      	b.n	8004cd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004980:	4b2b      	ldr	r3, [pc, #172]	@ (8004a30 <HAL_RCC_OscConfig+0x240>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0302 	and.w	r3, r3, #2
 8004988:	2b00      	cmp	r3, #0
 800498a:	d0f0      	beq.n	800496e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800498c:	4b28      	ldr	r3, [pc, #160]	@ (8004a30 <HAL_RCC_OscConfig+0x240>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	00db      	lsls	r3, r3, #3
 800499a:	4925      	ldr	r1, [pc, #148]	@ (8004a30 <HAL_RCC_OscConfig+0x240>)
 800499c:	4313      	orrs	r3, r2
 800499e:	600b      	str	r3, [r1, #0]
 80049a0:	e015      	b.n	80049ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049a2:	4b24      	ldr	r3, [pc, #144]	@ (8004a34 <HAL_RCC_OscConfig+0x244>)
 80049a4:	2200      	movs	r2, #0
 80049a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a8:	f7fc ffe2 	bl	8001970 <HAL_GetTick>
 80049ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049ae:	e008      	b.n	80049c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049b0:	f7fc ffde 	bl	8001970 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e187      	b.n	8004cd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049c2:	4b1b      	ldr	r3, [pc, #108]	@ (8004a30 <HAL_RCC_OscConfig+0x240>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1f0      	bne.n	80049b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0308 	and.w	r3, r3, #8
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d036      	beq.n	8004a48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d016      	beq.n	8004a10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049e2:	4b15      	ldr	r3, [pc, #84]	@ (8004a38 <HAL_RCC_OscConfig+0x248>)
 80049e4:	2201      	movs	r2, #1
 80049e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049e8:	f7fc ffc2 	bl	8001970 <HAL_GetTick>
 80049ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049ee:	e008      	b.n	8004a02 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049f0:	f7fc ffbe 	bl	8001970 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e167      	b.n	8004cd2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a02:	4b0b      	ldr	r3, [pc, #44]	@ (8004a30 <HAL_RCC_OscConfig+0x240>)
 8004a04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d0f0      	beq.n	80049f0 <HAL_RCC_OscConfig+0x200>
 8004a0e:	e01b      	b.n	8004a48 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a10:	4b09      	ldr	r3, [pc, #36]	@ (8004a38 <HAL_RCC_OscConfig+0x248>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a16:	f7fc ffab 	bl	8001970 <HAL_GetTick>
 8004a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a1c:	e00e      	b.n	8004a3c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a1e:	f7fc ffa7 	bl	8001970 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d907      	bls.n	8004a3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e150      	b.n	8004cd2 <HAL_RCC_OscConfig+0x4e2>
 8004a30:	40023800 	.word	0x40023800
 8004a34:	42470000 	.word	0x42470000
 8004a38:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a3c:	4b88      	ldr	r3, [pc, #544]	@ (8004c60 <HAL_RCC_OscConfig+0x470>)
 8004a3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1ea      	bne.n	8004a1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0304 	and.w	r3, r3, #4
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f000 8097 	beq.w	8004b84 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a56:	2300      	movs	r3, #0
 8004a58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a5a:	4b81      	ldr	r3, [pc, #516]	@ (8004c60 <HAL_RCC_OscConfig+0x470>)
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10f      	bne.n	8004a86 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a66:	2300      	movs	r3, #0
 8004a68:	60bb      	str	r3, [r7, #8]
 8004a6a:	4b7d      	ldr	r3, [pc, #500]	@ (8004c60 <HAL_RCC_OscConfig+0x470>)
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a6e:	4a7c      	ldr	r2, [pc, #496]	@ (8004c60 <HAL_RCC_OscConfig+0x470>)
 8004a70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a74:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a76:	4b7a      	ldr	r3, [pc, #488]	@ (8004c60 <HAL_RCC_OscConfig+0x470>)
 8004a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a7e:	60bb      	str	r3, [r7, #8]
 8004a80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a82:	2301      	movs	r3, #1
 8004a84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a86:	4b77      	ldr	r3, [pc, #476]	@ (8004c64 <HAL_RCC_OscConfig+0x474>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d118      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a92:	4b74      	ldr	r3, [pc, #464]	@ (8004c64 <HAL_RCC_OscConfig+0x474>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a73      	ldr	r2, [pc, #460]	@ (8004c64 <HAL_RCC_OscConfig+0x474>)
 8004a98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a9e:	f7fc ff67 	bl	8001970 <HAL_GetTick>
 8004aa2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aa4:	e008      	b.n	8004ab8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aa6:	f7fc ff63 	bl	8001970 <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d901      	bls.n	8004ab8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e10c      	b.n	8004cd2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ab8:	4b6a      	ldr	r3, [pc, #424]	@ (8004c64 <HAL_RCC_OscConfig+0x474>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d0f0      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d106      	bne.n	8004ada <HAL_RCC_OscConfig+0x2ea>
 8004acc:	4b64      	ldr	r3, [pc, #400]	@ (8004c60 <HAL_RCC_OscConfig+0x470>)
 8004ace:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ad0:	4a63      	ldr	r2, [pc, #396]	@ (8004c60 <HAL_RCC_OscConfig+0x470>)
 8004ad2:	f043 0301 	orr.w	r3, r3, #1
 8004ad6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ad8:	e01c      	b.n	8004b14 <HAL_RCC_OscConfig+0x324>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	2b05      	cmp	r3, #5
 8004ae0:	d10c      	bne.n	8004afc <HAL_RCC_OscConfig+0x30c>
 8004ae2:	4b5f      	ldr	r3, [pc, #380]	@ (8004c60 <HAL_RCC_OscConfig+0x470>)
 8004ae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ae6:	4a5e      	ldr	r2, [pc, #376]	@ (8004c60 <HAL_RCC_OscConfig+0x470>)
 8004ae8:	f043 0304 	orr.w	r3, r3, #4
 8004aec:	6713      	str	r3, [r2, #112]	@ 0x70
 8004aee:	4b5c      	ldr	r3, [pc, #368]	@ (8004c60 <HAL_RCC_OscConfig+0x470>)
 8004af0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004af2:	4a5b      	ldr	r2, [pc, #364]	@ (8004c60 <HAL_RCC_OscConfig+0x470>)
 8004af4:	f043 0301 	orr.w	r3, r3, #1
 8004af8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004afa:	e00b      	b.n	8004b14 <HAL_RCC_OscConfig+0x324>
 8004afc:	4b58      	ldr	r3, [pc, #352]	@ (8004c60 <HAL_RCC_OscConfig+0x470>)
 8004afe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b00:	4a57      	ldr	r2, [pc, #348]	@ (8004c60 <HAL_RCC_OscConfig+0x470>)
 8004b02:	f023 0301 	bic.w	r3, r3, #1
 8004b06:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b08:	4b55      	ldr	r3, [pc, #340]	@ (8004c60 <HAL_RCC_OscConfig+0x470>)
 8004b0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b0c:	4a54      	ldr	r2, [pc, #336]	@ (8004c60 <HAL_RCC_OscConfig+0x470>)
 8004b0e:	f023 0304 	bic.w	r3, r3, #4
 8004b12:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d015      	beq.n	8004b48 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b1c:	f7fc ff28 	bl	8001970 <HAL_GetTick>
 8004b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b22:	e00a      	b.n	8004b3a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b24:	f7fc ff24 	bl	8001970 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d901      	bls.n	8004b3a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e0cb      	b.n	8004cd2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b3a:	4b49      	ldr	r3, [pc, #292]	@ (8004c60 <HAL_RCC_OscConfig+0x470>)
 8004b3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d0ee      	beq.n	8004b24 <HAL_RCC_OscConfig+0x334>
 8004b46:	e014      	b.n	8004b72 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b48:	f7fc ff12 	bl	8001970 <HAL_GetTick>
 8004b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b4e:	e00a      	b.n	8004b66 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b50:	f7fc ff0e 	bl	8001970 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e0b5      	b.n	8004cd2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b66:	4b3e      	ldr	r3, [pc, #248]	@ (8004c60 <HAL_RCC_OscConfig+0x470>)
 8004b68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b6a:	f003 0302 	and.w	r3, r3, #2
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1ee      	bne.n	8004b50 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b72:	7dfb      	ldrb	r3, [r7, #23]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d105      	bne.n	8004b84 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b78:	4b39      	ldr	r3, [pc, #228]	@ (8004c60 <HAL_RCC_OscConfig+0x470>)
 8004b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b7c:	4a38      	ldr	r2, [pc, #224]	@ (8004c60 <HAL_RCC_OscConfig+0x470>)
 8004b7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b82:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f000 80a1 	beq.w	8004cd0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b8e:	4b34      	ldr	r3, [pc, #208]	@ (8004c60 <HAL_RCC_OscConfig+0x470>)
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f003 030c 	and.w	r3, r3, #12
 8004b96:	2b08      	cmp	r3, #8
 8004b98:	d05c      	beq.n	8004c54 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d141      	bne.n	8004c26 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ba2:	4b31      	ldr	r3, [pc, #196]	@ (8004c68 <HAL_RCC_OscConfig+0x478>)
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba8:	f7fc fee2 	bl	8001970 <HAL_GetTick>
 8004bac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bae:	e008      	b.n	8004bc2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bb0:	f7fc fede 	bl	8001970 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e087      	b.n	8004cd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bc2:	4b27      	ldr	r3, [pc, #156]	@ (8004c60 <HAL_RCC_OscConfig+0x470>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1f0      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	69da      	ldr	r2, [r3, #28]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	431a      	orrs	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bdc:	019b      	lsls	r3, r3, #6
 8004bde:	431a      	orrs	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004be4:	085b      	lsrs	r3, r3, #1
 8004be6:	3b01      	subs	r3, #1
 8004be8:	041b      	lsls	r3, r3, #16
 8004bea:	431a      	orrs	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf0:	061b      	lsls	r3, r3, #24
 8004bf2:	491b      	ldr	r1, [pc, #108]	@ (8004c60 <HAL_RCC_OscConfig+0x470>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bf8:	4b1b      	ldr	r3, [pc, #108]	@ (8004c68 <HAL_RCC_OscConfig+0x478>)
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bfe:	f7fc feb7 	bl	8001970 <HAL_GetTick>
 8004c02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c04:	e008      	b.n	8004c18 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c06:	f7fc feb3 	bl	8001970 <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d901      	bls.n	8004c18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e05c      	b.n	8004cd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c18:	4b11      	ldr	r3, [pc, #68]	@ (8004c60 <HAL_RCC_OscConfig+0x470>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d0f0      	beq.n	8004c06 <HAL_RCC_OscConfig+0x416>
 8004c24:	e054      	b.n	8004cd0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c26:	4b10      	ldr	r3, [pc, #64]	@ (8004c68 <HAL_RCC_OscConfig+0x478>)
 8004c28:	2200      	movs	r2, #0
 8004c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c2c:	f7fc fea0 	bl	8001970 <HAL_GetTick>
 8004c30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c32:	e008      	b.n	8004c46 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c34:	f7fc fe9c 	bl	8001970 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d901      	bls.n	8004c46 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e045      	b.n	8004cd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c46:	4b06      	ldr	r3, [pc, #24]	@ (8004c60 <HAL_RCC_OscConfig+0x470>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1f0      	bne.n	8004c34 <HAL_RCC_OscConfig+0x444>
 8004c52:	e03d      	b.n	8004cd0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d107      	bne.n	8004c6c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e038      	b.n	8004cd2 <HAL_RCC_OscConfig+0x4e2>
 8004c60:	40023800 	.word	0x40023800
 8004c64:	40007000 	.word	0x40007000
 8004c68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c6c:	4b1b      	ldr	r3, [pc, #108]	@ (8004cdc <HAL_RCC_OscConfig+0x4ec>)
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d028      	beq.n	8004ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d121      	bne.n	8004ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d11a      	bne.n	8004ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004ca2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d111      	bne.n	8004ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb2:	085b      	lsrs	r3, r3, #1
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d107      	bne.n	8004ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d001      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e000      	b.n	8004cd2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3718      	adds	r7, #24
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	40023800 	.word	0x40023800

08004ce0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d101      	bne.n	8004cf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e0cc      	b.n	8004e8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cf4:	4b68      	ldr	r3, [pc, #416]	@ (8004e98 <HAL_RCC_ClockConfig+0x1b8>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 030f 	and.w	r3, r3, #15
 8004cfc:	683a      	ldr	r2, [r7, #0]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d90c      	bls.n	8004d1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d02:	4b65      	ldr	r3, [pc, #404]	@ (8004e98 <HAL_RCC_ClockConfig+0x1b8>)
 8004d04:	683a      	ldr	r2, [r7, #0]
 8004d06:	b2d2      	uxtb	r2, r2
 8004d08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d0a:	4b63      	ldr	r3, [pc, #396]	@ (8004e98 <HAL_RCC_ClockConfig+0x1b8>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 030f 	and.w	r3, r3, #15
 8004d12:	683a      	ldr	r2, [r7, #0]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d001      	beq.n	8004d1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e0b8      	b.n	8004e8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0302 	and.w	r3, r3, #2
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d020      	beq.n	8004d6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0304 	and.w	r3, r3, #4
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d005      	beq.n	8004d40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d34:	4b59      	ldr	r3, [pc, #356]	@ (8004e9c <HAL_RCC_ClockConfig+0x1bc>)
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	4a58      	ldr	r2, [pc, #352]	@ (8004e9c <HAL_RCC_ClockConfig+0x1bc>)
 8004d3a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004d3e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0308 	and.w	r3, r3, #8
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d005      	beq.n	8004d58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d4c:	4b53      	ldr	r3, [pc, #332]	@ (8004e9c <HAL_RCC_ClockConfig+0x1bc>)
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	4a52      	ldr	r2, [pc, #328]	@ (8004e9c <HAL_RCC_ClockConfig+0x1bc>)
 8004d52:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004d56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d58:	4b50      	ldr	r3, [pc, #320]	@ (8004e9c <HAL_RCC_ClockConfig+0x1bc>)
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	494d      	ldr	r1, [pc, #308]	@ (8004e9c <HAL_RCC_ClockConfig+0x1bc>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d044      	beq.n	8004e00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d107      	bne.n	8004d8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d7e:	4b47      	ldr	r3, [pc, #284]	@ (8004e9c <HAL_RCC_ClockConfig+0x1bc>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d119      	bne.n	8004dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e07f      	b.n	8004e8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d003      	beq.n	8004d9e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d9a:	2b03      	cmp	r3, #3
 8004d9c:	d107      	bne.n	8004dae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d9e:	4b3f      	ldr	r3, [pc, #252]	@ (8004e9c <HAL_RCC_ClockConfig+0x1bc>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d109      	bne.n	8004dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e06f      	b.n	8004e8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dae:	4b3b      	ldr	r3, [pc, #236]	@ (8004e9c <HAL_RCC_ClockConfig+0x1bc>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0302 	and.w	r3, r3, #2
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e067      	b.n	8004e8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dbe:	4b37      	ldr	r3, [pc, #220]	@ (8004e9c <HAL_RCC_ClockConfig+0x1bc>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f023 0203 	bic.w	r2, r3, #3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	4934      	ldr	r1, [pc, #208]	@ (8004e9c <HAL_RCC_ClockConfig+0x1bc>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004dd0:	f7fc fdce 	bl	8001970 <HAL_GetTick>
 8004dd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dd6:	e00a      	b.n	8004dee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dd8:	f7fc fdca 	bl	8001970 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d901      	bls.n	8004dee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e04f      	b.n	8004e8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dee:	4b2b      	ldr	r3, [pc, #172]	@ (8004e9c <HAL_RCC_ClockConfig+0x1bc>)
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f003 020c 	and.w	r2, r3, #12
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d1eb      	bne.n	8004dd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e00:	4b25      	ldr	r3, [pc, #148]	@ (8004e98 <HAL_RCC_ClockConfig+0x1b8>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 030f 	and.w	r3, r3, #15
 8004e08:	683a      	ldr	r2, [r7, #0]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d20c      	bcs.n	8004e28 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e0e:	4b22      	ldr	r3, [pc, #136]	@ (8004e98 <HAL_RCC_ClockConfig+0x1b8>)
 8004e10:	683a      	ldr	r2, [r7, #0]
 8004e12:	b2d2      	uxtb	r2, r2
 8004e14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e16:	4b20      	ldr	r3, [pc, #128]	@ (8004e98 <HAL_RCC_ClockConfig+0x1b8>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 030f 	and.w	r3, r3, #15
 8004e1e:	683a      	ldr	r2, [r7, #0]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d001      	beq.n	8004e28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e032      	b.n	8004e8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0304 	and.w	r3, r3, #4
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d008      	beq.n	8004e46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e34:	4b19      	ldr	r3, [pc, #100]	@ (8004e9c <HAL_RCC_ClockConfig+0x1bc>)
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	4916      	ldr	r1, [pc, #88]	@ (8004e9c <HAL_RCC_ClockConfig+0x1bc>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0308 	and.w	r3, r3, #8
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d009      	beq.n	8004e66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e52:	4b12      	ldr	r3, [pc, #72]	@ (8004e9c <HAL_RCC_ClockConfig+0x1bc>)
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	00db      	lsls	r3, r3, #3
 8004e60:	490e      	ldr	r1, [pc, #56]	@ (8004e9c <HAL_RCC_ClockConfig+0x1bc>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e66:	f000 f895 	bl	8004f94 <HAL_RCC_GetSysClockFreq>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8004e9c <HAL_RCC_ClockConfig+0x1bc>)
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	091b      	lsrs	r3, r3, #4
 8004e72:	f003 030f 	and.w	r3, r3, #15
 8004e76:	490a      	ldr	r1, [pc, #40]	@ (8004ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8004e78:	5ccb      	ldrb	r3, [r1, r3]
 8004e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e7e:	4a09      	ldr	r2, [pc, #36]	@ (8004ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8004e80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004e82:	4b09      	ldr	r3, [pc, #36]	@ (8004ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7fc fd2e 	bl	80018e8 <HAL_InitTick>

  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3710      	adds	r7, #16
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	40023c00 	.word	0x40023c00
 8004e9c:	40023800 	.word	0x40023800
 8004ea0:	080058b4 	.word	0x080058b4
 8004ea4:	20000004 	.word	0x20000004
 8004ea8:	20000008 	.word	0x20000008

08004eac <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b08c      	sub	sp, #48	@ 0x30
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d129      	bne.n	8004f12 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	61bb      	str	r3, [r7, #24]
 8004ec2:	4b2b      	ldr	r3, [pc, #172]	@ (8004f70 <HAL_RCC_MCOConfig+0xc4>)
 8004ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ec6:	4a2a      	ldr	r2, [pc, #168]	@ (8004f70 <HAL_RCC_MCOConfig+0xc4>)
 8004ec8:	f043 0301 	orr.w	r3, r3, #1
 8004ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ece:	4b28      	ldr	r3, [pc, #160]	@ (8004f70 <HAL_RCC_MCOConfig+0xc4>)
 8004ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	61bb      	str	r3, [r7, #24]
 8004ed8:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8004eda:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004ede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ee0:	2302      	movs	r3, #2
 8004ee2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004eec:	2300      	movs	r3, #0
 8004eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8004ef0:	f107 031c 	add.w	r3, r7, #28
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	481f      	ldr	r0, [pc, #124]	@ (8004f74 <HAL_RCC_MCOConfig+0xc8>)
 8004ef8:	f7fe fd3c 	bl	8003974 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8004efc:	4b1c      	ldr	r3, [pc, #112]	@ (8004f70 <HAL_RCC_MCOConfig+0xc4>)
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 8004f04:	68b9      	ldr	r1, [r7, #8]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	430b      	orrs	r3, r1
 8004f0a:	4919      	ldr	r1, [pc, #100]	@ (8004f70 <HAL_RCC_MCOConfig+0xc4>)
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8004f10:	e029      	b.n	8004f66 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8004f12:	2300      	movs	r3, #0
 8004f14:	617b      	str	r3, [r7, #20]
 8004f16:	4b16      	ldr	r3, [pc, #88]	@ (8004f70 <HAL_RCC_MCOConfig+0xc4>)
 8004f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f1a:	4a15      	ldr	r2, [pc, #84]	@ (8004f70 <HAL_RCC_MCOConfig+0xc4>)
 8004f1c:	f043 0304 	orr.w	r3, r3, #4
 8004f20:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f22:	4b13      	ldr	r3, [pc, #76]	@ (8004f70 <HAL_RCC_MCOConfig+0xc4>)
 8004f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f26:	f003 0304 	and.w	r3, r3, #4
 8004f2a:	617b      	str	r3, [r7, #20]
 8004f2c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8004f2e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004f32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f34:	2302      	movs	r3, #2
 8004f36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004f40:	2300      	movs	r3, #0
 8004f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8004f44:	f107 031c 	add.w	r3, r7, #28
 8004f48:	4619      	mov	r1, r3
 8004f4a:	480b      	ldr	r0, [pc, #44]	@ (8004f78 <HAL_RCC_MCOConfig+0xcc>)
 8004f4c:	f7fe fd12 	bl	8003974 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8004f50:	4b07      	ldr	r3, [pc, #28]	@ (8004f70 <HAL_RCC_MCOConfig+0xc4>)
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	00d9      	lsls	r1, r3, #3
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	430b      	orrs	r3, r1
 8004f60:	4903      	ldr	r1, [pc, #12]	@ (8004f70 <HAL_RCC_MCOConfig+0xc4>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	608b      	str	r3, [r1, #8]
}
 8004f66:	bf00      	nop
 8004f68:	3730      	adds	r7, #48	@ 0x30
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	40023800 	.word	0x40023800
 8004f74:	40020000 	.word	0x40020000
 8004f78:	40020800 	.word	0x40020800

08004f7c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004f80:	4b03      	ldr	r3, [pc, #12]	@ (8004f90 <HAL_RCC_EnableCSS+0x14>)
 8004f82:	2201      	movs	r2, #1
 8004f84:	601a      	str	r2, [r3, #0]
}
 8004f86:	bf00      	nop
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr
 8004f90:	4247004c 	.word	0x4247004c

08004f94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f98:	b094      	sub	sp, #80	@ 0x50
 8004f9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fac:	4b79      	ldr	r3, [pc, #484]	@ (8005194 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f003 030c 	and.w	r3, r3, #12
 8004fb4:	2b08      	cmp	r3, #8
 8004fb6:	d00d      	beq.n	8004fd4 <HAL_RCC_GetSysClockFreq+0x40>
 8004fb8:	2b08      	cmp	r3, #8
 8004fba:	f200 80e1 	bhi.w	8005180 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d002      	beq.n	8004fc8 <HAL_RCC_GetSysClockFreq+0x34>
 8004fc2:	2b04      	cmp	r3, #4
 8004fc4:	d003      	beq.n	8004fce <HAL_RCC_GetSysClockFreq+0x3a>
 8004fc6:	e0db      	b.n	8005180 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fc8:	4b73      	ldr	r3, [pc, #460]	@ (8005198 <HAL_RCC_GetSysClockFreq+0x204>)
 8004fca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004fcc:	e0db      	b.n	8005186 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004fce:	4b73      	ldr	r3, [pc, #460]	@ (800519c <HAL_RCC_GetSysClockFreq+0x208>)
 8004fd0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004fd2:	e0d8      	b.n	8005186 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fd4:	4b6f      	ldr	r3, [pc, #444]	@ (8005194 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004fdc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fde:	4b6d      	ldr	r3, [pc, #436]	@ (8005194 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d063      	beq.n	80050b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fea:	4b6a      	ldr	r3, [pc, #424]	@ (8005194 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	099b      	lsrs	r3, r3, #6
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ff4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ff8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ffc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ffe:	2300      	movs	r3, #0
 8005000:	637b      	str	r3, [r7, #52]	@ 0x34
 8005002:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005006:	4622      	mov	r2, r4
 8005008:	462b      	mov	r3, r5
 800500a:	f04f 0000 	mov.w	r0, #0
 800500e:	f04f 0100 	mov.w	r1, #0
 8005012:	0159      	lsls	r1, r3, #5
 8005014:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005018:	0150      	lsls	r0, r2, #5
 800501a:	4602      	mov	r2, r0
 800501c:	460b      	mov	r3, r1
 800501e:	4621      	mov	r1, r4
 8005020:	1a51      	subs	r1, r2, r1
 8005022:	6139      	str	r1, [r7, #16]
 8005024:	4629      	mov	r1, r5
 8005026:	eb63 0301 	sbc.w	r3, r3, r1
 800502a:	617b      	str	r3, [r7, #20]
 800502c:	f04f 0200 	mov.w	r2, #0
 8005030:	f04f 0300 	mov.w	r3, #0
 8005034:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005038:	4659      	mov	r1, fp
 800503a:	018b      	lsls	r3, r1, #6
 800503c:	4651      	mov	r1, sl
 800503e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005042:	4651      	mov	r1, sl
 8005044:	018a      	lsls	r2, r1, #6
 8005046:	4651      	mov	r1, sl
 8005048:	ebb2 0801 	subs.w	r8, r2, r1
 800504c:	4659      	mov	r1, fp
 800504e:	eb63 0901 	sbc.w	r9, r3, r1
 8005052:	f04f 0200 	mov.w	r2, #0
 8005056:	f04f 0300 	mov.w	r3, #0
 800505a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800505e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005062:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005066:	4690      	mov	r8, r2
 8005068:	4699      	mov	r9, r3
 800506a:	4623      	mov	r3, r4
 800506c:	eb18 0303 	adds.w	r3, r8, r3
 8005070:	60bb      	str	r3, [r7, #8]
 8005072:	462b      	mov	r3, r5
 8005074:	eb49 0303 	adc.w	r3, r9, r3
 8005078:	60fb      	str	r3, [r7, #12]
 800507a:	f04f 0200 	mov.w	r2, #0
 800507e:	f04f 0300 	mov.w	r3, #0
 8005082:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005086:	4629      	mov	r1, r5
 8005088:	024b      	lsls	r3, r1, #9
 800508a:	4621      	mov	r1, r4
 800508c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005090:	4621      	mov	r1, r4
 8005092:	024a      	lsls	r2, r1, #9
 8005094:	4610      	mov	r0, r2
 8005096:	4619      	mov	r1, r3
 8005098:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800509a:	2200      	movs	r2, #0
 800509c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800509e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80050a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80050a4:	f7fb f8a2 	bl	80001ec <__aeabi_uldivmod>
 80050a8:	4602      	mov	r2, r0
 80050aa:	460b      	mov	r3, r1
 80050ac:	4613      	mov	r3, r2
 80050ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050b0:	e058      	b.n	8005164 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050b2:	4b38      	ldr	r3, [pc, #224]	@ (8005194 <HAL_RCC_GetSysClockFreq+0x200>)
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	099b      	lsrs	r3, r3, #6
 80050b8:	2200      	movs	r2, #0
 80050ba:	4618      	mov	r0, r3
 80050bc:	4611      	mov	r1, r2
 80050be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80050c2:	623b      	str	r3, [r7, #32]
 80050c4:	2300      	movs	r3, #0
 80050c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80050c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80050cc:	4642      	mov	r2, r8
 80050ce:	464b      	mov	r3, r9
 80050d0:	f04f 0000 	mov.w	r0, #0
 80050d4:	f04f 0100 	mov.w	r1, #0
 80050d8:	0159      	lsls	r1, r3, #5
 80050da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050de:	0150      	lsls	r0, r2, #5
 80050e0:	4602      	mov	r2, r0
 80050e2:	460b      	mov	r3, r1
 80050e4:	4641      	mov	r1, r8
 80050e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80050ea:	4649      	mov	r1, r9
 80050ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80050f0:	f04f 0200 	mov.w	r2, #0
 80050f4:	f04f 0300 	mov.w	r3, #0
 80050f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80050fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005100:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005104:	ebb2 040a 	subs.w	r4, r2, sl
 8005108:	eb63 050b 	sbc.w	r5, r3, fp
 800510c:	f04f 0200 	mov.w	r2, #0
 8005110:	f04f 0300 	mov.w	r3, #0
 8005114:	00eb      	lsls	r3, r5, #3
 8005116:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800511a:	00e2      	lsls	r2, r4, #3
 800511c:	4614      	mov	r4, r2
 800511e:	461d      	mov	r5, r3
 8005120:	4643      	mov	r3, r8
 8005122:	18e3      	adds	r3, r4, r3
 8005124:	603b      	str	r3, [r7, #0]
 8005126:	464b      	mov	r3, r9
 8005128:	eb45 0303 	adc.w	r3, r5, r3
 800512c:	607b      	str	r3, [r7, #4]
 800512e:	f04f 0200 	mov.w	r2, #0
 8005132:	f04f 0300 	mov.w	r3, #0
 8005136:	e9d7 4500 	ldrd	r4, r5, [r7]
 800513a:	4629      	mov	r1, r5
 800513c:	028b      	lsls	r3, r1, #10
 800513e:	4621      	mov	r1, r4
 8005140:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005144:	4621      	mov	r1, r4
 8005146:	028a      	lsls	r2, r1, #10
 8005148:	4610      	mov	r0, r2
 800514a:	4619      	mov	r1, r3
 800514c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800514e:	2200      	movs	r2, #0
 8005150:	61bb      	str	r3, [r7, #24]
 8005152:	61fa      	str	r2, [r7, #28]
 8005154:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005158:	f7fb f848 	bl	80001ec <__aeabi_uldivmod>
 800515c:	4602      	mov	r2, r0
 800515e:	460b      	mov	r3, r1
 8005160:	4613      	mov	r3, r2
 8005162:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005164:	4b0b      	ldr	r3, [pc, #44]	@ (8005194 <HAL_RCC_GetSysClockFreq+0x200>)
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	0c1b      	lsrs	r3, r3, #16
 800516a:	f003 0303 	and.w	r3, r3, #3
 800516e:	3301      	adds	r3, #1
 8005170:	005b      	lsls	r3, r3, #1
 8005172:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005174:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005176:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005178:	fbb2 f3f3 	udiv	r3, r2, r3
 800517c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800517e:	e002      	b.n	8005186 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005180:	4b05      	ldr	r3, [pc, #20]	@ (8005198 <HAL_RCC_GetSysClockFreq+0x204>)
 8005182:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005184:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005186:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005188:	4618      	mov	r0, r3
 800518a:	3750      	adds	r7, #80	@ 0x50
 800518c:	46bd      	mov	sp, r7
 800518e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005192:	bf00      	nop
 8005194:	40023800 	.word	0x40023800
 8005198:	00f42400 	.word	0x00f42400
 800519c:	007a1200 	.word	0x007a1200

080051a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051a0:	b480      	push	{r7}
 80051a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051a4:	4b03      	ldr	r3, [pc, #12]	@ (80051b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80051a6:	681b      	ldr	r3, [r3, #0]
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	20000004 	.word	0x20000004

080051b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80051bc:	f7ff fff0 	bl	80051a0 <HAL_RCC_GetHCLKFreq>
 80051c0:	4602      	mov	r2, r0
 80051c2:	4b05      	ldr	r3, [pc, #20]	@ (80051d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	0a9b      	lsrs	r3, r3, #10
 80051c8:	f003 0307 	and.w	r3, r3, #7
 80051cc:	4903      	ldr	r1, [pc, #12]	@ (80051dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80051ce:	5ccb      	ldrb	r3, [r1, r3]
 80051d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	40023800 	.word	0x40023800
 80051dc:	080058c4 	.word	0x080058c4

080051e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d101      	bne.n	80051f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e07b      	b.n	80052ea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d108      	bne.n	800520c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005202:	d009      	beq.n	8005218 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	61da      	str	r2, [r3, #28]
 800520a:	e005      	b.n	8005218 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b00      	cmp	r3, #0
 8005228:	d106      	bne.n	8005238 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7fc fa28 	bl	8001688 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2202      	movs	r2, #2
 800523c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800524e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005260:	431a      	orrs	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800526a:	431a      	orrs	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	f003 0302 	and.w	r3, r3, #2
 8005274:	431a      	orrs	r2, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	695b      	ldr	r3, [r3, #20]
 800527a:	f003 0301 	and.w	r3, r3, #1
 800527e:	431a      	orrs	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005288:	431a      	orrs	r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	69db      	ldr	r3, [r3, #28]
 800528e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005292:	431a      	orrs	r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a1b      	ldr	r3, [r3, #32]
 8005298:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800529c:	ea42 0103 	orr.w	r1, r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	430a      	orrs	r2, r1
 80052ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	0c1b      	lsrs	r3, r3, #16
 80052b6:	f003 0104 	and.w	r1, r3, #4
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052be:	f003 0210 	and.w	r2, r3, #16
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	430a      	orrs	r2, r1
 80052c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	69da      	ldr	r2, [r3, #28]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80052d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3708      	adds	r7, #8
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}

080052f2 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052f2:	b580      	push	{r7, lr}
 80052f4:	b088      	sub	sp, #32
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	60f8      	str	r0, [r7, #12]
 80052fa:	60b9      	str	r1, [r7, #8]
 80052fc:	603b      	str	r3, [r7, #0]
 80052fe:	4613      	mov	r3, r2
 8005300:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005302:	f7fc fb35 	bl	8001970 <HAL_GetTick>
 8005306:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005308:	88fb      	ldrh	r3, [r7, #6]
 800530a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005312:	b2db      	uxtb	r3, r3
 8005314:	2b01      	cmp	r3, #1
 8005316:	d001      	beq.n	800531c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005318:	2302      	movs	r3, #2
 800531a:	e12a      	b.n	8005572 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d002      	beq.n	8005328 <HAL_SPI_Transmit+0x36>
 8005322:	88fb      	ldrh	r3, [r7, #6]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d101      	bne.n	800532c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e122      	b.n	8005572 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005332:	2b01      	cmp	r3, #1
 8005334:	d101      	bne.n	800533a <HAL_SPI_Transmit+0x48>
 8005336:	2302      	movs	r3, #2
 8005338:	e11b      	b.n	8005572 <HAL_SPI_Transmit+0x280>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2201      	movs	r2, #1
 800533e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2203      	movs	r2, #3
 8005346:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	68ba      	ldr	r2, [r7, #8]
 8005354:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	88fa      	ldrh	r2, [r7, #6]
 800535a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	88fa      	ldrh	r2, [r7, #6]
 8005360:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2200      	movs	r2, #0
 8005366:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2200      	movs	r2, #0
 800536c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005388:	d10f      	bne.n	80053aa <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005398:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80053a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053b4:	2b40      	cmp	r3, #64	@ 0x40
 80053b6:	d007      	beq.n	80053c8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80053c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053d0:	d152      	bne.n	8005478 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d002      	beq.n	80053e0 <HAL_SPI_Transmit+0xee>
 80053da:	8b7b      	ldrh	r3, [r7, #26]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d145      	bne.n	800546c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053e4:	881a      	ldrh	r2, [r3, #0]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053f0:	1c9a      	adds	r2, r3, #2
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	3b01      	subs	r3, #1
 80053fe:	b29a      	uxth	r2, r3
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005404:	e032      	b.n	800546c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f003 0302 	and.w	r3, r3, #2
 8005410:	2b02      	cmp	r3, #2
 8005412:	d112      	bne.n	800543a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005418:	881a      	ldrh	r2, [r3, #0]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005424:	1c9a      	adds	r2, r3, #2
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800542e:	b29b      	uxth	r3, r3
 8005430:	3b01      	subs	r3, #1
 8005432:	b29a      	uxth	r2, r3
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005438:	e018      	b.n	800546c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800543a:	f7fc fa99 	bl	8001970 <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	683a      	ldr	r2, [r7, #0]
 8005446:	429a      	cmp	r2, r3
 8005448:	d803      	bhi.n	8005452 <HAL_SPI_Transmit+0x160>
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005450:	d102      	bne.n	8005458 <HAL_SPI_Transmit+0x166>
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d109      	bne.n	800546c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e082      	b.n	8005572 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005470:	b29b      	uxth	r3, r3
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1c7      	bne.n	8005406 <HAL_SPI_Transmit+0x114>
 8005476:	e053      	b.n	8005520 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d002      	beq.n	8005486 <HAL_SPI_Transmit+0x194>
 8005480:	8b7b      	ldrh	r3, [r7, #26]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d147      	bne.n	8005516 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	330c      	adds	r3, #12
 8005490:	7812      	ldrb	r2, [r2, #0]
 8005492:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005498:	1c5a      	adds	r2, r3, #1
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	3b01      	subs	r3, #1
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80054ac:	e033      	b.n	8005516 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f003 0302 	and.w	r3, r3, #2
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d113      	bne.n	80054e4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	330c      	adds	r3, #12
 80054c6:	7812      	ldrb	r2, [r2, #0]
 80054c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ce:	1c5a      	adds	r2, r3, #1
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054d8:	b29b      	uxth	r3, r3
 80054da:	3b01      	subs	r3, #1
 80054dc:	b29a      	uxth	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80054e2:	e018      	b.n	8005516 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054e4:	f7fc fa44 	bl	8001970 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	683a      	ldr	r2, [r7, #0]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d803      	bhi.n	80054fc <HAL_SPI_Transmit+0x20a>
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054fa:	d102      	bne.n	8005502 <HAL_SPI_Transmit+0x210>
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d109      	bne.n	8005516 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2201      	movs	r2, #1
 8005506:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e02d      	b.n	8005572 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800551a:	b29b      	uxth	r3, r3
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1c6      	bne.n	80054ae <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005520:	69fa      	ldr	r2, [r7, #28]
 8005522:	6839      	ldr	r1, [r7, #0]
 8005524:	68f8      	ldr	r0, [r7, #12]
 8005526:	f000 f8b1 	bl	800568c <SPI_EndRxTxTransaction>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d002      	beq.n	8005536 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2220      	movs	r2, #32
 8005534:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10a      	bne.n	8005554 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800553e:	2300      	movs	r3, #0
 8005540:	617b      	str	r3, [r7, #20]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	617b      	str	r3, [r7, #20]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	617b      	str	r3, [r7, #20]
 8005552:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005568:	2b00      	cmp	r3, #0
 800556a:	d001      	beq.n	8005570 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e000      	b.n	8005572 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005570:	2300      	movs	r3, #0
  }
}
 8005572:	4618      	mov	r0, r3
 8005574:	3720      	adds	r7, #32
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
	...

0800557c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b088      	sub	sp, #32
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	603b      	str	r3, [r7, #0]
 8005588:	4613      	mov	r3, r2
 800558a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800558c:	f7fc f9f0 	bl	8001970 <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005594:	1a9b      	subs	r3, r3, r2
 8005596:	683a      	ldr	r2, [r7, #0]
 8005598:	4413      	add	r3, r2
 800559a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800559c:	f7fc f9e8 	bl	8001970 <HAL_GetTick>
 80055a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80055a2:	4b39      	ldr	r3, [pc, #228]	@ (8005688 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	015b      	lsls	r3, r3, #5
 80055a8:	0d1b      	lsrs	r3, r3, #20
 80055aa:	69fa      	ldr	r2, [r7, #28]
 80055ac:	fb02 f303 	mul.w	r3, r2, r3
 80055b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055b2:	e055      	b.n	8005660 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ba:	d051      	beq.n	8005660 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80055bc:	f7fc f9d8 	bl	8001970 <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	69fa      	ldr	r2, [r7, #28]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d902      	bls.n	80055d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d13d      	bne.n	800564e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	685a      	ldr	r2, [r3, #4]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80055e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055ea:	d111      	bne.n	8005610 <SPI_WaitFlagStateUntilTimeout+0x94>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055f4:	d004      	beq.n	8005600 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055fe:	d107      	bne.n	8005610 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800560e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005614:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005618:	d10f      	bne.n	800563a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005628:	601a      	str	r2, [r3, #0]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005638:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2201      	movs	r2, #1
 800563e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e018      	b.n	8005680 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d102      	bne.n	800565a <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8005654:	2300      	movs	r3, #0
 8005656:	61fb      	str	r3, [r7, #28]
 8005658:	e002      	b.n	8005660 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	3b01      	subs	r3, #1
 800565e:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	689a      	ldr	r2, [r3, #8]
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	4013      	ands	r3, r2
 800566a:	68ba      	ldr	r2, [r7, #8]
 800566c:	429a      	cmp	r2, r3
 800566e:	bf0c      	ite	eq
 8005670:	2301      	moveq	r3, #1
 8005672:	2300      	movne	r3, #0
 8005674:	b2db      	uxtb	r3, r3
 8005676:	461a      	mov	r2, r3
 8005678:	79fb      	ldrb	r3, [r7, #7]
 800567a:	429a      	cmp	r2, r3
 800567c:	d19a      	bne.n	80055b4 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800567e:	2300      	movs	r3, #0
}
 8005680:	4618      	mov	r0, r3
 8005682:	3720      	adds	r7, #32
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	20000004 	.word	0x20000004

0800568c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b088      	sub	sp, #32
 8005690:	af02      	add	r7, sp, #8
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	9300      	str	r3, [sp, #0]
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	2201      	movs	r2, #1
 80056a0:	2102      	movs	r1, #2
 80056a2:	68f8      	ldr	r0, [r7, #12]
 80056a4:	f7ff ff6a 	bl	800557c <SPI_WaitFlagStateUntilTimeout>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d007      	beq.n	80056be <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056b2:	f043 0220 	orr.w	r2, r3, #32
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e032      	b.n	8005724 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80056be:	4b1b      	ldr	r3, [pc, #108]	@ (800572c <SPI_EndRxTxTransaction+0xa0>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a1b      	ldr	r2, [pc, #108]	@ (8005730 <SPI_EndRxTxTransaction+0xa4>)
 80056c4:	fba2 2303 	umull	r2, r3, r2, r3
 80056c8:	0d5b      	lsrs	r3, r3, #21
 80056ca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80056ce:	fb02 f303 	mul.w	r3, r2, r3
 80056d2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056dc:	d112      	bne.n	8005704 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	9300      	str	r3, [sp, #0]
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	2200      	movs	r2, #0
 80056e6:	2180      	movs	r1, #128	@ 0x80
 80056e8:	68f8      	ldr	r0, [r7, #12]
 80056ea:	f7ff ff47 	bl	800557c <SPI_WaitFlagStateUntilTimeout>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d016      	beq.n	8005722 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056f8:	f043 0220 	orr.w	r2, r3, #32
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e00f      	b.n	8005724 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00a      	beq.n	8005720 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	3b01      	subs	r3, #1
 800570e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800571a:	2b80      	cmp	r3, #128	@ 0x80
 800571c:	d0f2      	beq.n	8005704 <SPI_EndRxTxTransaction+0x78>
 800571e:	e000      	b.n	8005722 <SPI_EndRxTxTransaction+0x96>
        break;
 8005720:	bf00      	nop
  }

  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3718      	adds	r7, #24
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	20000004 	.word	0x20000004
 8005730:	165e9f81 	.word	0x165e9f81

08005734 <memset>:
 8005734:	4402      	add	r2, r0
 8005736:	4603      	mov	r3, r0
 8005738:	4293      	cmp	r3, r2
 800573a:	d100      	bne.n	800573e <memset+0xa>
 800573c:	4770      	bx	lr
 800573e:	f803 1b01 	strb.w	r1, [r3], #1
 8005742:	e7f9      	b.n	8005738 <memset+0x4>

08005744 <__libc_init_array>:
 8005744:	b570      	push	{r4, r5, r6, lr}
 8005746:	4d0d      	ldr	r5, [pc, #52]	@ (800577c <__libc_init_array+0x38>)
 8005748:	4c0d      	ldr	r4, [pc, #52]	@ (8005780 <__libc_init_array+0x3c>)
 800574a:	1b64      	subs	r4, r4, r5
 800574c:	10a4      	asrs	r4, r4, #2
 800574e:	2600      	movs	r6, #0
 8005750:	42a6      	cmp	r6, r4
 8005752:	d109      	bne.n	8005768 <__libc_init_array+0x24>
 8005754:	4d0b      	ldr	r5, [pc, #44]	@ (8005784 <__libc_init_array+0x40>)
 8005756:	4c0c      	ldr	r4, [pc, #48]	@ (8005788 <__libc_init_array+0x44>)
 8005758:	f000 f826 	bl	80057a8 <_init>
 800575c:	1b64      	subs	r4, r4, r5
 800575e:	10a4      	asrs	r4, r4, #2
 8005760:	2600      	movs	r6, #0
 8005762:	42a6      	cmp	r6, r4
 8005764:	d105      	bne.n	8005772 <__libc_init_array+0x2e>
 8005766:	bd70      	pop	{r4, r5, r6, pc}
 8005768:	f855 3b04 	ldr.w	r3, [r5], #4
 800576c:	4798      	blx	r3
 800576e:	3601      	adds	r6, #1
 8005770:	e7ee      	b.n	8005750 <__libc_init_array+0xc>
 8005772:	f855 3b04 	ldr.w	r3, [r5], #4
 8005776:	4798      	blx	r3
 8005778:	3601      	adds	r6, #1
 800577a:	e7f2      	b.n	8005762 <__libc_init_array+0x1e>
 800577c:	08005928 	.word	0x08005928
 8005780:	08005928 	.word	0x08005928
 8005784:	08005928 	.word	0x08005928
 8005788:	0800592c 	.word	0x0800592c

0800578c <memcpy>:
 800578c:	440a      	add	r2, r1
 800578e:	4291      	cmp	r1, r2
 8005790:	f100 33ff 	add.w	r3, r0, #4294967295
 8005794:	d100      	bne.n	8005798 <memcpy+0xc>
 8005796:	4770      	bx	lr
 8005798:	b510      	push	{r4, lr}
 800579a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800579e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057a2:	4291      	cmp	r1, r2
 80057a4:	d1f9      	bne.n	800579a <memcpy+0xe>
 80057a6:	bd10      	pop	{r4, pc}

080057a8 <_init>:
 80057a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057aa:	bf00      	nop
 80057ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ae:	bc08      	pop	{r3}
 80057b0:	469e      	mov	lr, r3
 80057b2:	4770      	bx	lr

080057b4 <_fini>:
 80057b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057b6:	bf00      	nop
 80057b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ba:	bc08      	pop	{r3}
 80057bc:	469e      	mov	lr, r3
 80057be:	4770      	bx	lr
