
CTM_capture_the_moment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ac0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08005c70  08005c70  00006c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cd0  08005cd0  00007060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005cd0  08005cd0  00006cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005cd8  08005cd8  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cd8  08005cd8  00006cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005cdc  08005cdc  00006cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005ce0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007060  2**0
                  CONTENTS
 10 .bss          00004cc0  20000060  20000060  00007060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004d20  20004d20  00007060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b715  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a8d  00000000  00000000  000227a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001830  00000000  00000000  00026238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012d3  00000000  00000000  00027a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003d74  00000000  00000000  00028d3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bcd7  00000000  00000000  0002caaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e98e9  00000000  00000000  00048786  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013206f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000069b4  00000000  00000000  001320b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  00138a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005c58 	.word	0x08005c58

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	08005c58 	.word	0x08005c58

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b988 	b.w	8000518 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	468e      	mov	lr, r1
 8000228:	4604      	mov	r4, r0
 800022a:	4688      	mov	r8, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d962      	bls.n	80002fc <__udivmoddi4+0xdc>
 8000236:	fab2 f682 	clz	r6, r2
 800023a:	b14e      	cbz	r6, 8000250 <__udivmoddi4+0x30>
 800023c:	f1c6 0320 	rsb	r3, r6, #32
 8000240:	fa01 f806 	lsl.w	r8, r1, r6
 8000244:	fa20 f303 	lsr.w	r3, r0, r3
 8000248:	40b7      	lsls	r7, r6
 800024a:	ea43 0808 	orr.w	r8, r3, r8
 800024e:	40b4      	lsls	r4, r6
 8000250:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000254:	fa1f fc87 	uxth.w	ip, r7
 8000258:	fbb8 f1fe 	udiv	r1, r8, lr
 800025c:	0c23      	lsrs	r3, r4, #16
 800025e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000262:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000266:	fb01 f20c 	mul.w	r2, r1, ip
 800026a:	429a      	cmp	r2, r3
 800026c:	d909      	bls.n	8000282 <__udivmoddi4+0x62>
 800026e:	18fb      	adds	r3, r7, r3
 8000270:	f101 30ff 	add.w	r0, r1, #4294967295
 8000274:	f080 80ea 	bcs.w	800044c <__udivmoddi4+0x22c>
 8000278:	429a      	cmp	r2, r3
 800027a:	f240 80e7 	bls.w	800044c <__udivmoddi4+0x22c>
 800027e:	3902      	subs	r1, #2
 8000280:	443b      	add	r3, r7
 8000282:	1a9a      	subs	r2, r3, r2
 8000284:	b2a3      	uxth	r3, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000292:	fb00 fc0c 	mul.w	ip, r0, ip
 8000296:	459c      	cmp	ip, r3
 8000298:	d909      	bls.n	80002ae <__udivmoddi4+0x8e>
 800029a:	18fb      	adds	r3, r7, r3
 800029c:	f100 32ff 	add.w	r2, r0, #4294967295
 80002a0:	f080 80d6 	bcs.w	8000450 <__udivmoddi4+0x230>
 80002a4:	459c      	cmp	ip, r3
 80002a6:	f240 80d3 	bls.w	8000450 <__udivmoddi4+0x230>
 80002aa:	443b      	add	r3, r7
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b2:	eba3 030c 	sub.w	r3, r3, ip
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40f3      	lsrs	r3, r6
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xb6>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb0>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa2>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x14c>
 80002de:	4573      	cmp	r3, lr
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xc8>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 8105 	bhi.w	80004f2 <__udivmoddi4+0x2d2>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	4690      	mov	r8, r2
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	d0e5      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002f6:	e9c5 4800 	strd	r4, r8, [r5]
 80002fa:	e7e2      	b.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f000 8090 	beq.w	8000422 <__udivmoddi4+0x202>
 8000302:	fab2 f682 	clz	r6, r2
 8000306:	2e00      	cmp	r6, #0
 8000308:	f040 80a4 	bne.w	8000454 <__udivmoddi4+0x234>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	0c03      	lsrs	r3, r0, #16
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	b280      	uxth	r0, r0
 8000316:	b2bc      	uxth	r4, r7
 8000318:	2101      	movs	r1, #1
 800031a:	fbb2 fcfe 	udiv	ip, r2, lr
 800031e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000322:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000326:	fb04 f20c 	mul.w	r2, r4, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d907      	bls.n	800033e <__udivmoddi4+0x11e>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000334:	d202      	bcs.n	800033c <__udivmoddi4+0x11c>
 8000336:	429a      	cmp	r2, r3
 8000338:	f200 80e0 	bhi.w	80004fc <__udivmoddi4+0x2dc>
 800033c:	46c4      	mov	ip, r8
 800033e:	1a9b      	subs	r3, r3, r2
 8000340:	fbb3 f2fe 	udiv	r2, r3, lr
 8000344:	fb0e 3312 	mls	r3, lr, r2, r3
 8000348:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800034c:	fb02 f404 	mul.w	r4, r2, r4
 8000350:	429c      	cmp	r4, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x144>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f102 30ff 	add.w	r0, r2, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x142>
 800035c:	429c      	cmp	r4, r3
 800035e:	f200 80ca 	bhi.w	80004f6 <__udivmoddi4+0x2d6>
 8000362:	4602      	mov	r2, r0
 8000364:	1b1b      	subs	r3, r3, r4
 8000366:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x98>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa0e f401 	lsl.w	r4, lr, r1
 800037c:	fa20 f306 	lsr.w	r3, r0, r6
 8000380:	fa2e fe06 	lsr.w	lr, lr, r6
 8000384:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000388:	4323      	orrs	r3, r4
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	fa1f fc87 	uxth.w	ip, r7
 8000392:	fbbe f0f9 	udiv	r0, lr, r9
 8000396:	0c1c      	lsrs	r4, r3, #16
 8000398:	fb09 ee10 	mls	lr, r9, r0, lr
 800039c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a4:	45a6      	cmp	lr, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x1a0>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 3aff 	add.w	sl, r0, #4294967295
 80003b2:	f080 809c 	bcs.w	80004ee <__udivmoddi4+0x2ce>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f240 8099 	bls.w	80004ee <__udivmoddi4+0x2ce>
 80003bc:	3802      	subs	r0, #2
 80003be:	443c      	add	r4, r7
 80003c0:	eba4 040e 	sub.w	r4, r4, lr
 80003c4:	fa1f fe83 	uxth.w	lr, r3
 80003c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003cc:	fb09 4413 	mls	r4, r9, r3, r4
 80003d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d8:	45a4      	cmp	ip, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x1ce>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f103 3eff 	add.w	lr, r3, #4294967295
 80003e2:	f080 8082 	bcs.w	80004ea <__udivmoddi4+0x2ca>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d97f      	bls.n	80004ea <__udivmoddi4+0x2ca>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003f2:	eba4 040c 	sub.w	r4, r4, ip
 80003f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003fa:	4564      	cmp	r4, ip
 80003fc:	4673      	mov	r3, lr
 80003fe:	46e1      	mov	r9, ip
 8000400:	d362      	bcc.n	80004c8 <__udivmoddi4+0x2a8>
 8000402:	d05f      	beq.n	80004c4 <__udivmoddi4+0x2a4>
 8000404:	b15d      	cbz	r5, 800041e <__udivmoddi4+0x1fe>
 8000406:	ebb8 0203 	subs.w	r2, r8, r3
 800040a:	eb64 0409 	sbc.w	r4, r4, r9
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	fa22 f301 	lsr.w	r3, r2, r1
 8000416:	431e      	orrs	r6, r3
 8000418:	40cc      	lsrs	r4, r1
 800041a:	e9c5 6400 	strd	r6, r4, [r5]
 800041e:	2100      	movs	r1, #0
 8000420:	e74f      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000422:	fbb1 fcf2 	udiv	ip, r1, r2
 8000426:	0c01      	lsrs	r1, r0, #16
 8000428:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800042c:	b280      	uxth	r0, r0
 800042e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000432:	463b      	mov	r3, r7
 8000434:	4638      	mov	r0, r7
 8000436:	463c      	mov	r4, r7
 8000438:	46b8      	mov	r8, r7
 800043a:	46be      	mov	lr, r7
 800043c:	2620      	movs	r6, #32
 800043e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000442:	eba2 0208 	sub.w	r2, r2, r8
 8000446:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800044a:	e766      	b.n	800031a <__udivmoddi4+0xfa>
 800044c:	4601      	mov	r1, r0
 800044e:	e718      	b.n	8000282 <__udivmoddi4+0x62>
 8000450:	4610      	mov	r0, r2
 8000452:	e72c      	b.n	80002ae <__udivmoddi4+0x8e>
 8000454:	f1c6 0220 	rsb	r2, r6, #32
 8000458:	fa2e f302 	lsr.w	r3, lr, r2
 800045c:	40b7      	lsls	r7, r6
 800045e:	40b1      	lsls	r1, r6
 8000460:	fa20 f202 	lsr.w	r2, r0, r2
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	430a      	orrs	r2, r1
 800046a:	fbb3 f8fe 	udiv	r8, r3, lr
 800046e:	b2bc      	uxth	r4, r7
 8000470:	fb0e 3318 	mls	r3, lr, r8, r3
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb08 f904 	mul.w	r9, r8, r4
 800047e:	40b0      	lsls	r0, r6
 8000480:	4589      	cmp	r9, r1
 8000482:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000486:	b280      	uxth	r0, r0
 8000488:	d93e      	bls.n	8000508 <__udivmoddi4+0x2e8>
 800048a:	1879      	adds	r1, r7, r1
 800048c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000490:	d201      	bcs.n	8000496 <__udivmoddi4+0x276>
 8000492:	4589      	cmp	r9, r1
 8000494:	d81f      	bhi.n	80004d6 <__udivmoddi4+0x2b6>
 8000496:	eba1 0109 	sub.w	r1, r1, r9
 800049a:	fbb1 f9fe 	udiv	r9, r1, lr
 800049e:	fb09 f804 	mul.w	r8, r9, r4
 80004a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a6:	b292      	uxth	r2, r2
 80004a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004ac:	4542      	cmp	r2, r8
 80004ae:	d229      	bcs.n	8000504 <__udivmoddi4+0x2e4>
 80004b0:	18ba      	adds	r2, r7, r2
 80004b2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004b6:	d2c4      	bcs.n	8000442 <__udivmoddi4+0x222>
 80004b8:	4542      	cmp	r2, r8
 80004ba:	d2c2      	bcs.n	8000442 <__udivmoddi4+0x222>
 80004bc:	f1a9 0102 	sub.w	r1, r9, #2
 80004c0:	443a      	add	r2, r7
 80004c2:	e7be      	b.n	8000442 <__udivmoddi4+0x222>
 80004c4:	45f0      	cmp	r8, lr
 80004c6:	d29d      	bcs.n	8000404 <__udivmoddi4+0x1e4>
 80004c8:	ebbe 0302 	subs.w	r3, lr, r2
 80004cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004d0:	3801      	subs	r0, #1
 80004d2:	46e1      	mov	r9, ip
 80004d4:	e796      	b.n	8000404 <__udivmoddi4+0x1e4>
 80004d6:	eba7 0909 	sub.w	r9, r7, r9
 80004da:	4449      	add	r1, r9
 80004dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e4:	fb09 f804 	mul.w	r8, r9, r4
 80004e8:	e7db      	b.n	80004a2 <__udivmoddi4+0x282>
 80004ea:	4673      	mov	r3, lr
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1ce>
 80004ee:	4650      	mov	r0, sl
 80004f0:	e766      	b.n	80003c0 <__udivmoddi4+0x1a0>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e6fd      	b.n	80002f2 <__udivmoddi4+0xd2>
 80004f6:	443b      	add	r3, r7
 80004f8:	3a02      	subs	r2, #2
 80004fa:	e733      	b.n	8000364 <__udivmoddi4+0x144>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	443b      	add	r3, r7
 8000502:	e71c      	b.n	800033e <__udivmoddi4+0x11e>
 8000504:	4649      	mov	r1, r9
 8000506:	e79c      	b.n	8000442 <__udivmoddi4+0x222>
 8000508:	eba1 0109 	sub.w	r1, r1, r9
 800050c:	46c4      	mov	ip, r8
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fb09 f804 	mul.w	r8, r9, r4
 8000516:	e7c4      	b.n	80004a2 <__udivmoddi4+0x282>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f000 fe20 	bl	8001164 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f81e 	bl	8000564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f000 f968 	bl	80007fc <MX_GPIO_Init>
  MX_DCMI_Init();
 800052c:	f000 f890 	bl	8000650 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8000530:	f000 f8bc 	bl	80006ac <MX_DMA2D_Init>
  MX_I2C1_Init();
 8000534:	f000 f8ec 	bl	8000710 <MX_I2C1_Init>
  MX_SPI5_Init();
 8000538:	f000 f92a 	bl	8000790 <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800053c:	f002 fcee 	bl	8002f1c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000540:	4a05      	ldr	r2, [pc, #20]	@ (8000558 <main+0x3c>)
 8000542:	2100      	movs	r1, #0
 8000544:	4805      	ldr	r0, [pc, #20]	@ (800055c <main+0x40>)
 8000546:	f002 fd33 	bl	8002fb0 <osThreadNew>
 800054a:	4603      	mov	r3, r0
 800054c:	4a04      	ldr	r2, [pc, #16]	@ (8000560 <main+0x44>)
 800054e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000550:	f002 fd08 	bl	8002f64 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000554:	bf00      	nop
 8000556:	e7fd      	b.n	8000554 <main+0x38>
 8000558:	08005c94 	.word	0x08005c94
 800055c:	08000c69 	.word	0x08000c69
 8000560:	200001a8 	.word	0x200001a8

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b094      	sub	sp, #80	@ 0x50
 8000568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056a:	f107 0320 	add.w	r3, r7, #32
 800056e:	2230      	movs	r2, #48	@ 0x30
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f005 fa80 	bl	8005a78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000578:	f107 030c 	add.w	r3, r7, #12
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000588:	2300      	movs	r3, #0
 800058a:	60bb      	str	r3, [r7, #8]
 800058c:	4b2e      	ldr	r3, [pc, #184]	@ (8000648 <SystemClock_Config+0xe4>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000590:	4a2d      	ldr	r2, [pc, #180]	@ (8000648 <SystemClock_Config+0xe4>)
 8000592:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000596:	6413      	str	r3, [r2, #64]	@ 0x40
 8000598:	4b2b      	ldr	r3, [pc, #172]	@ (8000648 <SystemClock_Config+0xe4>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800059c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a4:	2300      	movs	r3, #0
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	4b28      	ldr	r3, [pc, #160]	@ (800064c <SystemClock_Config+0xe8>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a27      	ldr	r2, [pc, #156]	@ (800064c <SystemClock_Config+0xe8>)
 80005ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005b2:	6013      	str	r3, [r2, #0]
 80005b4:	4b25      	ldr	r3, [pc, #148]	@ (800064c <SystemClock_Config+0xe8>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c0:	2302      	movs	r3, #2
 80005c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c4:	2301      	movs	r3, #1
 80005c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c8:	2310      	movs	r3, #16
 80005ca:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005cc:	2302      	movs	r3, #2
 80005ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d0:	2300      	movs	r3, #0
 80005d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005d4:	2308      	movs	r3, #8
 80005d6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80005d8:	23b4      	movs	r3, #180	@ 0xb4
 80005da:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005dc:	2302      	movs	r3, #2
 80005de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005e0:	2307      	movs	r3, #7
 80005e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e4:	f107 0320 	add.w	r3, r7, #32
 80005e8:	4618      	mov	r0, r3
 80005ea:	f001 fbfd 	bl	8001de8 <HAL_RCC_OscConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005f4:	f000 fb52 	bl	8000c9c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005f8:	f001 fba6 	bl	8001d48 <HAL_PWREx_EnableOverDrive>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000602:	f000 fb4b 	bl	8000c9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000606:	230f      	movs	r3, #15
 8000608:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060a:	2302      	movs	r3, #2
 800060c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000612:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000616:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000618:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800061c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800061e:	f107 030c 	add.w	r3, r7, #12
 8000622:	2105      	movs	r1, #5
 8000624:	4618      	mov	r0, r3
 8000626:	f001 fe57 	bl	80022d8 <HAL_RCC_ClockConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000630:	f000 fb34 	bl	8000c9c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000634:	2200      	movs	r2, #0
 8000636:	2100      	movs	r1, #0
 8000638:	2000      	movs	r0, #0
 800063a:	f001 ff33 	bl	80024a4 <HAL_RCC_MCOConfig>
}
 800063e:	bf00      	nop
 8000640:	3750      	adds	r7, #80	@ 0x50
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40023800 	.word	0x40023800
 800064c:	40007000 	.word	0x40007000

08000650 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000654:	4b13      	ldr	r3, [pc, #76]	@ (80006a4 <MX_DCMI_Init+0x54>)
 8000656:	4a14      	ldr	r2, [pc, #80]	@ (80006a8 <MX_DCMI_Init+0x58>)
 8000658:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_EMBEDDED;
 800065a:	4b12      	ldr	r3, [pc, #72]	@ (80006a4 <MX_DCMI_Init+0x54>)
 800065c:	2210      	movs	r2, #16
 800065e:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000660:	4b10      	ldr	r3, [pc, #64]	@ (80006a4 <MX_DCMI_Init+0x54>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000666:	4b0f      	ldr	r3, [pc, #60]	@ (80006a4 <MX_DCMI_Init+0x54>)
 8000668:	2200      	movs	r2, #0
 800066a:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 800066c:	4b0d      	ldr	r3, [pc, #52]	@ (80006a4 <MX_DCMI_Init+0x54>)
 800066e:	2200      	movs	r2, #0
 8000670:	619a      	str	r2, [r3, #24]
  hdcmi.Init.SyncroCode.FrameEndCode = 0;
 8000672:	4b0c      	ldr	r3, [pc, #48]	@ (80006a4 <MX_DCMI_Init+0x54>)
 8000674:	2200      	movs	r2, #0
 8000676:	77da      	strb	r2, [r3, #31]
  hdcmi.Init.SyncroCode.FrameStartCode = 0;
 8000678:	4b0a      	ldr	r3, [pc, #40]	@ (80006a4 <MX_DCMI_Init+0x54>)
 800067a:	2200      	movs	r2, #0
 800067c:	771a      	strb	r2, [r3, #28]
  hdcmi.Init.SyncroCode.LineStartCode = 0;
 800067e:	4b09      	ldr	r3, [pc, #36]	@ (80006a4 <MX_DCMI_Init+0x54>)
 8000680:	2200      	movs	r2, #0
 8000682:	775a      	strb	r2, [r3, #29]
  hdcmi.Init.SyncroCode.LineEndCode = 0;
 8000684:	4b07      	ldr	r3, [pc, #28]	@ (80006a4 <MX_DCMI_Init+0x54>)
 8000686:	2200      	movs	r2, #0
 8000688:	779a      	strb	r2, [r3, #30]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800068a:	4b06      	ldr	r3, [pc, #24]	@ (80006a4 <MX_DCMI_Init+0x54>)
 800068c:	2200      	movs	r2, #0
 800068e:	621a      	str	r2, [r3, #32]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000690:	4804      	ldr	r0, [pc, #16]	@ (80006a4 <MX_DCMI_Init+0x54>)
 8000692:	f000 fe8b 	bl	80013ac <HAL_DCMI_Init>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_DCMI_Init+0x50>
  {
    Error_Handler();
 800069c:	f000 fafe 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	2000007c 	.word	0x2000007c
 80006a8:	50050000 	.word	0x50050000

080006ac <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80006b0:	4b15      	ldr	r3, [pc, #84]	@ (8000708 <MX_DMA2D_Init+0x5c>)
 80006b2:	4a16      	ldr	r2, [pc, #88]	@ (800070c <MX_DMA2D_Init+0x60>)
 80006b4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80006b6:	4b14      	ldr	r3, [pc, #80]	@ (8000708 <MX_DMA2D_Init+0x5c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80006bc:	4b12      	ldr	r3, [pc, #72]	@ (8000708 <MX_DMA2D_Init+0x5c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80006c2:	4b11      	ldr	r3, [pc, #68]	@ (8000708 <MX_DMA2D_Init+0x5c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000708 <MX_DMA2D_Init+0x5c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000708 <MX_DMA2D_Init+0x5c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000708 <MX_DMA2D_Init+0x5c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80006da:	4b0b      	ldr	r3, [pc, #44]	@ (8000708 <MX_DMA2D_Init+0x5c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80006e0:	4809      	ldr	r0, [pc, #36]	@ (8000708 <MX_DMA2D_Init+0x5c>)
 80006e2:	f000 fed0 	bl	8001486 <HAL_DMA2D_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80006ec:	f000 fad6 	bl	8000c9c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80006f0:	2101      	movs	r1, #1
 80006f2:	4805      	ldr	r0, [pc, #20]	@ (8000708 <MX_DMA2D_Init+0x5c>)
 80006f4:	f000 ff10 	bl	8001518 <HAL_DMA2D_ConfigLayer>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80006fe:	f000 facd 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	200000bc 	.word	0x200000bc
 800070c:	4002b000 	.word	0x4002b000

08000710 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000714:	4b1b      	ldr	r3, [pc, #108]	@ (8000784 <MX_I2C1_Init+0x74>)
 8000716:	4a1c      	ldr	r2, [pc, #112]	@ (8000788 <MX_I2C1_Init+0x78>)
 8000718:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800071a:	4b1a      	ldr	r3, [pc, #104]	@ (8000784 <MX_I2C1_Init+0x74>)
 800071c:	4a1b      	ldr	r2, [pc, #108]	@ (800078c <MX_I2C1_Init+0x7c>)
 800071e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000720:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <MX_I2C1_Init+0x74>)
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000726:	4b17      	ldr	r3, [pc, #92]	@ (8000784 <MX_I2C1_Init+0x74>)
 8000728:	2200      	movs	r2, #0
 800072a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800072c:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <MX_I2C1_Init+0x74>)
 800072e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000732:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000734:	4b13      	ldr	r3, [pc, #76]	@ (8000784 <MX_I2C1_Init+0x74>)
 8000736:	2200      	movs	r2, #0
 8000738:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800073a:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <MX_I2C1_Init+0x74>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000740:	4b10      	ldr	r3, [pc, #64]	@ (8000784 <MX_I2C1_Init+0x74>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000746:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <MX_I2C1_Init+0x74>)
 8000748:	2200      	movs	r2, #0
 800074a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800074c:	480d      	ldr	r0, [pc, #52]	@ (8000784 <MX_I2C1_Init+0x74>)
 800074e:	f001 f93b 	bl	80019c8 <HAL_I2C_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000758:	f000 faa0 	bl	8000c9c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800075c:	2100      	movs	r1, #0
 800075e:	4809      	ldr	r0, [pc, #36]	@ (8000784 <MX_I2C1_Init+0x74>)
 8000760:	f001 fa76 	bl	8001c50 <HAL_I2CEx_ConfigAnalogFilter>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800076a:	f000 fa97 	bl	8000c9c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800076e:	2100      	movs	r1, #0
 8000770:	4804      	ldr	r0, [pc, #16]	@ (8000784 <MX_I2C1_Init+0x74>)
 8000772:	f001 faa9 	bl	8001cc8 <HAL_I2CEx_ConfigDigitalFilter>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800077c:	f000 fa8e 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	200000fc 	.word	0x200000fc
 8000788:	40005400 	.word	0x40005400
 800078c:	000186a0 	.word	0x000186a0

08000790 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000794:	4b17      	ldr	r3, [pc, #92]	@ (80007f4 <MX_SPI5_Init+0x64>)
 8000796:	4a18      	ldr	r2, [pc, #96]	@ (80007f8 <MX_SPI5_Init+0x68>)
 8000798:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800079a:	4b16      	ldr	r3, [pc, #88]	@ (80007f4 <MX_SPI5_Init+0x64>)
 800079c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007a0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80007a2:	4b14      	ldr	r3, [pc, #80]	@ (80007f4 <MX_SPI5_Init+0x64>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80007a8:	4b12      	ldr	r3, [pc, #72]	@ (80007f4 <MX_SPI5_Init+0x64>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ae:	4b11      	ldr	r3, [pc, #68]	@ (80007f4 <MX_SPI5_Init+0x64>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007b4:	4b0f      	ldr	r3, [pc, #60]	@ (80007f4 <MX_SPI5_Init+0x64>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80007ba:	4b0e      	ldr	r3, [pc, #56]	@ (80007f4 <MX_SPI5_Init+0x64>)
 80007bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007c0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007c2:	4b0c      	ldr	r3, [pc, #48]	@ (80007f4 <MX_SPI5_Init+0x64>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007c8:	4b0a      	ldr	r3, [pc, #40]	@ (80007f4 <MX_SPI5_Init+0x64>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ce:	4b09      	ldr	r3, [pc, #36]	@ (80007f4 <MX_SPI5_Init+0x64>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007d4:	4b07      	ldr	r3, [pc, #28]	@ (80007f4 <MX_SPI5_Init+0x64>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 80007da:	4b06      	ldr	r3, [pc, #24]	@ (80007f4 <MX_SPI5_Init+0x64>)
 80007dc:	220a      	movs	r2, #10
 80007de:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80007e0:	4804      	ldr	r0, [pc, #16]	@ (80007f4 <MX_SPI5_Init+0x64>)
 80007e2:	f002 f833 	bl	800284c <HAL_SPI_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80007ec:	f000 fa56 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	20000150 	.word	0x20000150
 80007f8:	40015000 	.word	0x40015000

080007fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08e      	sub	sp, #56	@ 0x38
 8000800:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000802:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	623b      	str	r3, [r7, #32]
 8000816:	4bb2      	ldr	r3, [pc, #712]	@ (8000ae0 <MX_GPIO_Init+0x2e4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	4ab1      	ldr	r2, [pc, #708]	@ (8000ae0 <MX_GPIO_Init+0x2e4>)
 800081c:	f043 0310 	orr.w	r3, r3, #16
 8000820:	6313      	str	r3, [r2, #48]	@ 0x30
 8000822:	4baf      	ldr	r3, [pc, #700]	@ (8000ae0 <MX_GPIO_Init+0x2e4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	f003 0310 	and.w	r3, r3, #16
 800082a:	623b      	str	r3, [r7, #32]
 800082c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]
 8000832:	4bab      	ldr	r3, [pc, #684]	@ (8000ae0 <MX_GPIO_Init+0x2e4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	4aaa      	ldr	r2, [pc, #680]	@ (8000ae0 <MX_GPIO_Init+0x2e4>)
 8000838:	f043 0304 	orr.w	r3, r3, #4
 800083c:	6313      	str	r3, [r2, #48]	@ 0x30
 800083e:	4ba8      	ldr	r3, [pc, #672]	@ (8000ae0 <MX_GPIO_Init+0x2e4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	f003 0304 	and.w	r3, r3, #4
 8000846:	61fb      	str	r3, [r7, #28]
 8000848:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	61bb      	str	r3, [r7, #24]
 800084e:	4ba4      	ldr	r3, [pc, #656]	@ (8000ae0 <MX_GPIO_Init+0x2e4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4aa3      	ldr	r2, [pc, #652]	@ (8000ae0 <MX_GPIO_Init+0x2e4>)
 8000854:	f043 0320 	orr.w	r3, r3, #32
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
 800085a:	4ba1      	ldr	r3, [pc, #644]	@ (8000ae0 <MX_GPIO_Init+0x2e4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	f003 0320 	and.w	r3, r3, #32
 8000862:	61bb      	str	r3, [r7, #24]
 8000864:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]
 800086a:	4b9d      	ldr	r3, [pc, #628]	@ (8000ae0 <MX_GPIO_Init+0x2e4>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	4a9c      	ldr	r2, [pc, #624]	@ (8000ae0 <MX_GPIO_Init+0x2e4>)
 8000870:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000874:	6313      	str	r3, [r2, #48]	@ 0x30
 8000876:	4b9a      	ldr	r3, [pc, #616]	@ (8000ae0 <MX_GPIO_Init+0x2e4>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800087e:	617b      	str	r3, [r7, #20]
 8000880:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	613b      	str	r3, [r7, #16]
 8000886:	4b96      	ldr	r3, [pc, #600]	@ (8000ae0 <MX_GPIO_Init+0x2e4>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	4a95      	ldr	r2, [pc, #596]	@ (8000ae0 <MX_GPIO_Init+0x2e4>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	6313      	str	r3, [r2, #48]	@ 0x30
 8000892:	4b93      	ldr	r3, [pc, #588]	@ (8000ae0 <MX_GPIO_Init+0x2e4>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	613b      	str	r3, [r7, #16]
 800089c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	4b8f      	ldr	r3, [pc, #572]	@ (8000ae0 <MX_GPIO_Init+0x2e4>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	4a8e      	ldr	r2, [pc, #568]	@ (8000ae0 <MX_GPIO_Init+0x2e4>)
 80008a8:	f043 0302 	orr.w	r3, r3, #2
 80008ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ae:	4b8c      	ldr	r3, [pc, #560]	@ (8000ae0 <MX_GPIO_Init+0x2e4>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	f003 0302 	and.w	r3, r3, #2
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	4b88      	ldr	r3, [pc, #544]	@ (8000ae0 <MX_GPIO_Init+0x2e4>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	4a87      	ldr	r2, [pc, #540]	@ (8000ae0 <MX_GPIO_Init+0x2e4>)
 80008c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ca:	4b85      	ldr	r3, [pc, #532]	@ (8000ae0 <MX_GPIO_Init+0x2e4>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	4b81      	ldr	r3, [pc, #516]	@ (8000ae0 <MX_GPIO_Init+0x2e4>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	4a80      	ldr	r2, [pc, #512]	@ (8000ae0 <MX_GPIO_Init+0x2e4>)
 80008e0:	f043 0308 	orr.w	r3, r3, #8
 80008e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e6:	4b7e      	ldr	r3, [pc, #504]	@ (8000ae0 <MX_GPIO_Init+0x2e4>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	f003 0308 	and.w	r3, r3, #8
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2116      	movs	r1, #22
 80008f6:	487b      	ldr	r0, [pc, #492]	@ (8000ae4 <MX_GPIO_Init+0x2e8>)
 80008f8:	f001 f84c 	bl	8001994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80008fc:	2200      	movs	r2, #0
 80008fe:	2180      	movs	r1, #128	@ 0x80
 8000900:	4879      	ldr	r0, [pc, #484]	@ (8000ae8 <MX_GPIO_Init+0x2ec>)
 8000902:	f001 f847 	bl	8001994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 800090c:	4877      	ldr	r0, [pc, #476]	@ (8000aec <MX_GPIO_Init+0x2f0>)
 800090e:	f001 f841 	bl	8001994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000918:	4875      	ldr	r0, [pc, #468]	@ (8000af0 <MX_GPIO_Init+0x2f4>)
 800091a:	f001 f83b 	bl	8001994 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800091e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000922:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000924:	2302      	movs	r3, #2
 8000926:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092c:	2303      	movs	r3, #3
 800092e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000930:	230c      	movs	r3, #12
 8000932:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000934:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000938:	4619      	mov	r1, r3
 800093a:	486e      	ldr	r0, [pc, #440]	@ (8000af4 <MX_GPIO_Init+0x2f8>)
 800093c:	f000 fe7e 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8000940:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000944:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000946:	2302      	movs	r3, #2
 8000948:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000952:	230e      	movs	r3, #14
 8000954:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000956:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800095a:	4619      	mov	r1, r3
 800095c:	4865      	ldr	r0, [pc, #404]	@ (8000af4 <MX_GPIO_Init+0x2f8>)
 800095e:	f000 fe6d 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000962:	2301      	movs	r3, #1
 8000964:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000966:	2302      	movs	r3, #2
 8000968:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096e:	2303      	movs	r3, #3
 8000970:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000972:	230c      	movs	r3, #12
 8000974:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000976:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800097a:	4619      	mov	r1, r3
 800097c:	4859      	ldr	r0, [pc, #356]	@ (8000ae4 <MX_GPIO_Init+0x2e8>)
 800097e:	f000 fe5d 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000982:	2316      	movs	r3, #22
 8000984:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000986:	2301      	movs	r3, #1
 8000988:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000992:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000996:	4619      	mov	r1, r3
 8000998:	4852      	ldr	r0, [pc, #328]	@ (8000ae4 <MX_GPIO_Init+0x2e8>)
 800099a:	f000 fe4f 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 800099e:	f248 0307 	movw	r3, #32775	@ 0x8007
 80009a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009a4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009b2:	4619      	mov	r1, r3
 80009b4:	484c      	ldr	r0, [pc, #304]	@ (8000ae8 <MX_GPIO_Init+0x2ec>)
 80009b6:	f000 fe41 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin R4_Pin R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|R4_Pin|R5_Pin;
 80009ba:	f641 0308 	movw	r3, #6152	@ 0x1808
 80009be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c0:	2302      	movs	r3, #2
 80009c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	2300      	movs	r3, #0
 80009ca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009cc:	230e      	movs	r3, #14
 80009ce:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009d4:	4619      	mov	r1, r3
 80009d6:	4844      	ldr	r0, [pc, #272]	@ (8000ae8 <MX_GPIO_Init+0x2ec>)
 80009d8:	f000 fe30 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80009dc:	2380      	movs	r3, #128	@ 0x80
 80009de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e0:	2301      	movs	r3, #1
 80009e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e8:	2300      	movs	r3, #0
 80009ea:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80009ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009f0:	4619      	mov	r1, r3
 80009f2:	483d      	ldr	r0, [pc, #244]	@ (8000ae8 <MX_GPIO_Init+0x2ec>)
 80009f4:	f000 fe22 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80009f8:	2320      	movs	r3, #32
 80009fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009fc:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a00:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000a06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4835      	ldr	r0, [pc, #212]	@ (8000ae4 <MX_GPIO_Init+0x2e8>)
 8000a0e:	f000 fe15 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000a12:	2303      	movs	r3, #3
 8000a14:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a16:	2302      	movs	r3, #2
 8000a18:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000a22:	2309      	movs	r3, #9
 8000a24:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4832      	ldr	r0, [pc, #200]	@ (8000af8 <MX_GPIO_Init+0x2fc>)
 8000a2e:	f000 fe05 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a32:	2304      	movs	r3, #4
 8000a34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a36:	2300      	movs	r3, #0
 8000a38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a42:	4619      	mov	r1, r3
 8000a44:	482c      	ldr	r0, [pc, #176]	@ (8000af8 <MX_GPIO_Init+0x2fc>)
 8000a46:	f000 fdf9 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000a4a:	f248 1333 	movw	r3, #33075	@ 0x8133
 8000a4e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a50:	2302      	movs	r3, #2
 8000a52:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a58:	2303      	movs	r3, #3
 8000a5a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a5c:	230c      	movs	r3, #12
 8000a5e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a64:	4619      	mov	r1, r3
 8000a66:	4822      	ldr	r0, [pc, #136]	@ (8000af0 <MX_GPIO_Init+0x2f4>)
 8000a68:	f000 fde8 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000a6c:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000a70:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a72:	2302      	movs	r3, #2
 8000a74:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a7e:	230c      	movs	r3, #12
 8000a80:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a86:	4619      	mov	r1, r3
 8000a88:	481c      	ldr	r0, [pc, #112]	@ (8000afc <MX_GPIO_Init+0x300>)
 8000a8a:	f000 fdd7 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin;
 8000a8e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000a92:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a94:	2302      	movs	r3, #2
 8000a96:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000aa0:	230e      	movs	r3, #14
 8000aa2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4813      	ldr	r0, [pc, #76]	@ (8000af8 <MX_GPIO_Init+0x2fc>)
 8000aac:	f000 fdc6 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000ab0:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8000ab4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000ac2:	230c      	movs	r3, #12
 8000ac4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aca:	4619      	mov	r1, r3
 8000acc:	480a      	ldr	r0, [pc, #40]	@ (8000af8 <MX_GPIO_Init+0x2fc>)
 8000ace:	f000 fdb5 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000ad2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ad6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000adc:	e010      	b.n	8000b00 <MX_GPIO_Init+0x304>
 8000ade:	bf00      	nop
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	40020800 	.word	0x40020800
 8000ae8:	40020000 	.word	0x40020000
 8000aec:	40020c00 	.word	0x40020c00
 8000af0:	40021800 	.word	0x40021800
 8000af4:	40021400 	.word	0x40021400
 8000af8:	40020400 	.word	0x40020400
 8000afc:	40021000 	.word	0x40021000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000b04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4853      	ldr	r0, [pc, #332]	@ (8000c58 <MX_GPIO_Init+0x45c>)
 8000b0c:	f000 fd96 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000b10:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000b14:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b16:	2302      	movs	r3, #2
 8000b18:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b22:	230c      	movs	r3, #12
 8000b24:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	484b      	ldr	r0, [pc, #300]	@ (8000c5c <MX_GPIO_Init+0x460>)
 8000b2e:	f000 fd85 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000b32:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000b36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000b40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b44:	4619      	mov	r1, r3
 8000b46:	4845      	ldr	r0, [pc, #276]	@ (8000c5c <MX_GPIO_Init+0x460>)
 8000b48:	f000 fd78 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000b4c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000b50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b52:	2301      	movs	r3, #1
 8000b54:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b62:	4619      	mov	r1, r3
 8000b64:	483d      	ldr	r0, [pc, #244]	@ (8000c5c <MX_GPIO_Init+0x460>)
 8000b66:	f000 fd69 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000b6a:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000b6e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b70:	2302      	movs	r3, #2
 8000b72:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b7c:	230e      	movs	r3, #14
 8000b7e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b84:	4619      	mov	r1, r3
 8000b86:	4836      	ldr	r0, [pc, #216]	@ (8000c60 <MX_GPIO_Init+0x464>)
 8000b88:	f000 fd58 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b92:	2302      	movs	r3, #2
 8000b94:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	482e      	ldr	r0, [pc, #184]	@ (8000c64 <MX_GPIO_Init+0x468>)
 8000baa:	f000 fd47 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000bae:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000bb2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bc0:	2307      	movs	r3, #7
 8000bc2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4826      	ldr	r0, [pc, #152]	@ (8000c64 <MX_GPIO_Init+0x468>)
 8000bcc:	f000 fd36 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 8000bd0:	2340      	movs	r3, #64	@ 0x40
 8000bd2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000be0:	230e      	movs	r3, #14
 8000be2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8000be4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000be8:	4619      	mov	r1, r3
 8000bea:	481c      	ldr	r0, [pc, #112]	@ (8000c5c <MX_GPIO_Init+0x460>)
 8000bec:	f000 fd26 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000bf0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000bf4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000c02:	2309      	movs	r3, #9
 8000c04:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4814      	ldr	r0, [pc, #80]	@ (8000c60 <MX_GPIO_Init+0x464>)
 8000c0e:	f000 fd15 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000c12:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000c16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	2300      	movs	r3, #0
 8000c22:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c28:	4619      	mov	r1, r3
 8000c2a:	480d      	ldr	r0, [pc, #52]	@ (8000c60 <MX_GPIO_Init+0x464>)
 8000c2c:	f000 fd06 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDCKE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin;
 8000c30:	2320      	movs	r3, #32
 8000c32:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c34:	2302      	movs	r3, #2
 8000c36:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c40:	230c      	movs	r3, #12
 8000c42:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDCKE1_GPIO_Port, &GPIO_InitStruct);
 8000c44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4803      	ldr	r0, [pc, #12]	@ (8000c58 <MX_GPIO_Init+0x45c>)
 8000c4c:	f000 fcf6 	bl	800163c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c50:	bf00      	nop
 8000c52:	3738      	adds	r7, #56	@ 0x38
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40020400 	.word	0x40020400
 8000c5c:	40020c00 	.word	0x40020c00
 8000c60:	40021800 	.word	0x40021800
 8000c64:	40020000 	.word	0x40020000

08000c68 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c70:	2001      	movs	r0, #1
 8000c72:	f002 fa2f 	bl	80030d4 <osDelay>
 8000c76:	e7fb      	b.n	8000c70 <StartDefaultTask+0x8>

08000c78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a04      	ldr	r2, [pc, #16]	@ (8000c98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d101      	bne.n	8000c8e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000c8a:	f000 fa8d 	bl	80011a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40010000 	.word	0x40010000

08000c9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca0:	b672      	cpsid	i
}
 8000ca2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca4:	bf00      	nop
 8000ca6:	e7fd      	b.n	8000ca4 <Error_Handler+0x8>

08000ca8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	4b12      	ldr	r3, [pc, #72]	@ (8000cfc <HAL_MspInit+0x54>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cb6:	4a11      	ldr	r2, [pc, #68]	@ (8000cfc <HAL_MspInit+0x54>)
 8000cb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000cfc <HAL_MspInit+0x54>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	603b      	str	r3, [r7, #0]
 8000cce:	4b0b      	ldr	r3, [pc, #44]	@ (8000cfc <HAL_MspInit+0x54>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000cfc <HAL_MspInit+0x54>)
 8000cd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cda:	4b08      	ldr	r3, [pc, #32]	@ (8000cfc <HAL_MspInit+0x54>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ce2:	603b      	str	r3, [r7, #0]
 8000ce4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	210f      	movs	r1, #15
 8000cea:	f06f 0001 	mvn.w	r0, #1
 8000cee:	f000 fb33 	bl	8001358 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40023800 	.word	0x40023800

08000d00 <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08c      	sub	sp, #48	@ 0x30
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	f107 031c 	add.w	r3, r7, #28
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a47      	ldr	r2, [pc, #284]	@ (8000e3c <HAL_DCMI_MspInit+0x13c>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	f040 8087 	bne.w	8000e32 <HAL_DCMI_MspInit+0x132>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000d24:	2300      	movs	r3, #0
 8000d26:	61bb      	str	r3, [r7, #24]
 8000d28:	4b45      	ldr	r3, [pc, #276]	@ (8000e40 <HAL_DCMI_MspInit+0x140>)
 8000d2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d2c:	4a44      	ldr	r2, [pc, #272]	@ (8000e40 <HAL_DCMI_MspInit+0x140>)
 8000d2e:	f043 0301 	orr.w	r3, r3, #1
 8000d32:	6353      	str	r3, [r2, #52]	@ 0x34
 8000d34:	4b42      	ldr	r3, [pc, #264]	@ (8000e40 <HAL_DCMI_MspInit+0x140>)
 8000d36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d38:	f003 0301 	and.w	r3, r3, #1
 8000d3c:	61bb      	str	r3, [r7, #24]
 8000d3e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
 8000d44:	4b3e      	ldr	r3, [pc, #248]	@ (8000e40 <HAL_DCMI_MspInit+0x140>)
 8000d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d48:	4a3d      	ldr	r2, [pc, #244]	@ (8000e40 <HAL_DCMI_MspInit+0x140>)
 8000d4a:	f043 0310 	orr.w	r3, r3, #16
 8000d4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d50:	4b3b      	ldr	r3, [pc, #236]	@ (8000e40 <HAL_DCMI_MspInit+0x140>)
 8000d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d54:	f003 0310 	and.w	r3, r3, #16
 8000d58:	617b      	str	r3, [r7, #20]
 8000d5a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	4b37      	ldr	r3, [pc, #220]	@ (8000e40 <HAL_DCMI_MspInit+0x140>)
 8000d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d64:	4a36      	ldr	r2, [pc, #216]	@ (8000e40 <HAL_DCMI_MspInit+0x140>)
 8000d66:	f043 0301 	orr.w	r3, r3, #1
 8000d6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d6c:	4b34      	ldr	r3, [pc, #208]	@ (8000e40 <HAL_DCMI_MspInit+0x140>)
 8000d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d70:	f003 0301 	and.w	r3, r3, #1
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	4b30      	ldr	r3, [pc, #192]	@ (8000e40 <HAL_DCMI_MspInit+0x140>)
 8000d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d80:	4a2f      	ldr	r2, [pc, #188]	@ (8000e40 <HAL_DCMI_MspInit+0x140>)
 8000d82:	f043 0304 	orr.w	r3, r3, #4
 8000d86:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d88:	4b2d      	ldr	r3, [pc, #180]	@ (8000e40 <HAL_DCMI_MspInit+0x140>)
 8000d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8c:	f003 0304 	and.w	r3, r3, #4
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d94:	2300      	movs	r3, #0
 8000d96:	60bb      	str	r3, [r7, #8]
 8000d98:	4b29      	ldr	r3, [pc, #164]	@ (8000e40 <HAL_DCMI_MspInit+0x140>)
 8000d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9c:	4a28      	ldr	r2, [pc, #160]	@ (8000e40 <HAL_DCMI_MspInit+0x140>)
 8000d9e:	f043 0302 	orr.w	r3, r3, #2
 8000da2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da4:	4b26      	ldr	r3, [pc, #152]	@ (8000e40 <HAL_DCMI_MspInit+0x140>)
 8000da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da8:	f003 0302 	and.w	r3, r3, #2
 8000dac:	60bb      	str	r3, [r7, #8]
 8000dae:	68bb      	ldr	r3, [r7, #8]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PB6     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000db0:	2370      	movs	r3, #112	@ 0x70
 8000db2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db4:	2302      	movs	r3, #2
 8000db6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000dc0:	230d      	movs	r3, #13
 8000dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dc4:	f107 031c 	add.w	r3, r7, #28
 8000dc8:	4619      	mov	r1, r3
 8000dca:	481e      	ldr	r0, [pc, #120]	@ (8000e44 <HAL_DCMI_MspInit+0x144>)
 8000dcc:	f000 fc36 	bl	800163c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000dd0:	2350      	movs	r3, #80	@ 0x50
 8000dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000de0:	230d      	movs	r3, #13
 8000de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de4:	f107 031c 	add.w	r3, r7, #28
 8000de8:	4619      	mov	r1, r3
 8000dea:	4817      	ldr	r0, [pc, #92]	@ (8000e48 <HAL_DCMI_MspInit+0x148>)
 8000dec:	f000 fc26 	bl	800163c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000df0:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df6:	2302      	movs	r3, #2
 8000df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e02:	230d      	movs	r3, #13
 8000e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e06:	f107 031c 	add.w	r3, r7, #28
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	480f      	ldr	r0, [pc, #60]	@ (8000e4c <HAL_DCMI_MspInit+0x14c>)
 8000e0e:	f000 fc15 	bl	800163c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e12:	23c0      	movs	r3, #192	@ 0xc0
 8000e14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e16:	2302      	movs	r3, #2
 8000e18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e22:	230d      	movs	r3, #13
 8000e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e26:	f107 031c 	add.w	r3, r7, #28
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4808      	ldr	r0, [pc, #32]	@ (8000e50 <HAL_DCMI_MspInit+0x150>)
 8000e2e:	f000 fc05 	bl	800163c <HAL_GPIO_Init>

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 8000e32:	bf00      	nop
 8000e34:	3730      	adds	r7, #48	@ 0x30
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	50050000 	.word	0x50050000
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40021000 	.word	0x40021000
 8000e48:	40020000 	.word	0x40020000
 8000e4c:	40020800 	.word	0x40020800
 8000e50:	40020400 	.word	0x40020400

08000e54 <HAL_DMA2D_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a0b      	ldr	r2, [pc, #44]	@ (8000e90 <HAL_DMA2D_MspInit+0x3c>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d10d      	bne.n	8000e82 <HAL_DMA2D_MspInit+0x2e>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e94 <HAL_DMA2D_MspInit+0x40>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6e:	4a09      	ldr	r2, [pc, #36]	@ (8000e94 <HAL_DMA2D_MspInit+0x40>)
 8000e70:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000e74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e76:	4b07      	ldr	r3, [pc, #28]	@ (8000e94 <HAL_DMA2D_MspInit+0x40>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8000e82:	bf00      	nop
 8000e84:	3714      	adds	r7, #20
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	4002b000 	.word	0x4002b000
 8000e94:	40023800 	.word	0x40023800

08000e98 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08a      	sub	sp, #40	@ 0x28
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a19      	ldr	r2, [pc, #100]	@ (8000f1c <HAL_I2C_MspInit+0x84>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d12c      	bne.n	8000f14 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613b      	str	r3, [r7, #16]
 8000ebe:	4b18      	ldr	r3, [pc, #96]	@ (8000f20 <HAL_I2C_MspInit+0x88>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec2:	4a17      	ldr	r2, [pc, #92]	@ (8000f20 <HAL_I2C_MspInit+0x88>)
 8000ec4:	f043 0302 	orr.w	r3, r3, #2
 8000ec8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eca:	4b15      	ldr	r3, [pc, #84]	@ (8000f20 <HAL_I2C_MspInit+0x88>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	613b      	str	r3, [r7, #16]
 8000ed4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ed6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000eda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000edc:	2312      	movs	r3, #18
 8000ede:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ee8:	2304      	movs	r3, #4
 8000eea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	480c      	ldr	r0, [pc, #48]	@ (8000f24 <HAL_I2C_MspInit+0x8c>)
 8000ef4:	f000 fba2 	bl	800163c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	4b08      	ldr	r3, [pc, #32]	@ (8000f20 <HAL_I2C_MspInit+0x88>)
 8000efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f00:	4a07      	ldr	r2, [pc, #28]	@ (8000f20 <HAL_I2C_MspInit+0x88>)
 8000f02:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f06:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f08:	4b05      	ldr	r3, [pc, #20]	@ (8000f20 <HAL_I2C_MspInit+0x88>)
 8000f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000f14:	bf00      	nop
 8000f16:	3728      	adds	r7, #40	@ 0x28
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40005400 	.word	0x40005400
 8000f20:	40023800 	.word	0x40023800
 8000f24:	40020400 	.word	0x40020400

08000f28 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08a      	sub	sp, #40	@ 0x28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
 8000f3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a19      	ldr	r2, [pc, #100]	@ (8000fac <HAL_SPI_MspInit+0x84>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d12c      	bne.n	8000fa4 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI5_MspInit 0 */

    /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	613b      	str	r3, [r7, #16]
 8000f4e:	4b18      	ldr	r3, [pc, #96]	@ (8000fb0 <HAL_SPI_MspInit+0x88>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f52:	4a17      	ldr	r2, [pc, #92]	@ (8000fb0 <HAL_SPI_MspInit+0x88>)
 8000f54:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000f58:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f5a:	4b15      	ldr	r3, [pc, #84]	@ (8000fb0 <HAL_SPI_MspInit+0x88>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	4b11      	ldr	r3, [pc, #68]	@ (8000fb0 <HAL_SPI_MspInit+0x88>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6e:	4a10      	ldr	r2, [pc, #64]	@ (8000fb0 <HAL_SPI_MspInit+0x88>)
 8000f70:	f043 0320 	orr.w	r3, r3, #32
 8000f74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f76:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb0 <HAL_SPI_MspInit+0x88>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7a:	f003 0320 	and.w	r3, r3, #32
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8000f82:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000f86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f90:	2300      	movs	r3, #0
 8000f92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000f94:	2305      	movs	r3, #5
 8000f96:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4805      	ldr	r0, [pc, #20]	@ (8000fb4 <HAL_SPI_MspInit+0x8c>)
 8000fa0:	f000 fb4c 	bl	800163c <HAL_GPIO_Init>

    /* USER CODE END SPI5_MspInit 1 */

  }

}
 8000fa4:	bf00      	nop
 8000fa6:	3728      	adds	r7, #40	@ 0x28
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40015000 	.word	0x40015000
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40021400 	.word	0x40021400

08000fb8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08c      	sub	sp, #48	@ 0x30
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	4b2f      	ldr	r3, [pc, #188]	@ (800108c <HAL_InitTick+0xd4>)
 8000fce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fd0:	4a2e      	ldr	r2, [pc, #184]	@ (800108c <HAL_InitTick+0xd4>)
 8000fd2:	f043 0301 	orr.w	r3, r3, #1
 8000fd6:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fd8:	4b2c      	ldr	r3, [pc, #176]	@ (800108c <HAL_InitTick+0xd4>)
 8000fda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fdc:	f003 0301 	and.w	r3, r3, #1
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fe4:	f107 020c 	add.w	r2, r7, #12
 8000fe8:	f107 0310 	add.w	r3, r7, #16
 8000fec:	4611      	mov	r1, r2
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f001 fbfa 	bl	80027e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000ff4:	f001 fbe4 	bl	80027c0 <HAL_RCC_GetPCLK2Freq>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001000:	4a23      	ldr	r2, [pc, #140]	@ (8001090 <HAL_InitTick+0xd8>)
 8001002:	fba2 2303 	umull	r2, r3, r2, r3
 8001006:	0c9b      	lsrs	r3, r3, #18
 8001008:	3b01      	subs	r3, #1
 800100a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800100c:	4b21      	ldr	r3, [pc, #132]	@ (8001094 <HAL_InitTick+0xdc>)
 800100e:	4a22      	ldr	r2, [pc, #136]	@ (8001098 <HAL_InitTick+0xe0>)
 8001010:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001012:	4b20      	ldr	r3, [pc, #128]	@ (8001094 <HAL_InitTick+0xdc>)
 8001014:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001018:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800101a:	4a1e      	ldr	r2, [pc, #120]	@ (8001094 <HAL_InitTick+0xdc>)
 800101c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800101e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001020:	4b1c      	ldr	r3, [pc, #112]	@ (8001094 <HAL_InitTick+0xdc>)
 8001022:	2200      	movs	r2, #0
 8001024:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001026:	4b1b      	ldr	r3, [pc, #108]	@ (8001094 <HAL_InitTick+0xdc>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800102c:	4b19      	ldr	r3, [pc, #100]	@ (8001094 <HAL_InitTick+0xdc>)
 800102e:	2200      	movs	r2, #0
 8001030:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001032:	4818      	ldr	r0, [pc, #96]	@ (8001094 <HAL_InitTick+0xdc>)
 8001034:	f001 fc93 	bl	800295e <HAL_TIM_Base_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800103e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001042:	2b00      	cmp	r3, #0
 8001044:	d11b      	bne.n	800107e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001046:	4813      	ldr	r0, [pc, #76]	@ (8001094 <HAL_InitTick+0xdc>)
 8001048:	f001 fce2 	bl	8002a10 <HAL_TIM_Base_Start_IT>
 800104c:	4603      	mov	r3, r0
 800104e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001052:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001056:	2b00      	cmp	r3, #0
 8001058:	d111      	bne.n	800107e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800105a:	2019      	movs	r0, #25
 800105c:	f000 f998 	bl	8001390 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b0f      	cmp	r3, #15
 8001064:	d808      	bhi.n	8001078 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001066:	2200      	movs	r2, #0
 8001068:	6879      	ldr	r1, [r7, #4]
 800106a:	2019      	movs	r0, #25
 800106c:	f000 f974 	bl	8001358 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001070:	4a0a      	ldr	r2, [pc, #40]	@ (800109c <HAL_InitTick+0xe4>)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6013      	str	r3, [r2, #0]
 8001076:	e002      	b.n	800107e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800107e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001082:	4618      	mov	r0, r3
 8001084:	3730      	adds	r7, #48	@ 0x30
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40023800 	.word	0x40023800
 8001090:	431bde83 	.word	0x431bde83
 8001094:	200001ac 	.word	0x200001ac
 8001098:	40010000 	.word	0x40010000
 800109c:	20000004 	.word	0x20000004

080010a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010a4:	bf00      	nop
 80010a6:	e7fd      	b.n	80010a4 <NMI_Handler+0x4>

080010a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ac:	bf00      	nop
 80010ae:	e7fd      	b.n	80010ac <HardFault_Handler+0x4>

080010b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010b4:	bf00      	nop
 80010b6:	e7fd      	b.n	80010b4 <MemManage_Handler+0x4>

080010b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010bc:	bf00      	nop
 80010be:	e7fd      	b.n	80010bc <BusFault_Handler+0x4>

080010c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010c4:	bf00      	nop
 80010c6:	e7fd      	b.n	80010c4 <UsageFault_Handler+0x4>

080010c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
	...

080010d8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010dc:	4802      	ldr	r0, [pc, #8]	@ (80010e8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80010de:	f001 fd07 	bl	8002af0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	200001ac 	.word	0x200001ac

080010ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010f0:	4b06      	ldr	r3, [pc, #24]	@ (800110c <SystemInit+0x20>)
 80010f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010f6:	4a05      	ldr	r2, [pc, #20]	@ (800110c <SystemInit+0x20>)
 80010f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001110:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001148 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001114:	f7ff ffea 	bl	80010ec <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001118:	480c      	ldr	r0, [pc, #48]	@ (800114c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800111a:	490d      	ldr	r1, [pc, #52]	@ (8001150 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800111c:	4a0d      	ldr	r2, [pc, #52]	@ (8001154 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800111e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001120:	e002      	b.n	8001128 <LoopCopyDataInit>

08001122 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001122:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001124:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001126:	3304      	adds	r3, #4

08001128 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001128:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800112a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800112c:	d3f9      	bcc.n	8001122 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800112e:	4a0a      	ldr	r2, [pc, #40]	@ (8001158 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001130:	4c0a      	ldr	r4, [pc, #40]	@ (800115c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001132:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001134:	e001      	b.n	800113a <LoopFillZerobss>

08001136 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001136:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001138:	3204      	adds	r2, #4

0800113a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800113a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800113c:	d3fb      	bcc.n	8001136 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800113e:	f004 fd01 	bl	8005b44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001142:	f7ff f9eb 	bl	800051c <main>
  bx  lr    
 8001146:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001148:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800114c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001150:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001154:	08005ce0 	.word	0x08005ce0
  ldr r2, =_sbss
 8001158:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800115c:	20004d20 	.word	0x20004d20

08001160 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001160:	e7fe      	b.n	8001160 <ADC_IRQHandler>
	...

08001164 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001168:	4b0e      	ldr	r3, [pc, #56]	@ (80011a4 <HAL_Init+0x40>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a0d      	ldr	r2, [pc, #52]	@ (80011a4 <HAL_Init+0x40>)
 800116e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001172:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001174:	4b0b      	ldr	r3, [pc, #44]	@ (80011a4 <HAL_Init+0x40>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a0a      	ldr	r2, [pc, #40]	@ (80011a4 <HAL_Init+0x40>)
 800117a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800117e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001180:	4b08      	ldr	r3, [pc, #32]	@ (80011a4 <HAL_Init+0x40>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a07      	ldr	r2, [pc, #28]	@ (80011a4 <HAL_Init+0x40>)
 8001186:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800118a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800118c:	2003      	movs	r0, #3
 800118e:	f000 f8d8 	bl	8001342 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001192:	200f      	movs	r0, #15
 8001194:	f7ff ff10 	bl	8000fb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001198:	f7ff fd86 	bl	8000ca8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40023c00 	.word	0x40023c00

080011a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011ac:	4b06      	ldr	r3, [pc, #24]	@ (80011c8 <HAL_IncTick+0x20>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	461a      	mov	r2, r3
 80011b2:	4b06      	ldr	r3, [pc, #24]	@ (80011cc <HAL_IncTick+0x24>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4413      	add	r3, r2
 80011b8:	4a04      	ldr	r2, [pc, #16]	@ (80011cc <HAL_IncTick+0x24>)
 80011ba:	6013      	str	r3, [r2, #0]
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	20000008 	.word	0x20000008
 80011cc:	200001f4 	.word	0x200001f4

080011d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  return uwTick;
 80011d4:	4b03      	ldr	r3, [pc, #12]	@ (80011e4 <HAL_GetTick+0x14>)
 80011d6:	681b      	ldr	r3, [r3, #0]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	200001f4 	.word	0x200001f4

080011e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f8:	4b0c      	ldr	r3, [pc, #48]	@ (800122c <__NVIC_SetPriorityGrouping+0x44>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011fe:	68ba      	ldr	r2, [r7, #8]
 8001200:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001204:	4013      	ands	r3, r2
 8001206:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001210:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001214:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001218:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800121a:	4a04      	ldr	r2, [pc, #16]	@ (800122c <__NVIC_SetPriorityGrouping+0x44>)
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	60d3      	str	r3, [r2, #12]
}
 8001220:	bf00      	nop
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001234:	4b04      	ldr	r3, [pc, #16]	@ (8001248 <__NVIC_GetPriorityGrouping+0x18>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	0a1b      	lsrs	r3, r3, #8
 800123a:	f003 0307 	and.w	r3, r3, #7
}
 800123e:	4618      	mov	r0, r3
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125a:	2b00      	cmp	r3, #0
 800125c:	db0b      	blt.n	8001276 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	f003 021f 	and.w	r2, r3, #31
 8001264:	4907      	ldr	r1, [pc, #28]	@ (8001284 <__NVIC_EnableIRQ+0x38>)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	095b      	lsrs	r3, r3, #5
 800126c:	2001      	movs	r0, #1
 800126e:	fa00 f202 	lsl.w	r2, r0, r2
 8001272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	e000e100 	.word	0xe000e100

08001288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	6039      	str	r1, [r7, #0]
 8001292:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001298:	2b00      	cmp	r3, #0
 800129a:	db0a      	blt.n	80012b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	490c      	ldr	r1, [pc, #48]	@ (80012d4 <__NVIC_SetPriority+0x4c>)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	0112      	lsls	r2, r2, #4
 80012a8:	b2d2      	uxtb	r2, r2
 80012aa:	440b      	add	r3, r1
 80012ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012b0:	e00a      	b.n	80012c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	4908      	ldr	r1, [pc, #32]	@ (80012d8 <__NVIC_SetPriority+0x50>)
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	f003 030f 	and.w	r3, r3, #15
 80012be:	3b04      	subs	r3, #4
 80012c0:	0112      	lsls	r2, r2, #4
 80012c2:	b2d2      	uxtb	r2, r2
 80012c4:	440b      	add	r3, r1
 80012c6:	761a      	strb	r2, [r3, #24]
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	e000e100 	.word	0xe000e100
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012dc:	b480      	push	{r7}
 80012de:	b089      	sub	sp, #36	@ 0x24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	f1c3 0307 	rsb	r3, r3, #7
 80012f6:	2b04      	cmp	r3, #4
 80012f8:	bf28      	it	cs
 80012fa:	2304      	movcs	r3, #4
 80012fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	3304      	adds	r3, #4
 8001302:	2b06      	cmp	r3, #6
 8001304:	d902      	bls.n	800130c <NVIC_EncodePriority+0x30>
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	3b03      	subs	r3, #3
 800130a:	e000      	b.n	800130e <NVIC_EncodePriority+0x32>
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001310:	f04f 32ff 	mov.w	r2, #4294967295
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43da      	mvns	r2, r3
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	401a      	ands	r2, r3
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001324:	f04f 31ff 	mov.w	r1, #4294967295
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	fa01 f303 	lsl.w	r3, r1, r3
 800132e:	43d9      	mvns	r1, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001334:	4313      	orrs	r3, r2
         );
}
 8001336:	4618      	mov	r0, r3
 8001338:	3724      	adds	r7, #36	@ 0x24
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff ff4c 	bl	80011e8 <__NVIC_SetPriorityGrouping>
}
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
 8001364:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800136a:	f7ff ff61 	bl	8001230 <__NVIC_GetPriorityGrouping>
 800136e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	68b9      	ldr	r1, [r7, #8]
 8001374:	6978      	ldr	r0, [r7, #20]
 8001376:	f7ff ffb1 	bl	80012dc <NVIC_EncodePriority>
 800137a:	4602      	mov	r2, r0
 800137c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001380:	4611      	mov	r1, r2
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff ff80 	bl	8001288 <__NVIC_SetPriority>
}
 8001388:	bf00      	nop
 800138a:	3718      	adds	r7, #24
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800139a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff ff54 	bl	800124c <__NVIC_EnableIRQ>
}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d101      	bne.n	80013be <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e05f      	b.n	800147e <HAL_DCMI_Init+0xd2>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d109      	bne.n	80013de <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff fc94 	bl	8000d00 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f7ff fc91 	bl	8000d00 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2202      	movs	r2, #2
 80013e2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	6812      	ldr	r2, [r2, #0]
 80013f0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80013f4:	f023 0308 	bic.w	r3, r3, #8
 80013f8:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	6819      	ldr	r1, [r3, #0]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685a      	ldr	r2, [r3, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	695b      	ldr	r3, [r3, #20]
 8001408:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800140e:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800141a:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001426:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	430a      	orrs	r2, r1
 800142e:	601a      	str	r2, [r3, #0]
                                     | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2b10      	cmp	r3, #16
 8001436:	d112      	bne.n	800145e <HAL_DCMI_Init+0xb2>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	7f1b      	ldrb	r3, [r3, #28]
 800143c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	7f5b      	ldrb	r3, [r3, #29]
 8001442:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001444:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	7f9b      	ldrb	r3, [r3, #30]
 800144a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 800144c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	7fdb      	ldrb	r3, [r3, #31]
 8001454:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 800145a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 800145c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	68da      	ldr	r2, [r3, #12]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f042 021e 	orr.w	r2, r2, #30
 800146c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2201      	movs	r2, #1
 8001478:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  return HAL_OK;
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d101      	bne.n	8001498 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e03b      	b.n	8001510 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d106      	bne.n	80014b2 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff fcd1 	bl	8000e54 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2202      	movs	r2, #2
 80014b6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	430a      	orrs	r2, r1
 80014ce:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014d6:	f023 0107 	bic.w	r1, r3, #7
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	689a      	ldr	r2, [r3, #8]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	430a      	orrs	r2, r1
 80014e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ec:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80014f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	68d1      	ldr	r1, [r2, #12]
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	6812      	ldr	r2, [r2, #0]
 80014fc:	430b      	orrs	r3, r1
 80014fe:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2201      	movs	r2, #1
 800150a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001518:	b480      	push	{r7}
 800151a:	b087      	sub	sp, #28
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001530:	2b01      	cmp	r3, #1
 8001532:	d101      	bne.n	8001538 <HAL_DMA2D_ConfigLayer+0x20>
 8001534:	2302      	movs	r3, #2
 8001536:	e079      	b.n	800162c <HAL_DMA2D_ConfigLayer+0x114>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2201      	movs	r2, #1
 800153c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2202      	movs	r2, #2
 8001544:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	011b      	lsls	r3, r3, #4
 800154c:	3318      	adds	r3, #24
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	4413      	add	r3, r2
 8001552:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	685a      	ldr	r2, [r3, #4]
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	041b      	lsls	r3, r3, #16
 800155e:	4313      	orrs	r3, r2
 8001560:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001562:	4b35      	ldr	r3, [pc, #212]	@ (8001638 <HAL_DMA2D_ConfigLayer+0x120>)
 8001564:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	2b0a      	cmp	r3, #10
 800156c:	d003      	beq.n	8001576 <HAL_DMA2D_ConfigLayer+0x5e>
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	2b09      	cmp	r3, #9
 8001574:	d107      	bne.n	8001586 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800157e:	697a      	ldr	r2, [r7, #20]
 8001580:	4313      	orrs	r3, r2
 8001582:	617b      	str	r3, [r7, #20]
 8001584:	e005      	b.n	8001592 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	061b      	lsls	r3, r3, #24
 800158c:	697a      	ldr	r2, [r7, #20]
 800158e:	4313      	orrs	r3, r2
 8001590:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d120      	bne.n	80015da <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	43db      	mvns	r3, r3
 80015a2:	ea02 0103 	and.w	r1, r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	697a      	ldr	r2, [r7, #20]
 80015ac:	430a      	orrs	r2, r1
 80015ae:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	6812      	ldr	r2, [r2, #0]
 80015b8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	2b0a      	cmp	r3, #10
 80015c0:	d003      	beq.n	80015ca <HAL_DMA2D_ConfigLayer+0xb2>
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	2b09      	cmp	r3, #9
 80015c8:	d127      	bne.n	800161a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	68da      	ldr	r2, [r3, #12]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80015d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80015d8:	e01f      	b.n	800161a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	69da      	ldr	r2, [r3, #28]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	43db      	mvns	r3, r3
 80015e4:	ea02 0103 	and.w	r1, r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	697a      	ldr	r2, [r7, #20]
 80015ee:	430a      	orrs	r2, r1
 80015f0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	6812      	ldr	r2, [r2, #0]
 80015fa:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	2b0a      	cmp	r3, #10
 8001602:	d003      	beq.n	800160c <HAL_DMA2D_ConfigLayer+0xf4>
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2b09      	cmp	r3, #9
 800160a:	d106      	bne.n	800161a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	68da      	ldr	r2, [r3, #12]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001618:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2201      	movs	r2, #1
 800161e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800162a:	2300      	movs	r3, #0
}
 800162c:	4618      	mov	r0, r3
 800162e:	371c      	adds	r7, #28
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	ff03000f 	.word	0xff03000f

0800163c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800163c:	b480      	push	{r7}
 800163e:	b089      	sub	sp, #36	@ 0x24
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001646:	2300      	movs	r3, #0
 8001648:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800164a:	2300      	movs	r3, #0
 800164c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800164e:	2300      	movs	r3, #0
 8001650:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
 8001656:	e177      	b.n	8001948 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001658:	2201      	movs	r2, #1
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	697a      	ldr	r2, [r7, #20]
 8001668:	4013      	ands	r3, r2
 800166a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	429a      	cmp	r2, r3
 8001672:	f040 8166 	bne.w	8001942 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f003 0303 	and.w	r3, r3, #3
 800167e:	2b01      	cmp	r3, #1
 8001680:	d005      	beq.n	800168e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800168a:	2b02      	cmp	r3, #2
 800168c:	d130      	bne.n	80016f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	2203      	movs	r2, #3
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43db      	mvns	r3, r3
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	4013      	ands	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	68da      	ldr	r2, [r3, #12]
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016c4:	2201      	movs	r2, #1
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	43db      	mvns	r3, r3
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	4013      	ands	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	091b      	lsrs	r3, r3, #4
 80016da:	f003 0201 	and.w	r2, r3, #1
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f003 0303 	and.w	r3, r3, #3
 80016f8:	2b03      	cmp	r3, #3
 80016fa:	d017      	beq.n	800172c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	2203      	movs	r2, #3
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4013      	ands	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	689a      	ldr	r2, [r3, #8]
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	4313      	orrs	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f003 0303 	and.w	r3, r3, #3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d123      	bne.n	8001780 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	08da      	lsrs	r2, r3, #3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3208      	adds	r2, #8
 8001740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001744:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	f003 0307 	and.w	r3, r3, #7
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	220f      	movs	r2, #15
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	43db      	mvns	r3, r3
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4013      	ands	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	691a      	ldr	r2, [r3, #16]
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	4313      	orrs	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	08da      	lsrs	r2, r3, #3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	3208      	adds	r2, #8
 800177a:	69b9      	ldr	r1, [r7, #24]
 800177c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	2203      	movs	r2, #3
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	43db      	mvns	r3, r3
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4013      	ands	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f003 0203 	and.w	r2, r3, #3
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	f000 80c0 	beq.w	8001942 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	4b66      	ldr	r3, [pc, #408]	@ (8001960 <HAL_GPIO_Init+0x324>)
 80017c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ca:	4a65      	ldr	r2, [pc, #404]	@ (8001960 <HAL_GPIO_Init+0x324>)
 80017cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80017d2:	4b63      	ldr	r3, [pc, #396]	@ (8001960 <HAL_GPIO_Init+0x324>)
 80017d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017de:	4a61      	ldr	r2, [pc, #388]	@ (8001964 <HAL_GPIO_Init+0x328>)
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	089b      	lsrs	r3, r3, #2
 80017e4:	3302      	adds	r3, #2
 80017e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	f003 0303 	and.w	r3, r3, #3
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	220f      	movs	r2, #15
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	43db      	mvns	r3, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4013      	ands	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a58      	ldr	r2, [pc, #352]	@ (8001968 <HAL_GPIO_Init+0x32c>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d037      	beq.n	800187a <HAL_GPIO_Init+0x23e>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a57      	ldr	r2, [pc, #348]	@ (800196c <HAL_GPIO_Init+0x330>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d031      	beq.n	8001876 <HAL_GPIO_Init+0x23a>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a56      	ldr	r2, [pc, #344]	@ (8001970 <HAL_GPIO_Init+0x334>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d02b      	beq.n	8001872 <HAL_GPIO_Init+0x236>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a55      	ldr	r2, [pc, #340]	@ (8001974 <HAL_GPIO_Init+0x338>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d025      	beq.n	800186e <HAL_GPIO_Init+0x232>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a54      	ldr	r2, [pc, #336]	@ (8001978 <HAL_GPIO_Init+0x33c>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d01f      	beq.n	800186a <HAL_GPIO_Init+0x22e>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a53      	ldr	r2, [pc, #332]	@ (800197c <HAL_GPIO_Init+0x340>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d019      	beq.n	8001866 <HAL_GPIO_Init+0x22a>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a52      	ldr	r2, [pc, #328]	@ (8001980 <HAL_GPIO_Init+0x344>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d013      	beq.n	8001862 <HAL_GPIO_Init+0x226>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a51      	ldr	r2, [pc, #324]	@ (8001984 <HAL_GPIO_Init+0x348>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d00d      	beq.n	800185e <HAL_GPIO_Init+0x222>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a50      	ldr	r2, [pc, #320]	@ (8001988 <HAL_GPIO_Init+0x34c>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d007      	beq.n	800185a <HAL_GPIO_Init+0x21e>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a4f      	ldr	r2, [pc, #316]	@ (800198c <HAL_GPIO_Init+0x350>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d101      	bne.n	8001856 <HAL_GPIO_Init+0x21a>
 8001852:	2309      	movs	r3, #9
 8001854:	e012      	b.n	800187c <HAL_GPIO_Init+0x240>
 8001856:	230a      	movs	r3, #10
 8001858:	e010      	b.n	800187c <HAL_GPIO_Init+0x240>
 800185a:	2308      	movs	r3, #8
 800185c:	e00e      	b.n	800187c <HAL_GPIO_Init+0x240>
 800185e:	2307      	movs	r3, #7
 8001860:	e00c      	b.n	800187c <HAL_GPIO_Init+0x240>
 8001862:	2306      	movs	r3, #6
 8001864:	e00a      	b.n	800187c <HAL_GPIO_Init+0x240>
 8001866:	2305      	movs	r3, #5
 8001868:	e008      	b.n	800187c <HAL_GPIO_Init+0x240>
 800186a:	2304      	movs	r3, #4
 800186c:	e006      	b.n	800187c <HAL_GPIO_Init+0x240>
 800186e:	2303      	movs	r3, #3
 8001870:	e004      	b.n	800187c <HAL_GPIO_Init+0x240>
 8001872:	2302      	movs	r3, #2
 8001874:	e002      	b.n	800187c <HAL_GPIO_Init+0x240>
 8001876:	2301      	movs	r3, #1
 8001878:	e000      	b.n	800187c <HAL_GPIO_Init+0x240>
 800187a:	2300      	movs	r3, #0
 800187c:	69fa      	ldr	r2, [r7, #28]
 800187e:	f002 0203 	and.w	r2, r2, #3
 8001882:	0092      	lsls	r2, r2, #2
 8001884:	4093      	lsls	r3, r2
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4313      	orrs	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800188c:	4935      	ldr	r1, [pc, #212]	@ (8001964 <HAL_GPIO_Init+0x328>)
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	089b      	lsrs	r3, r3, #2
 8001892:	3302      	adds	r3, #2
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800189a:	4b3d      	ldr	r3, [pc, #244]	@ (8001990 <HAL_GPIO_Init+0x354>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	43db      	mvns	r3, r3
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4013      	ands	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018be:	4a34      	ldr	r2, [pc, #208]	@ (8001990 <HAL_GPIO_Init+0x354>)
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018c4:	4b32      	ldr	r3, [pc, #200]	@ (8001990 <HAL_GPIO_Init+0x354>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	43db      	mvns	r3, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4013      	ands	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d003      	beq.n	80018e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018e8:	4a29      	ldr	r2, [pc, #164]	@ (8001990 <HAL_GPIO_Init+0x354>)
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018ee:	4b28      	ldr	r3, [pc, #160]	@ (8001990 <HAL_GPIO_Init+0x354>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	43db      	mvns	r3, r3
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	4013      	ands	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	4313      	orrs	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001912:	4a1f      	ldr	r2, [pc, #124]	@ (8001990 <HAL_GPIO_Init+0x354>)
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001918:	4b1d      	ldr	r3, [pc, #116]	@ (8001990 <HAL_GPIO_Init+0x354>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	43db      	mvns	r3, r3
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4013      	ands	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d003      	beq.n	800193c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	4313      	orrs	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800193c:	4a14      	ldr	r2, [pc, #80]	@ (8001990 <HAL_GPIO_Init+0x354>)
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	3301      	adds	r3, #1
 8001946:	61fb      	str	r3, [r7, #28]
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	2b0f      	cmp	r3, #15
 800194c:	f67f ae84 	bls.w	8001658 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001950:	bf00      	nop
 8001952:	bf00      	nop
 8001954:	3724      	adds	r7, #36	@ 0x24
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	40023800 	.word	0x40023800
 8001964:	40013800 	.word	0x40013800
 8001968:	40020000 	.word	0x40020000
 800196c:	40020400 	.word	0x40020400
 8001970:	40020800 	.word	0x40020800
 8001974:	40020c00 	.word	0x40020c00
 8001978:	40021000 	.word	0x40021000
 800197c:	40021400 	.word	0x40021400
 8001980:	40021800 	.word	0x40021800
 8001984:	40021c00 	.word	0x40021c00
 8001988:	40022000 	.word	0x40022000
 800198c:	40022400 	.word	0x40022400
 8001990:	40013c00 	.word	0x40013c00

08001994 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	460b      	mov	r3, r1
 800199e:	807b      	strh	r3, [r7, #2]
 80019a0:	4613      	mov	r3, r2
 80019a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019a4:	787b      	ldrb	r3, [r7, #1]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d003      	beq.n	80019b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019aa:	887a      	ldrh	r2, [r7, #2]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019b0:	e003      	b.n	80019ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019b2:	887b      	ldrh	r3, [r7, #2]
 80019b4:	041a      	lsls	r2, r3, #16
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	619a      	str	r2, [r3, #24]
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
	...

080019c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e12b      	b.n	8001c32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d106      	bne.n	80019f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff fa52 	bl	8000e98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2224      	movs	r2, #36	@ 0x24
 80019f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f022 0201 	bic.w	r2, r2, #1
 8001a0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001a1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a2c:	f000 feb4 	bl	8002798 <HAL_RCC_GetPCLK1Freq>
 8001a30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	4a81      	ldr	r2, [pc, #516]	@ (8001c3c <HAL_I2C_Init+0x274>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d807      	bhi.n	8001a4c <HAL_I2C_Init+0x84>
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	4a80      	ldr	r2, [pc, #512]	@ (8001c40 <HAL_I2C_Init+0x278>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	bf94      	ite	ls
 8001a44:	2301      	movls	r3, #1
 8001a46:	2300      	movhi	r3, #0
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	e006      	b.n	8001a5a <HAL_I2C_Init+0x92>
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	4a7d      	ldr	r2, [pc, #500]	@ (8001c44 <HAL_I2C_Init+0x27c>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	bf94      	ite	ls
 8001a54:	2301      	movls	r3, #1
 8001a56:	2300      	movhi	r3, #0
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e0e7      	b.n	8001c32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	4a78      	ldr	r2, [pc, #480]	@ (8001c48 <HAL_I2C_Init+0x280>)
 8001a66:	fba2 2303 	umull	r2, r3, r2, r3
 8001a6a:	0c9b      	lsrs	r3, r3, #18
 8001a6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	68ba      	ldr	r2, [r7, #8]
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	6a1b      	ldr	r3, [r3, #32]
 8001a88:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	4a6a      	ldr	r2, [pc, #424]	@ (8001c3c <HAL_I2C_Init+0x274>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d802      	bhi.n	8001a9c <HAL_I2C_Init+0xd4>
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	e009      	b.n	8001ab0 <HAL_I2C_Init+0xe8>
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001aa2:	fb02 f303 	mul.w	r3, r2, r3
 8001aa6:	4a69      	ldr	r2, [pc, #420]	@ (8001c4c <HAL_I2C_Init+0x284>)
 8001aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8001aac:	099b      	lsrs	r3, r3, #6
 8001aae:	3301      	adds	r3, #1
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	6812      	ldr	r2, [r2, #0]
 8001ab4:	430b      	orrs	r3, r1
 8001ab6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001ac2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	495c      	ldr	r1, [pc, #368]	@ (8001c3c <HAL_I2C_Init+0x274>)
 8001acc:	428b      	cmp	r3, r1
 8001ace:	d819      	bhi.n	8001b04 <HAL_I2C_Init+0x13c>
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	1e59      	subs	r1, r3, #1
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ade:	1c59      	adds	r1, r3, #1
 8001ae0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001ae4:	400b      	ands	r3, r1
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00a      	beq.n	8001b00 <HAL_I2C_Init+0x138>
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	1e59      	subs	r1, r3, #1
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001af8:	3301      	adds	r3, #1
 8001afa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001afe:	e051      	b.n	8001ba4 <HAL_I2C_Init+0x1dc>
 8001b00:	2304      	movs	r3, #4
 8001b02:	e04f      	b.n	8001ba4 <HAL_I2C_Init+0x1dc>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d111      	bne.n	8001b30 <HAL_I2C_Init+0x168>
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	1e58      	subs	r0, r3, #1
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6859      	ldr	r1, [r3, #4]
 8001b14:	460b      	mov	r3, r1
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	440b      	add	r3, r1
 8001b1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b1e:	3301      	adds	r3, #1
 8001b20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	bf0c      	ite	eq
 8001b28:	2301      	moveq	r3, #1
 8001b2a:	2300      	movne	r3, #0
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	e012      	b.n	8001b56 <HAL_I2C_Init+0x18e>
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	1e58      	subs	r0, r3, #1
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6859      	ldr	r1, [r3, #4]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	0099      	lsls	r1, r3, #2
 8001b40:	440b      	add	r3, r1
 8001b42:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b46:	3301      	adds	r3, #1
 8001b48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	bf0c      	ite	eq
 8001b50:	2301      	moveq	r3, #1
 8001b52:	2300      	movne	r3, #0
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <HAL_I2C_Init+0x196>
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e022      	b.n	8001ba4 <HAL_I2C_Init+0x1dc>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d10e      	bne.n	8001b84 <HAL_I2C_Init+0x1bc>
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	1e58      	subs	r0, r3, #1
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6859      	ldr	r1, [r3, #4]
 8001b6e:	460b      	mov	r3, r1
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	440b      	add	r3, r1
 8001b74:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b78:	3301      	adds	r3, #1
 8001b7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b82:	e00f      	b.n	8001ba4 <HAL_I2C_Init+0x1dc>
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	1e58      	subs	r0, r3, #1
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6859      	ldr	r1, [r3, #4]
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	440b      	add	r3, r1
 8001b92:	0099      	lsls	r1, r3, #2
 8001b94:	440b      	add	r3, r1
 8001b96:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ba0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ba4:	6879      	ldr	r1, [r7, #4]
 8001ba6:	6809      	ldr	r1, [r1, #0]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	69da      	ldr	r2, [r3, #28]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a1b      	ldr	r3, [r3, #32]
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001bd2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	6911      	ldr	r1, [r2, #16]
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	68d2      	ldr	r2, [r2, #12]
 8001bde:	4311      	orrs	r1, r2
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	6812      	ldr	r2, [r2, #0]
 8001be4:	430b      	orrs	r3, r1
 8001be6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	695a      	ldr	r2, [r3, #20]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	430a      	orrs	r2, r1
 8001c02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f042 0201 	orr.w	r2, r2, #1
 8001c12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2220      	movs	r2, #32
 8001c1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	000186a0 	.word	0x000186a0
 8001c40:	001e847f 	.word	0x001e847f
 8001c44:	003d08ff 	.word	0x003d08ff
 8001c48:	431bde83 	.word	0x431bde83
 8001c4c:	10624dd3 	.word	0x10624dd3

08001c50 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b20      	cmp	r3, #32
 8001c64:	d129      	bne.n	8001cba <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2224      	movs	r2, #36	@ 0x24
 8001c6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f022 0201 	bic.w	r2, r2, #1
 8001c7c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 0210 	bic.w	r2, r2, #16
 8001c8c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f042 0201 	orr.w	r2, r2, #1
 8001cac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2220      	movs	r2, #32
 8001cb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	e000      	b.n	8001cbc <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8001cba:	2302      	movs	r3, #2
  }
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b20      	cmp	r3, #32
 8001ce0:	d12a      	bne.n	8001d38 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2224      	movs	r2, #36	@ 0x24
 8001ce6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f022 0201 	bic.w	r2, r2, #1
 8001cf8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d00:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8001d02:	89fb      	ldrh	r3, [r7, #14]
 8001d04:	f023 030f 	bic.w	r3, r3, #15
 8001d08:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	89fb      	ldrh	r3, [r7, #14]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	89fa      	ldrh	r2, [r7, #14]
 8001d1a:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f042 0201 	orr.w	r2, r2, #1
 8001d2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2220      	movs	r2, #32
 8001d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8001d34:	2300      	movs	r3, #0
 8001d36:	e000      	b.n	8001d3a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8001d38:	2302      	movs	r3, #2
  }
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
	...

08001d48 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	603b      	str	r3, [r7, #0]
 8001d56:	4b20      	ldr	r3, [pc, #128]	@ (8001dd8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5a:	4a1f      	ldr	r2, [pc, #124]	@ (8001dd8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001d5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d62:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d6a:	603b      	str	r3, [r7, #0]
 8001d6c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001d6e:	4b1b      	ldr	r3, [pc, #108]	@ (8001ddc <HAL_PWREx_EnableOverDrive+0x94>)
 8001d70:	2201      	movs	r2, #1
 8001d72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d74:	f7ff fa2c 	bl	80011d0 <HAL_GetTick>
 8001d78:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d7a:	e009      	b.n	8001d90 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d7c:	f7ff fa28 	bl	80011d0 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d8a:	d901      	bls.n	8001d90 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e01f      	b.n	8001dd0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d90:	4b13      	ldr	r3, [pc, #76]	@ (8001de0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d9c:	d1ee      	bne.n	8001d7c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001d9e:	4b11      	ldr	r3, [pc, #68]	@ (8001de4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001da0:	2201      	movs	r2, #1
 8001da2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001da4:	f7ff fa14 	bl	80011d0 <HAL_GetTick>
 8001da8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001daa:	e009      	b.n	8001dc0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001dac:	f7ff fa10 	bl	80011d0 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001dba:	d901      	bls.n	8001dc0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e007      	b.n	8001dd0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001dc0:	4b07      	ldr	r3, [pc, #28]	@ (8001de0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dc8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001dcc:	d1ee      	bne.n	8001dac <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	420e0040 	.word	0x420e0040
 8001de0:	40007000 	.word	0x40007000
 8001de4:	420e0044 	.word	0x420e0044

08001de8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d101      	bne.n	8001dfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e267      	b.n	80022ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d075      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001e06:	4b88      	ldr	r3, [pc, #544]	@ (8002028 <HAL_RCC_OscConfig+0x240>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 030c 	and.w	r3, r3, #12
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	d00c      	beq.n	8001e2c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e12:	4b85      	ldr	r3, [pc, #532]	@ (8002028 <HAL_RCC_OscConfig+0x240>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001e1a:	2b08      	cmp	r3, #8
 8001e1c:	d112      	bne.n	8001e44 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e1e:	4b82      	ldr	r3, [pc, #520]	@ (8002028 <HAL_RCC_OscConfig+0x240>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e2a:	d10b      	bne.n	8001e44 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e2c:	4b7e      	ldr	r3, [pc, #504]	@ (8002028 <HAL_RCC_OscConfig+0x240>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d05b      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x108>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d157      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e242      	b.n	80022ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e4c:	d106      	bne.n	8001e5c <HAL_RCC_OscConfig+0x74>
 8001e4e:	4b76      	ldr	r3, [pc, #472]	@ (8002028 <HAL_RCC_OscConfig+0x240>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a75      	ldr	r2, [pc, #468]	@ (8002028 <HAL_RCC_OscConfig+0x240>)
 8001e54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e58:	6013      	str	r3, [r2, #0]
 8001e5a:	e01d      	b.n	8001e98 <HAL_RCC_OscConfig+0xb0>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e64:	d10c      	bne.n	8001e80 <HAL_RCC_OscConfig+0x98>
 8001e66:	4b70      	ldr	r3, [pc, #448]	@ (8002028 <HAL_RCC_OscConfig+0x240>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a6f      	ldr	r2, [pc, #444]	@ (8002028 <HAL_RCC_OscConfig+0x240>)
 8001e6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e70:	6013      	str	r3, [r2, #0]
 8001e72:	4b6d      	ldr	r3, [pc, #436]	@ (8002028 <HAL_RCC_OscConfig+0x240>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a6c      	ldr	r2, [pc, #432]	@ (8002028 <HAL_RCC_OscConfig+0x240>)
 8001e78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e7c:	6013      	str	r3, [r2, #0]
 8001e7e:	e00b      	b.n	8001e98 <HAL_RCC_OscConfig+0xb0>
 8001e80:	4b69      	ldr	r3, [pc, #420]	@ (8002028 <HAL_RCC_OscConfig+0x240>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a68      	ldr	r2, [pc, #416]	@ (8002028 <HAL_RCC_OscConfig+0x240>)
 8001e86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e8a:	6013      	str	r3, [r2, #0]
 8001e8c:	4b66      	ldr	r3, [pc, #408]	@ (8002028 <HAL_RCC_OscConfig+0x240>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a65      	ldr	r2, [pc, #404]	@ (8002028 <HAL_RCC_OscConfig+0x240>)
 8001e92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d013      	beq.n	8001ec8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea0:	f7ff f996 	bl	80011d0 <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ea8:	f7ff f992 	bl	80011d0 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b64      	cmp	r3, #100	@ 0x64
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e207      	b.n	80022ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eba:	4b5b      	ldr	r3, [pc, #364]	@ (8002028 <HAL_RCC_OscConfig+0x240>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d0f0      	beq.n	8001ea8 <HAL_RCC_OscConfig+0xc0>
 8001ec6:	e014      	b.n	8001ef2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec8:	f7ff f982 	bl	80011d0 <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ed0:	f7ff f97e 	bl	80011d0 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b64      	cmp	r3, #100	@ 0x64
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e1f3      	b.n	80022ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ee2:	4b51      	ldr	r3, [pc, #324]	@ (8002028 <HAL_RCC_OscConfig+0x240>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f0      	bne.n	8001ed0 <HAL_RCC_OscConfig+0xe8>
 8001eee:	e000      	b.n	8001ef2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ef0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d063      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001efe:	4b4a      	ldr	r3, [pc, #296]	@ (8002028 <HAL_RCC_OscConfig+0x240>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f003 030c 	and.w	r3, r3, #12
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d00b      	beq.n	8001f22 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f0a:	4b47      	ldr	r3, [pc, #284]	@ (8002028 <HAL_RCC_OscConfig+0x240>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001f12:	2b08      	cmp	r3, #8
 8001f14:	d11c      	bne.n	8001f50 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f16:	4b44      	ldr	r3, [pc, #272]	@ (8002028 <HAL_RCC_OscConfig+0x240>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d116      	bne.n	8001f50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f22:	4b41      	ldr	r3, [pc, #260]	@ (8002028 <HAL_RCC_OscConfig+0x240>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d005      	beq.n	8001f3a <HAL_RCC_OscConfig+0x152>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d001      	beq.n	8001f3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e1c7      	b.n	80022ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f3a:	4b3b      	ldr	r3, [pc, #236]	@ (8002028 <HAL_RCC_OscConfig+0x240>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	4937      	ldr	r1, [pc, #220]	@ (8002028 <HAL_RCC_OscConfig+0x240>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f4e:	e03a      	b.n	8001fc6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d020      	beq.n	8001f9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f58:	4b34      	ldr	r3, [pc, #208]	@ (800202c <HAL_RCC_OscConfig+0x244>)
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5e:	f7ff f937 	bl	80011d0 <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f64:	e008      	b.n	8001f78 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f66:	f7ff f933 	bl	80011d0 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e1a8      	b.n	80022ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f78:	4b2b      	ldr	r3, [pc, #172]	@ (8002028 <HAL_RCC_OscConfig+0x240>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d0f0      	beq.n	8001f66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f84:	4b28      	ldr	r3, [pc, #160]	@ (8002028 <HAL_RCC_OscConfig+0x240>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	4925      	ldr	r1, [pc, #148]	@ (8002028 <HAL_RCC_OscConfig+0x240>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	600b      	str	r3, [r1, #0]
 8001f98:	e015      	b.n	8001fc6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f9a:	4b24      	ldr	r3, [pc, #144]	@ (800202c <HAL_RCC_OscConfig+0x244>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa0:	f7ff f916 	bl	80011d0 <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fa8:	f7ff f912 	bl	80011d0 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e187      	b.n	80022ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fba:	4b1b      	ldr	r3, [pc, #108]	@ (8002028 <HAL_RCC_OscConfig+0x240>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1f0      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0308 	and.w	r3, r3, #8
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d036      	beq.n	8002040 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d016      	beq.n	8002008 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fda:	4b15      	ldr	r3, [pc, #84]	@ (8002030 <HAL_RCC_OscConfig+0x248>)
 8001fdc:	2201      	movs	r2, #1
 8001fde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe0:	f7ff f8f6 	bl	80011d0 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fe8:	f7ff f8f2 	bl	80011d0 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e167      	b.n	80022ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8002028 <HAL_RCC_OscConfig+0x240>)
 8001ffc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d0f0      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x200>
 8002006:	e01b      	b.n	8002040 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002008:	4b09      	ldr	r3, [pc, #36]	@ (8002030 <HAL_RCC_OscConfig+0x248>)
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800200e:	f7ff f8df 	bl	80011d0 <HAL_GetTick>
 8002012:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002014:	e00e      	b.n	8002034 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002016:	f7ff f8db 	bl	80011d0 <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d907      	bls.n	8002034 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e150      	b.n	80022ca <HAL_RCC_OscConfig+0x4e2>
 8002028:	40023800 	.word	0x40023800
 800202c:	42470000 	.word	0x42470000
 8002030:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002034:	4b88      	ldr	r3, [pc, #544]	@ (8002258 <HAL_RCC_OscConfig+0x470>)
 8002036:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1ea      	bne.n	8002016 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	2b00      	cmp	r3, #0
 800204a:	f000 8097 	beq.w	800217c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800204e:	2300      	movs	r3, #0
 8002050:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002052:	4b81      	ldr	r3, [pc, #516]	@ (8002258 <HAL_RCC_OscConfig+0x470>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002056:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d10f      	bne.n	800207e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	60bb      	str	r3, [r7, #8]
 8002062:	4b7d      	ldr	r3, [pc, #500]	@ (8002258 <HAL_RCC_OscConfig+0x470>)
 8002064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002066:	4a7c      	ldr	r2, [pc, #496]	@ (8002258 <HAL_RCC_OscConfig+0x470>)
 8002068:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800206c:	6413      	str	r3, [r2, #64]	@ 0x40
 800206e:	4b7a      	ldr	r3, [pc, #488]	@ (8002258 <HAL_RCC_OscConfig+0x470>)
 8002070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002072:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002076:	60bb      	str	r3, [r7, #8]
 8002078:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800207a:	2301      	movs	r3, #1
 800207c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800207e:	4b77      	ldr	r3, [pc, #476]	@ (800225c <HAL_RCC_OscConfig+0x474>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002086:	2b00      	cmp	r3, #0
 8002088:	d118      	bne.n	80020bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800208a:	4b74      	ldr	r3, [pc, #464]	@ (800225c <HAL_RCC_OscConfig+0x474>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a73      	ldr	r2, [pc, #460]	@ (800225c <HAL_RCC_OscConfig+0x474>)
 8002090:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002094:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002096:	f7ff f89b 	bl	80011d0 <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800209c:	e008      	b.n	80020b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800209e:	f7ff f897 	bl	80011d0 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e10c      	b.n	80022ca <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b0:	4b6a      	ldr	r3, [pc, #424]	@ (800225c <HAL_RCC_OscConfig+0x474>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d0f0      	beq.n	800209e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d106      	bne.n	80020d2 <HAL_RCC_OscConfig+0x2ea>
 80020c4:	4b64      	ldr	r3, [pc, #400]	@ (8002258 <HAL_RCC_OscConfig+0x470>)
 80020c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020c8:	4a63      	ldr	r2, [pc, #396]	@ (8002258 <HAL_RCC_OscConfig+0x470>)
 80020ca:	f043 0301 	orr.w	r3, r3, #1
 80020ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80020d0:	e01c      	b.n	800210c <HAL_RCC_OscConfig+0x324>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	2b05      	cmp	r3, #5
 80020d8:	d10c      	bne.n	80020f4 <HAL_RCC_OscConfig+0x30c>
 80020da:	4b5f      	ldr	r3, [pc, #380]	@ (8002258 <HAL_RCC_OscConfig+0x470>)
 80020dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020de:	4a5e      	ldr	r2, [pc, #376]	@ (8002258 <HAL_RCC_OscConfig+0x470>)
 80020e0:	f043 0304 	orr.w	r3, r3, #4
 80020e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80020e6:	4b5c      	ldr	r3, [pc, #368]	@ (8002258 <HAL_RCC_OscConfig+0x470>)
 80020e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ea:	4a5b      	ldr	r2, [pc, #364]	@ (8002258 <HAL_RCC_OscConfig+0x470>)
 80020ec:	f043 0301 	orr.w	r3, r3, #1
 80020f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80020f2:	e00b      	b.n	800210c <HAL_RCC_OscConfig+0x324>
 80020f4:	4b58      	ldr	r3, [pc, #352]	@ (8002258 <HAL_RCC_OscConfig+0x470>)
 80020f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020f8:	4a57      	ldr	r2, [pc, #348]	@ (8002258 <HAL_RCC_OscConfig+0x470>)
 80020fa:	f023 0301 	bic.w	r3, r3, #1
 80020fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002100:	4b55      	ldr	r3, [pc, #340]	@ (8002258 <HAL_RCC_OscConfig+0x470>)
 8002102:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002104:	4a54      	ldr	r2, [pc, #336]	@ (8002258 <HAL_RCC_OscConfig+0x470>)
 8002106:	f023 0304 	bic.w	r3, r3, #4
 800210a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d015      	beq.n	8002140 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002114:	f7ff f85c 	bl	80011d0 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800211a:	e00a      	b.n	8002132 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800211c:	f7ff f858 	bl	80011d0 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	f241 3288 	movw	r2, #5000	@ 0x1388
 800212a:	4293      	cmp	r3, r2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e0cb      	b.n	80022ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002132:	4b49      	ldr	r3, [pc, #292]	@ (8002258 <HAL_RCC_OscConfig+0x470>)
 8002134:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d0ee      	beq.n	800211c <HAL_RCC_OscConfig+0x334>
 800213e:	e014      	b.n	800216a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002140:	f7ff f846 	bl	80011d0 <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002146:	e00a      	b.n	800215e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002148:	f7ff f842 	bl	80011d0 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002156:	4293      	cmp	r3, r2
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e0b5      	b.n	80022ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800215e:	4b3e      	ldr	r3, [pc, #248]	@ (8002258 <HAL_RCC_OscConfig+0x470>)
 8002160:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1ee      	bne.n	8002148 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800216a:	7dfb      	ldrb	r3, [r7, #23]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d105      	bne.n	800217c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002170:	4b39      	ldr	r3, [pc, #228]	@ (8002258 <HAL_RCC_OscConfig+0x470>)
 8002172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002174:	4a38      	ldr	r2, [pc, #224]	@ (8002258 <HAL_RCC_OscConfig+0x470>)
 8002176:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800217a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	2b00      	cmp	r3, #0
 8002182:	f000 80a1 	beq.w	80022c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002186:	4b34      	ldr	r3, [pc, #208]	@ (8002258 <HAL_RCC_OscConfig+0x470>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f003 030c 	and.w	r3, r3, #12
 800218e:	2b08      	cmp	r3, #8
 8002190:	d05c      	beq.n	800224c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	2b02      	cmp	r3, #2
 8002198:	d141      	bne.n	800221e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800219a:	4b31      	ldr	r3, [pc, #196]	@ (8002260 <HAL_RCC_OscConfig+0x478>)
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a0:	f7ff f816 	bl	80011d0 <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a8:	f7ff f812 	bl	80011d0 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e087      	b.n	80022ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ba:	4b27      	ldr	r3, [pc, #156]	@ (8002258 <HAL_RCC_OscConfig+0x470>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1f0      	bne.n	80021a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	69da      	ldr	r2, [r3, #28]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	431a      	orrs	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d4:	019b      	lsls	r3, r3, #6
 80021d6:	431a      	orrs	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021dc:	085b      	lsrs	r3, r3, #1
 80021de:	3b01      	subs	r3, #1
 80021e0:	041b      	lsls	r3, r3, #16
 80021e2:	431a      	orrs	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021e8:	061b      	lsls	r3, r3, #24
 80021ea:	491b      	ldr	r1, [pc, #108]	@ (8002258 <HAL_RCC_OscConfig+0x470>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002260 <HAL_RCC_OscConfig+0x478>)
 80021f2:	2201      	movs	r2, #1
 80021f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f6:	f7fe ffeb 	bl	80011d0 <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021fc:	e008      	b.n	8002210 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021fe:	f7fe ffe7 	bl	80011d0 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e05c      	b.n	80022ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002210:	4b11      	ldr	r3, [pc, #68]	@ (8002258 <HAL_RCC_OscConfig+0x470>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0f0      	beq.n	80021fe <HAL_RCC_OscConfig+0x416>
 800221c:	e054      	b.n	80022c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800221e:	4b10      	ldr	r3, [pc, #64]	@ (8002260 <HAL_RCC_OscConfig+0x478>)
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002224:	f7fe ffd4 	bl	80011d0 <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800222c:	f7fe ffd0 	bl	80011d0 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e045      	b.n	80022ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800223e:	4b06      	ldr	r3, [pc, #24]	@ (8002258 <HAL_RCC_OscConfig+0x470>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1f0      	bne.n	800222c <HAL_RCC_OscConfig+0x444>
 800224a:	e03d      	b.n	80022c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d107      	bne.n	8002264 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e038      	b.n	80022ca <HAL_RCC_OscConfig+0x4e2>
 8002258:	40023800 	.word	0x40023800
 800225c:	40007000 	.word	0x40007000
 8002260:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002264:	4b1b      	ldr	r3, [pc, #108]	@ (80022d4 <HAL_RCC_OscConfig+0x4ec>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d028      	beq.n	80022c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800227c:	429a      	cmp	r2, r3
 800227e:	d121      	bne.n	80022c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800228a:	429a      	cmp	r2, r3
 800228c:	d11a      	bne.n	80022c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002294:	4013      	ands	r3, r2
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800229a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800229c:	4293      	cmp	r3, r2
 800229e:	d111      	bne.n	80022c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022aa:	085b      	lsrs	r3, r3, #1
 80022ac:	3b01      	subs	r3, #1
 80022ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d107      	bne.n	80022c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d001      	beq.n	80022c8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e000      	b.n	80022ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3718      	adds	r7, #24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40023800 	.word	0x40023800

080022d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e0cc      	b.n	8002486 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022ec:	4b68      	ldr	r3, [pc, #416]	@ (8002490 <HAL_RCC_ClockConfig+0x1b8>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 030f 	and.w	r3, r3, #15
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d90c      	bls.n	8002314 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022fa:	4b65      	ldr	r3, [pc, #404]	@ (8002490 <HAL_RCC_ClockConfig+0x1b8>)
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	b2d2      	uxtb	r2, r2
 8002300:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002302:	4b63      	ldr	r3, [pc, #396]	@ (8002490 <HAL_RCC_ClockConfig+0x1b8>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	429a      	cmp	r2, r3
 800230e:	d001      	beq.n	8002314 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e0b8      	b.n	8002486 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d020      	beq.n	8002362 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	2b00      	cmp	r3, #0
 800232a:	d005      	beq.n	8002338 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800232c:	4b59      	ldr	r3, [pc, #356]	@ (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	4a58      	ldr	r2, [pc, #352]	@ (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 8002332:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002336:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0308 	and.w	r3, r3, #8
 8002340:	2b00      	cmp	r3, #0
 8002342:	d005      	beq.n	8002350 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002344:	4b53      	ldr	r3, [pc, #332]	@ (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	4a52      	ldr	r2, [pc, #328]	@ (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 800234a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800234e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002350:	4b50      	ldr	r3, [pc, #320]	@ (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	494d      	ldr	r1, [pc, #308]	@ (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 800235e:	4313      	orrs	r3, r2
 8002360:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	2b00      	cmp	r3, #0
 800236c:	d044      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d107      	bne.n	8002386 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002376:	4b47      	ldr	r3, [pc, #284]	@ (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d119      	bne.n	80023b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e07f      	b.n	8002486 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2b02      	cmp	r3, #2
 800238c:	d003      	beq.n	8002396 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002392:	2b03      	cmp	r3, #3
 8002394:	d107      	bne.n	80023a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002396:	4b3f      	ldr	r3, [pc, #252]	@ (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d109      	bne.n	80023b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e06f      	b.n	8002486 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a6:	4b3b      	ldr	r3, [pc, #236]	@ (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e067      	b.n	8002486 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023b6:	4b37      	ldr	r3, [pc, #220]	@ (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f023 0203 	bic.w	r2, r3, #3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	4934      	ldr	r1, [pc, #208]	@ (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023c8:	f7fe ff02 	bl	80011d0 <HAL_GetTick>
 80023cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ce:	e00a      	b.n	80023e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023d0:	f7fe fefe 	bl	80011d0 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023de:	4293      	cmp	r3, r2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e04f      	b.n	8002486 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e6:	4b2b      	ldr	r3, [pc, #172]	@ (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f003 020c 	and.w	r2, r3, #12
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d1eb      	bne.n	80023d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023f8:	4b25      	ldr	r3, [pc, #148]	@ (8002490 <HAL_RCC_ClockConfig+0x1b8>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 030f 	and.w	r3, r3, #15
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	429a      	cmp	r2, r3
 8002404:	d20c      	bcs.n	8002420 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002406:	4b22      	ldr	r3, [pc, #136]	@ (8002490 <HAL_RCC_ClockConfig+0x1b8>)
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800240e:	4b20      	ldr	r3, [pc, #128]	@ (8002490 <HAL_RCC_ClockConfig+0x1b8>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 030f 	and.w	r3, r3, #15
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	429a      	cmp	r2, r3
 800241a:	d001      	beq.n	8002420 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e032      	b.n	8002486 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	2b00      	cmp	r3, #0
 800242a:	d008      	beq.n	800243e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800242c:	4b19      	ldr	r3, [pc, #100]	@ (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	4916      	ldr	r1, [pc, #88]	@ (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 800243a:	4313      	orrs	r3, r2
 800243c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0308 	and.w	r3, r3, #8
 8002446:	2b00      	cmp	r3, #0
 8002448:	d009      	beq.n	800245e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800244a:	4b12      	ldr	r3, [pc, #72]	@ (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	490e      	ldr	r1, [pc, #56]	@ (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 800245a:	4313      	orrs	r3, r2
 800245c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800245e:	f000 f889 	bl	8002574 <HAL_RCC_GetSysClockFreq>
 8002462:	4602      	mov	r2, r0
 8002464:	4b0b      	ldr	r3, [pc, #44]	@ (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	091b      	lsrs	r3, r3, #4
 800246a:	f003 030f 	and.w	r3, r3, #15
 800246e:	490a      	ldr	r1, [pc, #40]	@ (8002498 <HAL_RCC_ClockConfig+0x1c0>)
 8002470:	5ccb      	ldrb	r3, [r1, r3]
 8002472:	fa22 f303 	lsr.w	r3, r2, r3
 8002476:	4a09      	ldr	r2, [pc, #36]	@ (800249c <HAL_RCC_ClockConfig+0x1c4>)
 8002478:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800247a:	4b09      	ldr	r3, [pc, #36]	@ (80024a0 <HAL_RCC_ClockConfig+0x1c8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f7fe fd9a 	bl	8000fb8 <HAL_InitTick>

  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40023c00 	.word	0x40023c00
 8002494:	40023800 	.word	0x40023800
 8002498:	08005cb8 	.word	0x08005cb8
 800249c:	20000000 	.word	0x20000000
 80024a0:	20000004 	.word	0x20000004

080024a4 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b08c      	sub	sp, #48	@ 0x30
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d129      	bne.n	800250a <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 80024b6:	2300      	movs	r3, #0
 80024b8:	61bb      	str	r3, [r7, #24]
 80024ba:	4b2b      	ldr	r3, [pc, #172]	@ (8002568 <HAL_RCC_MCOConfig+0xc4>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024be:	4a2a      	ldr	r2, [pc, #168]	@ (8002568 <HAL_RCC_MCOConfig+0xc4>)
 80024c0:	f043 0301 	orr.w	r3, r3, #1
 80024c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80024c6:	4b28      	ldr	r3, [pc, #160]	@ (8002568 <HAL_RCC_MCOConfig+0xc4>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	61bb      	str	r3, [r7, #24]
 80024d0:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80024d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d8:	2302      	movs	r3, #2
 80024da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024dc:	2303      	movs	r3, #3
 80024de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80024e4:	2300      	movs	r3, #0
 80024e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80024e8:	f107 031c 	add.w	r3, r7, #28
 80024ec:	4619      	mov	r1, r3
 80024ee:	481f      	ldr	r0, [pc, #124]	@ (800256c <HAL_RCC_MCOConfig+0xc8>)
 80024f0:	f7ff f8a4 	bl	800163c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80024f4:	4b1c      	ldr	r3, [pc, #112]	@ (8002568 <HAL_RCC_MCOConfig+0xc4>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 80024fc:	68b9      	ldr	r1, [r7, #8]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	430b      	orrs	r3, r1
 8002502:	4919      	ldr	r1, [pc, #100]	@ (8002568 <HAL_RCC_MCOConfig+0xc4>)
 8002504:	4313      	orrs	r3, r2
 8002506:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8002508:	e029      	b.n	800255e <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 800250a:	2300      	movs	r3, #0
 800250c:	617b      	str	r3, [r7, #20]
 800250e:	4b16      	ldr	r3, [pc, #88]	@ (8002568 <HAL_RCC_MCOConfig+0xc4>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002512:	4a15      	ldr	r2, [pc, #84]	@ (8002568 <HAL_RCC_MCOConfig+0xc4>)
 8002514:	f043 0304 	orr.w	r3, r3, #4
 8002518:	6313      	str	r3, [r2, #48]	@ 0x30
 800251a:	4b13      	ldr	r3, [pc, #76]	@ (8002568 <HAL_RCC_MCOConfig+0xc4>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251e:	f003 0304 	and.w	r3, r3, #4
 8002522:	617b      	str	r3, [r7, #20]
 8002524:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8002526:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800252a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252c:	2302      	movs	r3, #2
 800252e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002530:	2303      	movs	r3, #3
 8002532:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002534:	2300      	movs	r3, #0
 8002536:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002538:	2300      	movs	r3, #0
 800253a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800253c:	f107 031c 	add.w	r3, r7, #28
 8002540:	4619      	mov	r1, r3
 8002542:	480b      	ldr	r0, [pc, #44]	@ (8002570 <HAL_RCC_MCOConfig+0xcc>)
 8002544:	f7ff f87a 	bl	800163c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8002548:	4b07      	ldr	r3, [pc, #28]	@ (8002568 <HAL_RCC_MCOConfig+0xc4>)
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	00d9      	lsls	r1, r3, #3
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	430b      	orrs	r3, r1
 8002558:	4903      	ldr	r1, [pc, #12]	@ (8002568 <HAL_RCC_MCOConfig+0xc4>)
 800255a:	4313      	orrs	r3, r2
 800255c:	608b      	str	r3, [r1, #8]
}
 800255e:	bf00      	nop
 8002560:	3730      	adds	r7, #48	@ 0x30
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40023800 	.word	0x40023800
 800256c:	40020000 	.word	0x40020000
 8002570:	40020800 	.word	0x40020800

08002574 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002574:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002578:	b094      	sub	sp, #80	@ 0x50
 800257a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800257c:	2300      	movs	r3, #0
 800257e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002580:	2300      	movs	r3, #0
 8002582:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002584:	2300      	movs	r3, #0
 8002586:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002588:	2300      	movs	r3, #0
 800258a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800258c:	4b79      	ldr	r3, [pc, #484]	@ (8002774 <HAL_RCC_GetSysClockFreq+0x200>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f003 030c 	and.w	r3, r3, #12
 8002594:	2b08      	cmp	r3, #8
 8002596:	d00d      	beq.n	80025b4 <HAL_RCC_GetSysClockFreq+0x40>
 8002598:	2b08      	cmp	r3, #8
 800259a:	f200 80e1 	bhi.w	8002760 <HAL_RCC_GetSysClockFreq+0x1ec>
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d002      	beq.n	80025a8 <HAL_RCC_GetSysClockFreq+0x34>
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	d003      	beq.n	80025ae <HAL_RCC_GetSysClockFreq+0x3a>
 80025a6:	e0db      	b.n	8002760 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025a8:	4b73      	ldr	r3, [pc, #460]	@ (8002778 <HAL_RCC_GetSysClockFreq+0x204>)
 80025aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025ac:	e0db      	b.n	8002766 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025ae:	4b73      	ldr	r3, [pc, #460]	@ (800277c <HAL_RCC_GetSysClockFreq+0x208>)
 80025b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025b2:	e0d8      	b.n	8002766 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025b4:	4b6f      	ldr	r3, [pc, #444]	@ (8002774 <HAL_RCC_GetSysClockFreq+0x200>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025bc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025be:	4b6d      	ldr	r3, [pc, #436]	@ (8002774 <HAL_RCC_GetSysClockFreq+0x200>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d063      	beq.n	8002692 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ca:	4b6a      	ldr	r3, [pc, #424]	@ (8002774 <HAL_RCC_GetSysClockFreq+0x200>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	099b      	lsrs	r3, r3, #6
 80025d0:	2200      	movs	r2, #0
 80025d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80025d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80025d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80025de:	2300      	movs	r3, #0
 80025e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80025e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80025e6:	4622      	mov	r2, r4
 80025e8:	462b      	mov	r3, r5
 80025ea:	f04f 0000 	mov.w	r0, #0
 80025ee:	f04f 0100 	mov.w	r1, #0
 80025f2:	0159      	lsls	r1, r3, #5
 80025f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025f8:	0150      	lsls	r0, r2, #5
 80025fa:	4602      	mov	r2, r0
 80025fc:	460b      	mov	r3, r1
 80025fe:	4621      	mov	r1, r4
 8002600:	1a51      	subs	r1, r2, r1
 8002602:	6139      	str	r1, [r7, #16]
 8002604:	4629      	mov	r1, r5
 8002606:	eb63 0301 	sbc.w	r3, r3, r1
 800260a:	617b      	str	r3, [r7, #20]
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	f04f 0300 	mov.w	r3, #0
 8002614:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002618:	4659      	mov	r1, fp
 800261a:	018b      	lsls	r3, r1, #6
 800261c:	4651      	mov	r1, sl
 800261e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002622:	4651      	mov	r1, sl
 8002624:	018a      	lsls	r2, r1, #6
 8002626:	4651      	mov	r1, sl
 8002628:	ebb2 0801 	subs.w	r8, r2, r1
 800262c:	4659      	mov	r1, fp
 800262e:	eb63 0901 	sbc.w	r9, r3, r1
 8002632:	f04f 0200 	mov.w	r2, #0
 8002636:	f04f 0300 	mov.w	r3, #0
 800263a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800263e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002642:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002646:	4690      	mov	r8, r2
 8002648:	4699      	mov	r9, r3
 800264a:	4623      	mov	r3, r4
 800264c:	eb18 0303 	adds.w	r3, r8, r3
 8002650:	60bb      	str	r3, [r7, #8]
 8002652:	462b      	mov	r3, r5
 8002654:	eb49 0303 	adc.w	r3, r9, r3
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	f04f 0200 	mov.w	r2, #0
 800265e:	f04f 0300 	mov.w	r3, #0
 8002662:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002666:	4629      	mov	r1, r5
 8002668:	024b      	lsls	r3, r1, #9
 800266a:	4621      	mov	r1, r4
 800266c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002670:	4621      	mov	r1, r4
 8002672:	024a      	lsls	r2, r1, #9
 8002674:	4610      	mov	r0, r2
 8002676:	4619      	mov	r1, r3
 8002678:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800267a:	2200      	movs	r2, #0
 800267c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800267e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002680:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002684:	f7fd fdb4 	bl	80001f0 <__aeabi_uldivmod>
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	4613      	mov	r3, r2
 800268e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002690:	e058      	b.n	8002744 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002692:	4b38      	ldr	r3, [pc, #224]	@ (8002774 <HAL_RCC_GetSysClockFreq+0x200>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	099b      	lsrs	r3, r3, #6
 8002698:	2200      	movs	r2, #0
 800269a:	4618      	mov	r0, r3
 800269c:	4611      	mov	r1, r2
 800269e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80026a2:	623b      	str	r3, [r7, #32]
 80026a4:	2300      	movs	r3, #0
 80026a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80026a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80026ac:	4642      	mov	r2, r8
 80026ae:	464b      	mov	r3, r9
 80026b0:	f04f 0000 	mov.w	r0, #0
 80026b4:	f04f 0100 	mov.w	r1, #0
 80026b8:	0159      	lsls	r1, r3, #5
 80026ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026be:	0150      	lsls	r0, r2, #5
 80026c0:	4602      	mov	r2, r0
 80026c2:	460b      	mov	r3, r1
 80026c4:	4641      	mov	r1, r8
 80026c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80026ca:	4649      	mov	r1, r9
 80026cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80026d0:	f04f 0200 	mov.w	r2, #0
 80026d4:	f04f 0300 	mov.w	r3, #0
 80026d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026e4:	ebb2 040a 	subs.w	r4, r2, sl
 80026e8:	eb63 050b 	sbc.w	r5, r3, fp
 80026ec:	f04f 0200 	mov.w	r2, #0
 80026f0:	f04f 0300 	mov.w	r3, #0
 80026f4:	00eb      	lsls	r3, r5, #3
 80026f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026fa:	00e2      	lsls	r2, r4, #3
 80026fc:	4614      	mov	r4, r2
 80026fe:	461d      	mov	r5, r3
 8002700:	4643      	mov	r3, r8
 8002702:	18e3      	adds	r3, r4, r3
 8002704:	603b      	str	r3, [r7, #0]
 8002706:	464b      	mov	r3, r9
 8002708:	eb45 0303 	adc.w	r3, r5, r3
 800270c:	607b      	str	r3, [r7, #4]
 800270e:	f04f 0200 	mov.w	r2, #0
 8002712:	f04f 0300 	mov.w	r3, #0
 8002716:	e9d7 4500 	ldrd	r4, r5, [r7]
 800271a:	4629      	mov	r1, r5
 800271c:	028b      	lsls	r3, r1, #10
 800271e:	4621      	mov	r1, r4
 8002720:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002724:	4621      	mov	r1, r4
 8002726:	028a      	lsls	r2, r1, #10
 8002728:	4610      	mov	r0, r2
 800272a:	4619      	mov	r1, r3
 800272c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800272e:	2200      	movs	r2, #0
 8002730:	61bb      	str	r3, [r7, #24]
 8002732:	61fa      	str	r2, [r7, #28]
 8002734:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002738:	f7fd fd5a 	bl	80001f0 <__aeabi_uldivmod>
 800273c:	4602      	mov	r2, r0
 800273e:	460b      	mov	r3, r1
 8002740:	4613      	mov	r3, r2
 8002742:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002744:	4b0b      	ldr	r3, [pc, #44]	@ (8002774 <HAL_RCC_GetSysClockFreq+0x200>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	0c1b      	lsrs	r3, r3, #16
 800274a:	f003 0303 	and.w	r3, r3, #3
 800274e:	3301      	adds	r3, #1
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002754:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002756:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002758:	fbb2 f3f3 	udiv	r3, r2, r3
 800275c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800275e:	e002      	b.n	8002766 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002760:	4b05      	ldr	r3, [pc, #20]	@ (8002778 <HAL_RCC_GetSysClockFreq+0x204>)
 8002762:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002764:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002766:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002768:	4618      	mov	r0, r3
 800276a:	3750      	adds	r7, #80	@ 0x50
 800276c:	46bd      	mov	sp, r7
 800276e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002772:	bf00      	nop
 8002774:	40023800 	.word	0x40023800
 8002778:	00f42400 	.word	0x00f42400
 800277c:	007a1200 	.word	0x007a1200

08002780 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002784:	4b03      	ldr	r3, [pc, #12]	@ (8002794 <HAL_RCC_GetHCLKFreq+0x14>)
 8002786:	681b      	ldr	r3, [r3, #0]
}
 8002788:	4618      	mov	r0, r3
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	20000000 	.word	0x20000000

08002798 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800279c:	f7ff fff0 	bl	8002780 <HAL_RCC_GetHCLKFreq>
 80027a0:	4602      	mov	r2, r0
 80027a2:	4b05      	ldr	r3, [pc, #20]	@ (80027b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	0a9b      	lsrs	r3, r3, #10
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	4903      	ldr	r1, [pc, #12]	@ (80027bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80027ae:	5ccb      	ldrb	r3, [r1, r3]
 80027b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40023800 	.word	0x40023800
 80027bc:	08005cc8 	.word	0x08005cc8

080027c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027c4:	f7ff ffdc 	bl	8002780 <HAL_RCC_GetHCLKFreq>
 80027c8:	4602      	mov	r2, r0
 80027ca:	4b05      	ldr	r3, [pc, #20]	@ (80027e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	0b5b      	lsrs	r3, r3, #13
 80027d0:	f003 0307 	and.w	r3, r3, #7
 80027d4:	4903      	ldr	r1, [pc, #12]	@ (80027e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027d6:	5ccb      	ldrb	r3, [r1, r3]
 80027d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027dc:	4618      	mov	r0, r3
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40023800 	.word	0x40023800
 80027e4:	08005cc8 	.word	0x08005cc8

080027e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	220f      	movs	r2, #15
 80027f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80027f8:	4b12      	ldr	r3, [pc, #72]	@ (8002844 <HAL_RCC_GetClockConfig+0x5c>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f003 0203 	and.w	r2, r3, #3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002804:	4b0f      	ldr	r3, [pc, #60]	@ (8002844 <HAL_RCC_GetClockConfig+0x5c>)
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002810:	4b0c      	ldr	r3, [pc, #48]	@ (8002844 <HAL_RCC_GetClockConfig+0x5c>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800281c:	4b09      	ldr	r3, [pc, #36]	@ (8002844 <HAL_RCC_GetClockConfig+0x5c>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	08db      	lsrs	r3, r3, #3
 8002822:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800282a:	4b07      	ldr	r3, [pc, #28]	@ (8002848 <HAL_RCC_GetClockConfig+0x60>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 020f 	and.w	r2, r3, #15
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	601a      	str	r2, [r3, #0]
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	40023800 	.word	0x40023800
 8002848:	40023c00 	.word	0x40023c00

0800284c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e07b      	b.n	8002956 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002862:	2b00      	cmp	r3, #0
 8002864:	d108      	bne.n	8002878 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800286e:	d009      	beq.n	8002884 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	61da      	str	r2, [r3, #28]
 8002876:	e005      	b.n	8002884 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d106      	bne.n	80028a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f7fe fb42 	bl	8000f28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2202      	movs	r2, #2
 80028a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80028cc:	431a      	orrs	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028d6:	431a      	orrs	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	431a      	orrs	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	431a      	orrs	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028f4:	431a      	orrs	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80028fe:	431a      	orrs	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002908:	ea42 0103 	orr.w	r1, r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002910:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	430a      	orrs	r2, r1
 800291a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	0c1b      	lsrs	r3, r3, #16
 8002922:	f003 0104 	and.w	r1, r3, #4
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800292a:	f003 0210 	and.w	r2, r3, #16
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	430a      	orrs	r2, r1
 8002934:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	69da      	ldr	r2, [r3, #28]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002944:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b082      	sub	sp, #8
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e041      	b.n	80029f4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2b00      	cmp	r3, #0
 800297a:	d106      	bne.n	800298a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 f839 	bl	80029fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2202      	movs	r2, #2
 800298e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	3304      	adds	r3, #4
 800299a:	4619      	mov	r1, r3
 800299c:	4610      	mov	r0, r2
 800299e:	f000 f9bf 	bl	8002d20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d001      	beq.n	8002a28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e04e      	b.n	8002ac6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68da      	ldr	r2, [r3, #12]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f042 0201 	orr.w	r2, r2, #1
 8002a3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a23      	ldr	r2, [pc, #140]	@ (8002ad4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d022      	beq.n	8002a90 <HAL_TIM_Base_Start_IT+0x80>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a52:	d01d      	beq.n	8002a90 <HAL_TIM_Base_Start_IT+0x80>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a1f      	ldr	r2, [pc, #124]	@ (8002ad8 <HAL_TIM_Base_Start_IT+0xc8>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d018      	beq.n	8002a90 <HAL_TIM_Base_Start_IT+0x80>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a1e      	ldr	r2, [pc, #120]	@ (8002adc <HAL_TIM_Base_Start_IT+0xcc>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d013      	beq.n	8002a90 <HAL_TIM_Base_Start_IT+0x80>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a1c      	ldr	r2, [pc, #112]	@ (8002ae0 <HAL_TIM_Base_Start_IT+0xd0>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d00e      	beq.n	8002a90 <HAL_TIM_Base_Start_IT+0x80>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a1b      	ldr	r2, [pc, #108]	@ (8002ae4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d009      	beq.n	8002a90 <HAL_TIM_Base_Start_IT+0x80>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a19      	ldr	r2, [pc, #100]	@ (8002ae8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d004      	beq.n	8002a90 <HAL_TIM_Base_Start_IT+0x80>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a18      	ldr	r2, [pc, #96]	@ (8002aec <HAL_TIM_Base_Start_IT+0xdc>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d111      	bne.n	8002ab4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 0307 	and.w	r3, r3, #7
 8002a9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2b06      	cmp	r3, #6
 8002aa0:	d010      	beq.n	8002ac4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f042 0201 	orr.w	r2, r2, #1
 8002ab0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ab2:	e007      	b.n	8002ac4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f042 0201 	orr.w	r2, r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3714      	adds	r7, #20
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	40010000 	.word	0x40010000
 8002ad8:	40000400 	.word	0x40000400
 8002adc:	40000800 	.word	0x40000800
 8002ae0:	40000c00 	.word	0x40000c00
 8002ae4:	40010400 	.word	0x40010400
 8002ae8:	40014000 	.word	0x40014000
 8002aec:	40001800 	.word	0x40001800

08002af0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d020      	beq.n	8002b54 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d01b      	beq.n	8002b54 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f06f 0202 	mvn.w	r2, #2
 8002b24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	f003 0303 	and.w	r3, r3, #3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 f8d2 	bl	8002ce4 <HAL_TIM_IC_CaptureCallback>
 8002b40:	e005      	b.n	8002b4e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 f8c4 	bl	8002cd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f000 f8d5 	bl	8002cf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	f003 0304 	and.w	r3, r3, #4
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d020      	beq.n	8002ba0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f003 0304 	and.w	r3, r3, #4
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d01b      	beq.n	8002ba0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f06f 0204 	mvn.w	r2, #4
 8002b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2202      	movs	r2, #2
 8002b76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f8ac 	bl	8002ce4 <HAL_TIM_IC_CaptureCallback>
 8002b8c:	e005      	b.n	8002b9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f89e 	bl	8002cd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 f8af 	bl	8002cf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	f003 0308 	and.w	r3, r3, #8
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d020      	beq.n	8002bec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f003 0308 	and.w	r3, r3, #8
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d01b      	beq.n	8002bec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f06f 0208 	mvn.w	r2, #8
 8002bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2204      	movs	r2, #4
 8002bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	f003 0303 	and.w	r3, r3, #3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f886 	bl	8002ce4 <HAL_TIM_IC_CaptureCallback>
 8002bd8:	e005      	b.n	8002be6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f878 	bl	8002cd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 f889 	bl	8002cf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	f003 0310 	and.w	r3, r3, #16
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d020      	beq.n	8002c38 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f003 0310 	and.w	r3, r3, #16
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d01b      	beq.n	8002c38 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f06f 0210 	mvn.w	r2, #16
 8002c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2208      	movs	r2, #8
 8002c0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d003      	beq.n	8002c26 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 f860 	bl	8002ce4 <HAL_TIM_IC_CaptureCallback>
 8002c24:	e005      	b.n	8002c32 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f852 	bl	8002cd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 f863 	bl	8002cf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00c      	beq.n	8002c5c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d007      	beq.n	8002c5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f06f 0201 	mvn.w	r2, #1
 8002c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7fe f80e 	bl	8000c78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00c      	beq.n	8002c80 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d007      	beq.n	8002c80 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f900 	bl	8002e80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00c      	beq.n	8002ca4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d007      	beq.n	8002ca4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 f834 	bl	8002d0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	f003 0320 	and.w	r3, r3, #32
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00c      	beq.n	8002cc8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f003 0320 	and.w	r3, r3, #32
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d007      	beq.n	8002cc8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f06f 0220 	mvn.w	r2, #32
 8002cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 f8d2 	bl	8002e6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cc8:	bf00      	nop
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a43      	ldr	r2, [pc, #268]	@ (8002e40 <TIM_Base_SetConfig+0x120>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d013      	beq.n	8002d60 <TIM_Base_SetConfig+0x40>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d3e:	d00f      	beq.n	8002d60 <TIM_Base_SetConfig+0x40>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a40      	ldr	r2, [pc, #256]	@ (8002e44 <TIM_Base_SetConfig+0x124>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d00b      	beq.n	8002d60 <TIM_Base_SetConfig+0x40>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a3f      	ldr	r2, [pc, #252]	@ (8002e48 <TIM_Base_SetConfig+0x128>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d007      	beq.n	8002d60 <TIM_Base_SetConfig+0x40>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a3e      	ldr	r2, [pc, #248]	@ (8002e4c <TIM_Base_SetConfig+0x12c>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d003      	beq.n	8002d60 <TIM_Base_SetConfig+0x40>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a3d      	ldr	r2, [pc, #244]	@ (8002e50 <TIM_Base_SetConfig+0x130>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d108      	bne.n	8002d72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a32      	ldr	r2, [pc, #200]	@ (8002e40 <TIM_Base_SetConfig+0x120>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d02b      	beq.n	8002dd2 <TIM_Base_SetConfig+0xb2>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d80:	d027      	beq.n	8002dd2 <TIM_Base_SetConfig+0xb2>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a2f      	ldr	r2, [pc, #188]	@ (8002e44 <TIM_Base_SetConfig+0x124>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d023      	beq.n	8002dd2 <TIM_Base_SetConfig+0xb2>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a2e      	ldr	r2, [pc, #184]	@ (8002e48 <TIM_Base_SetConfig+0x128>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d01f      	beq.n	8002dd2 <TIM_Base_SetConfig+0xb2>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a2d      	ldr	r2, [pc, #180]	@ (8002e4c <TIM_Base_SetConfig+0x12c>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d01b      	beq.n	8002dd2 <TIM_Base_SetConfig+0xb2>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a2c      	ldr	r2, [pc, #176]	@ (8002e50 <TIM_Base_SetConfig+0x130>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d017      	beq.n	8002dd2 <TIM_Base_SetConfig+0xb2>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a2b      	ldr	r2, [pc, #172]	@ (8002e54 <TIM_Base_SetConfig+0x134>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d013      	beq.n	8002dd2 <TIM_Base_SetConfig+0xb2>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a2a      	ldr	r2, [pc, #168]	@ (8002e58 <TIM_Base_SetConfig+0x138>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d00f      	beq.n	8002dd2 <TIM_Base_SetConfig+0xb2>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a29      	ldr	r2, [pc, #164]	@ (8002e5c <TIM_Base_SetConfig+0x13c>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d00b      	beq.n	8002dd2 <TIM_Base_SetConfig+0xb2>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a28      	ldr	r2, [pc, #160]	@ (8002e60 <TIM_Base_SetConfig+0x140>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d007      	beq.n	8002dd2 <TIM_Base_SetConfig+0xb2>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a27      	ldr	r2, [pc, #156]	@ (8002e64 <TIM_Base_SetConfig+0x144>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d003      	beq.n	8002dd2 <TIM_Base_SetConfig+0xb2>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a26      	ldr	r2, [pc, #152]	@ (8002e68 <TIM_Base_SetConfig+0x148>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d108      	bne.n	8002de4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002dd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	689a      	ldr	r2, [r3, #8]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a0e      	ldr	r2, [pc, #56]	@ (8002e40 <TIM_Base_SetConfig+0x120>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d003      	beq.n	8002e12 <TIM_Base_SetConfig+0xf2>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a10      	ldr	r2, [pc, #64]	@ (8002e50 <TIM_Base_SetConfig+0x130>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d103      	bne.n	8002e1a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	691a      	ldr	r2, [r3, #16]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f043 0204 	orr.w	r2, r3, #4
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	601a      	str	r2, [r3, #0]
}
 8002e32:	bf00      	nop
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	40010000 	.word	0x40010000
 8002e44:	40000400 	.word	0x40000400
 8002e48:	40000800 	.word	0x40000800
 8002e4c:	40000c00 	.word	0x40000c00
 8002e50:	40010400 	.word	0x40010400
 8002e54:	40014000 	.word	0x40014000
 8002e58:	40014400 	.word	0x40014400
 8002e5c:	40014800 	.word	0x40014800
 8002e60:	40001800 	.word	0x40001800
 8002e64:	40001c00 	.word	0x40001c00
 8002e68:	40002000 	.word	0x40002000

08002e6c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <__NVIC_SetPriority>:
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	6039      	str	r1, [r7, #0]
 8002e9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	db0a      	blt.n	8002ebe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	490c      	ldr	r1, [pc, #48]	@ (8002ee0 <__NVIC_SetPriority+0x4c>)
 8002eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb2:	0112      	lsls	r2, r2, #4
 8002eb4:	b2d2      	uxtb	r2, r2
 8002eb6:	440b      	add	r3, r1
 8002eb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002ebc:	e00a      	b.n	8002ed4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	4908      	ldr	r1, [pc, #32]	@ (8002ee4 <__NVIC_SetPriority+0x50>)
 8002ec4:	79fb      	ldrb	r3, [r7, #7]
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	3b04      	subs	r3, #4
 8002ecc:	0112      	lsls	r2, r2, #4
 8002ece:	b2d2      	uxtb	r2, r2
 8002ed0:	440b      	add	r3, r1
 8002ed2:	761a      	strb	r2, [r3, #24]
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr
 8002ee0:	e000e100 	.word	0xe000e100
 8002ee4:	e000ed00 	.word	0xe000ed00

08002ee8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002eec:	4b05      	ldr	r3, [pc, #20]	@ (8002f04 <SysTick_Handler+0x1c>)
 8002eee:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002ef0:	f001 fd46 	bl	8004980 <xTaskGetSchedulerState>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d001      	beq.n	8002efe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002efa:	f002 fb3d 	bl	8005578 <xPortSysTickHandler>
  }
}
 8002efe:	bf00      	nop
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	e000e010 	.word	0xe000e010

08002f08 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	f06f 0004 	mvn.w	r0, #4
 8002f12:	f7ff ffbf 	bl	8002e94 <__NVIC_SetPriority>
#endif
}
 8002f16:	bf00      	nop
 8002f18:	bd80      	pop	{r7, pc}
	...

08002f1c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f22:	f3ef 8305 	mrs	r3, IPSR
 8002f26:	603b      	str	r3, [r7, #0]
  return(result);
 8002f28:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002f2e:	f06f 0305 	mvn.w	r3, #5
 8002f32:	607b      	str	r3, [r7, #4]
 8002f34:	e00c      	b.n	8002f50 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002f36:	4b0a      	ldr	r3, [pc, #40]	@ (8002f60 <osKernelInitialize+0x44>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d105      	bne.n	8002f4a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002f3e:	4b08      	ldr	r3, [pc, #32]	@ (8002f60 <osKernelInitialize+0x44>)
 8002f40:	2201      	movs	r2, #1
 8002f42:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002f44:	2300      	movs	r3, #0
 8002f46:	607b      	str	r3, [r7, #4]
 8002f48:	e002      	b.n	8002f50 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f4e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002f50:	687b      	ldr	r3, [r7, #4]
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	200001f8 	.word	0x200001f8

08002f64 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f6a:	f3ef 8305 	mrs	r3, IPSR
 8002f6e:	603b      	str	r3, [r7, #0]
  return(result);
 8002f70:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d003      	beq.n	8002f7e <osKernelStart+0x1a>
    stat = osErrorISR;
 8002f76:	f06f 0305 	mvn.w	r3, #5
 8002f7a:	607b      	str	r3, [r7, #4]
 8002f7c:	e010      	b.n	8002fa0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8002fac <osKernelStart+0x48>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d109      	bne.n	8002f9a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002f86:	f7ff ffbf 	bl	8002f08 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002f8a:	4b08      	ldr	r3, [pc, #32]	@ (8002fac <osKernelStart+0x48>)
 8002f8c:	2202      	movs	r2, #2
 8002f8e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002f90:	f001 f892 	bl	80040b8 <vTaskStartScheduler>
      stat = osOK;
 8002f94:	2300      	movs	r3, #0
 8002f96:	607b      	str	r3, [r7, #4]
 8002f98:	e002      	b.n	8002fa0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f9e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002fa0:	687b      	ldr	r3, [r7, #4]
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	200001f8 	.word	0x200001f8

08002fb0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b08e      	sub	sp, #56	@ 0x38
 8002fb4:	af04      	add	r7, sp, #16
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002fc0:	f3ef 8305 	mrs	r3, IPSR
 8002fc4:	617b      	str	r3, [r7, #20]
  return(result);
 8002fc6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d17e      	bne.n	80030ca <osThreadNew+0x11a>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d07b      	beq.n	80030ca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002fd2:	2380      	movs	r3, #128	@ 0x80
 8002fd4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002fd6:	2318      	movs	r3, #24
 8002fd8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002fde:	f04f 33ff 	mov.w	r3, #4294967295
 8002fe2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d045      	beq.n	8003076 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d002      	beq.n	8002ff8 <osThreadNew+0x48>
        name = attr->name;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d002      	beq.n	8003006 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d008      	beq.n	800301e <osThreadNew+0x6e>
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	2b38      	cmp	r3, #56	@ 0x38
 8003010:	d805      	bhi.n	800301e <osThreadNew+0x6e>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <osThreadNew+0x72>
        return (NULL);
 800301e:	2300      	movs	r3, #0
 8003020:	e054      	b.n	80030cc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	089b      	lsrs	r3, r3, #2
 8003030:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00e      	beq.n	8003058 <osThreadNew+0xa8>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	2ba7      	cmp	r3, #167	@ 0xa7
 8003040:	d90a      	bls.n	8003058 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003046:	2b00      	cmp	r3, #0
 8003048:	d006      	beq.n	8003058 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d002      	beq.n	8003058 <osThreadNew+0xa8>
        mem = 1;
 8003052:	2301      	movs	r3, #1
 8003054:	61bb      	str	r3, [r7, #24]
 8003056:	e010      	b.n	800307a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d10c      	bne.n	800307a <osThreadNew+0xca>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d108      	bne.n	800307a <osThreadNew+0xca>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d104      	bne.n	800307a <osThreadNew+0xca>
          mem = 0;
 8003070:	2300      	movs	r3, #0
 8003072:	61bb      	str	r3, [r7, #24]
 8003074:	e001      	b.n	800307a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003076:	2300      	movs	r3, #0
 8003078:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d110      	bne.n	80030a2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003088:	9202      	str	r2, [sp, #8]
 800308a:	9301      	str	r3, [sp, #4]
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	9300      	str	r3, [sp, #0]
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	6a3a      	ldr	r2, [r7, #32]
 8003094:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003096:	68f8      	ldr	r0, [r7, #12]
 8003098:	f000 fe1a 	bl	8003cd0 <xTaskCreateStatic>
 800309c:	4603      	mov	r3, r0
 800309e:	613b      	str	r3, [r7, #16]
 80030a0:	e013      	b.n	80030ca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d110      	bne.n	80030ca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80030a8:	6a3b      	ldr	r3, [r7, #32]
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	f107 0310 	add.w	r3, r7, #16
 80030b0:	9301      	str	r3, [sp, #4]
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f000 fe68 	bl	8003d90 <xTaskCreate>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d001      	beq.n	80030ca <osThreadNew+0x11a>
            hTask = NULL;
 80030c6:	2300      	movs	r3, #0
 80030c8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80030ca:	693b      	ldr	r3, [r7, #16]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3728      	adds	r7, #40	@ 0x28
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030dc:	f3ef 8305 	mrs	r3, IPSR
 80030e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80030e2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d003      	beq.n	80030f0 <osDelay+0x1c>
    stat = osErrorISR;
 80030e8:	f06f 0305 	mvn.w	r3, #5
 80030ec:	60fb      	str	r3, [r7, #12]
 80030ee:	e007      	b.n	8003100 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80030f0:	2300      	movs	r3, #0
 80030f2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d002      	beq.n	8003100 <osDelay+0x2c>
      vTaskDelay(ticks);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 ffa6 	bl	800404c <vTaskDelay>
    }
  }

  return (stat);
 8003100:	68fb      	ldr	r3, [r7, #12]
}
 8003102:	4618      	mov	r0, r3
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
	...

0800310c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	4a07      	ldr	r2, [pc, #28]	@ (8003138 <vApplicationGetIdleTaskMemory+0x2c>)
 800311c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	4a06      	ldr	r2, [pc, #24]	@ (800313c <vApplicationGetIdleTaskMemory+0x30>)
 8003122:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2280      	movs	r2, #128	@ 0x80
 8003128:	601a      	str	r2, [r3, #0]
}
 800312a:	bf00      	nop
 800312c:	3714      	adds	r7, #20
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	200001fc 	.word	0x200001fc
 800313c:	200002a4 	.word	0x200002a4

08003140 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	4a07      	ldr	r2, [pc, #28]	@ (800316c <vApplicationGetTimerTaskMemory+0x2c>)
 8003150:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	4a06      	ldr	r2, [pc, #24]	@ (8003170 <vApplicationGetTimerTaskMemory+0x30>)
 8003156:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800315e:	601a      	str	r2, [r3, #0]
}
 8003160:	bf00      	nop
 8003162:	3714      	adds	r7, #20
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	200004a4 	.word	0x200004a4
 8003170:	2000054c 	.word	0x2000054c

08003174 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f103 0208 	add.w	r2, r3, #8
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f04f 32ff 	mov.w	r2, #4294967295
 800318c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f103 0208 	add.w	r2, r3, #8
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f103 0208 	add.w	r2, r3, #8
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80031c2:	bf00      	nop
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr

080031ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80031ce:	b480      	push	{r7}
 80031d0:	b085      	sub	sp, #20
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
 80031d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	1c5a      	adds	r2, r3, #1
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	601a      	str	r2, [r3, #0]
}
 800320a:	bf00      	nop
 800320c:	3714      	adds	r7, #20
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr

08003216 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003216:	b480      	push	{r7}
 8003218:	b085      	sub	sp, #20
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
 800321e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800322c:	d103      	bne.n	8003236 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	e00c      	b.n	8003250 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	3308      	adds	r3, #8
 800323a:	60fb      	str	r3, [r7, #12]
 800323c:	e002      	b.n	8003244 <vListInsert+0x2e>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68ba      	ldr	r2, [r7, #8]
 800324c:	429a      	cmp	r2, r3
 800324e:	d2f6      	bcs.n	800323e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	685a      	ldr	r2, [r3, #4]
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	1c5a      	adds	r2, r3, #1
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	601a      	str	r2, [r3, #0]
}
 800327c:	bf00      	nop
 800327e:	3714      	adds	r7, #20
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003288:	b480      	push	{r7}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	6892      	ldr	r2, [r2, #8]
 800329e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	6852      	ldr	r2, [r2, #4]
 80032a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d103      	bne.n	80032bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	1e5a      	subs	r2, r3, #1
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3714      	adds	r7, #20
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d10b      	bne.n	8003308 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80032f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032f4:	f383 8811 	msr	BASEPRI, r3
 80032f8:	f3bf 8f6f 	isb	sy
 80032fc:	f3bf 8f4f 	dsb	sy
 8003300:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003302:	bf00      	nop
 8003304:	bf00      	nop
 8003306:	e7fd      	b.n	8003304 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003308:	f002 f8a6 	bl	8005458 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003314:	68f9      	ldr	r1, [r7, #12]
 8003316:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003318:	fb01 f303 	mul.w	r3, r1, r3
 800331c:	441a      	add	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003338:	3b01      	subs	r3, #1
 800333a:	68f9      	ldr	r1, [r7, #12]
 800333c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800333e:	fb01 f303 	mul.w	r3, r1, r3
 8003342:	441a      	add	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	22ff      	movs	r2, #255	@ 0xff
 800334c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	22ff      	movs	r2, #255	@ 0xff
 8003354:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d114      	bne.n	8003388 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d01a      	beq.n	800339c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	3310      	adds	r3, #16
 800336a:	4618      	mov	r0, r3
 800336c:	f001 f942 	bl	80045f4 <xTaskRemoveFromEventList>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d012      	beq.n	800339c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003376:	4b0d      	ldr	r3, [pc, #52]	@ (80033ac <xQueueGenericReset+0xd0>)
 8003378:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800337c:	601a      	str	r2, [r3, #0]
 800337e:	f3bf 8f4f 	dsb	sy
 8003382:	f3bf 8f6f 	isb	sy
 8003386:	e009      	b.n	800339c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	3310      	adds	r3, #16
 800338c:	4618      	mov	r0, r3
 800338e:	f7ff fef1 	bl	8003174 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	3324      	adds	r3, #36	@ 0x24
 8003396:	4618      	mov	r0, r3
 8003398:	f7ff feec 	bl	8003174 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800339c:	f002 f88e 	bl	80054bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80033a0:	2301      	movs	r3, #1
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	e000ed04 	.word	0xe000ed04

080033b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b08e      	sub	sp, #56	@ 0x38
 80033b4:	af02      	add	r7, sp, #8
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
 80033bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d10b      	bne.n	80033dc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80033c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033c8:	f383 8811 	msr	BASEPRI, r3
 80033cc:	f3bf 8f6f 	isb	sy
 80033d0:	f3bf 8f4f 	dsb	sy
 80033d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80033d6:	bf00      	nop
 80033d8:	bf00      	nop
 80033da:	e7fd      	b.n	80033d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10b      	bne.n	80033fa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80033e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033e6:	f383 8811 	msr	BASEPRI, r3
 80033ea:	f3bf 8f6f 	isb	sy
 80033ee:	f3bf 8f4f 	dsb	sy
 80033f2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80033f4:	bf00      	nop
 80033f6:	bf00      	nop
 80033f8:	e7fd      	b.n	80033f6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d002      	beq.n	8003406 <xQueueGenericCreateStatic+0x56>
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <xQueueGenericCreateStatic+0x5a>
 8003406:	2301      	movs	r3, #1
 8003408:	e000      	b.n	800340c <xQueueGenericCreateStatic+0x5c>
 800340a:	2300      	movs	r3, #0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d10b      	bne.n	8003428 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003414:	f383 8811 	msr	BASEPRI, r3
 8003418:	f3bf 8f6f 	isb	sy
 800341c:	f3bf 8f4f 	dsb	sy
 8003420:	623b      	str	r3, [r7, #32]
}
 8003422:	bf00      	nop
 8003424:	bf00      	nop
 8003426:	e7fd      	b.n	8003424 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d102      	bne.n	8003434 <xQueueGenericCreateStatic+0x84>
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <xQueueGenericCreateStatic+0x88>
 8003434:	2301      	movs	r3, #1
 8003436:	e000      	b.n	800343a <xQueueGenericCreateStatic+0x8a>
 8003438:	2300      	movs	r3, #0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10b      	bne.n	8003456 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800343e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003442:	f383 8811 	msr	BASEPRI, r3
 8003446:	f3bf 8f6f 	isb	sy
 800344a:	f3bf 8f4f 	dsb	sy
 800344e:	61fb      	str	r3, [r7, #28]
}
 8003450:	bf00      	nop
 8003452:	bf00      	nop
 8003454:	e7fd      	b.n	8003452 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003456:	2350      	movs	r3, #80	@ 0x50
 8003458:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	2b50      	cmp	r3, #80	@ 0x50
 800345e:	d00b      	beq.n	8003478 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003464:	f383 8811 	msr	BASEPRI, r3
 8003468:	f3bf 8f6f 	isb	sy
 800346c:	f3bf 8f4f 	dsb	sy
 8003470:	61bb      	str	r3, [r7, #24]
}
 8003472:	bf00      	nop
 8003474:	bf00      	nop
 8003476:	e7fd      	b.n	8003474 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003478:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800347e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00d      	beq.n	80034a0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800348c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	4613      	mov	r3, r2
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	68b9      	ldr	r1, [r7, #8]
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f000 f805 	bl	80034aa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80034a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3730      	adds	r7, #48	@ 0x30
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b084      	sub	sp, #16
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	60f8      	str	r0, [r7, #12]
 80034b2:	60b9      	str	r1, [r7, #8]
 80034b4:	607a      	str	r2, [r7, #4]
 80034b6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d103      	bne.n	80034c6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	601a      	str	r2, [r3, #0]
 80034c4:	e002      	b.n	80034cc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	68ba      	ldr	r2, [r7, #8]
 80034d6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80034d8:	2101      	movs	r1, #1
 80034da:	69b8      	ldr	r0, [r7, #24]
 80034dc:	f7ff fefe 	bl	80032dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	78fa      	ldrb	r2, [r7, #3]
 80034e4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80034e8:	bf00      	nop
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b08e      	sub	sp, #56	@ 0x38
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
 80034fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80034fe:	2300      	movs	r3, #0
 8003500:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10b      	bne.n	8003524 <xQueueGenericSend+0x34>
	__asm volatile
 800350c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003510:	f383 8811 	msr	BASEPRI, r3
 8003514:	f3bf 8f6f 	isb	sy
 8003518:	f3bf 8f4f 	dsb	sy
 800351c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800351e:	bf00      	nop
 8003520:	bf00      	nop
 8003522:	e7fd      	b.n	8003520 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d103      	bne.n	8003532 <xQueueGenericSend+0x42>
 800352a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800352c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <xQueueGenericSend+0x46>
 8003532:	2301      	movs	r3, #1
 8003534:	e000      	b.n	8003538 <xQueueGenericSend+0x48>
 8003536:	2300      	movs	r3, #0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10b      	bne.n	8003554 <xQueueGenericSend+0x64>
	__asm volatile
 800353c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003540:	f383 8811 	msr	BASEPRI, r3
 8003544:	f3bf 8f6f 	isb	sy
 8003548:	f3bf 8f4f 	dsb	sy
 800354c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800354e:	bf00      	nop
 8003550:	bf00      	nop
 8003552:	e7fd      	b.n	8003550 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	2b02      	cmp	r3, #2
 8003558:	d103      	bne.n	8003562 <xQueueGenericSend+0x72>
 800355a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800355c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800355e:	2b01      	cmp	r3, #1
 8003560:	d101      	bne.n	8003566 <xQueueGenericSend+0x76>
 8003562:	2301      	movs	r3, #1
 8003564:	e000      	b.n	8003568 <xQueueGenericSend+0x78>
 8003566:	2300      	movs	r3, #0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d10b      	bne.n	8003584 <xQueueGenericSend+0x94>
	__asm volatile
 800356c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003570:	f383 8811 	msr	BASEPRI, r3
 8003574:	f3bf 8f6f 	isb	sy
 8003578:	f3bf 8f4f 	dsb	sy
 800357c:	623b      	str	r3, [r7, #32]
}
 800357e:	bf00      	nop
 8003580:	bf00      	nop
 8003582:	e7fd      	b.n	8003580 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003584:	f001 f9fc 	bl	8004980 <xTaskGetSchedulerState>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d102      	bne.n	8003594 <xQueueGenericSend+0xa4>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <xQueueGenericSend+0xa8>
 8003594:	2301      	movs	r3, #1
 8003596:	e000      	b.n	800359a <xQueueGenericSend+0xaa>
 8003598:	2300      	movs	r3, #0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10b      	bne.n	80035b6 <xQueueGenericSend+0xc6>
	__asm volatile
 800359e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035a2:	f383 8811 	msr	BASEPRI, r3
 80035a6:	f3bf 8f6f 	isb	sy
 80035aa:	f3bf 8f4f 	dsb	sy
 80035ae:	61fb      	str	r3, [r7, #28]
}
 80035b0:	bf00      	nop
 80035b2:	bf00      	nop
 80035b4:	e7fd      	b.n	80035b2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80035b6:	f001 ff4f 	bl	8005458 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80035ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d302      	bcc.n	80035cc <xQueueGenericSend+0xdc>
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d129      	bne.n	8003620 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	68b9      	ldr	r1, [r7, #8]
 80035d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80035d2:	f000 fa0f 	bl	80039f4 <prvCopyDataToQueue>
 80035d6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d010      	beq.n	8003602 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035e2:	3324      	adds	r3, #36	@ 0x24
 80035e4:	4618      	mov	r0, r3
 80035e6:	f001 f805 	bl	80045f4 <xTaskRemoveFromEventList>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d013      	beq.n	8003618 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80035f0:	4b3f      	ldr	r3, [pc, #252]	@ (80036f0 <xQueueGenericSend+0x200>)
 80035f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035f6:	601a      	str	r2, [r3, #0]
 80035f8:	f3bf 8f4f 	dsb	sy
 80035fc:	f3bf 8f6f 	isb	sy
 8003600:	e00a      	b.n	8003618 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003604:	2b00      	cmp	r3, #0
 8003606:	d007      	beq.n	8003618 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003608:	4b39      	ldr	r3, [pc, #228]	@ (80036f0 <xQueueGenericSend+0x200>)
 800360a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	f3bf 8f4f 	dsb	sy
 8003614:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003618:	f001 ff50 	bl	80054bc <vPortExitCritical>
				return pdPASS;
 800361c:	2301      	movs	r3, #1
 800361e:	e063      	b.n	80036e8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d103      	bne.n	800362e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003626:	f001 ff49 	bl	80054bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800362a:	2300      	movs	r3, #0
 800362c:	e05c      	b.n	80036e8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800362e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003630:	2b00      	cmp	r3, #0
 8003632:	d106      	bne.n	8003642 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003634:	f107 0314 	add.w	r3, r7, #20
 8003638:	4618      	mov	r0, r3
 800363a:	f001 f83f 	bl	80046bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800363e:	2301      	movs	r3, #1
 8003640:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003642:	f001 ff3b 	bl	80054bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003646:	f000 fda7 	bl	8004198 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800364a:	f001 ff05 	bl	8005458 <vPortEnterCritical>
 800364e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003650:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003654:	b25b      	sxtb	r3, r3
 8003656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800365a:	d103      	bne.n	8003664 <xQueueGenericSend+0x174>
 800365c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800365e:	2200      	movs	r2, #0
 8003660:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003666:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800366a:	b25b      	sxtb	r3, r3
 800366c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003670:	d103      	bne.n	800367a <xQueueGenericSend+0x18a>
 8003672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003674:	2200      	movs	r2, #0
 8003676:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800367a:	f001 ff1f 	bl	80054bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800367e:	1d3a      	adds	r2, r7, #4
 8003680:	f107 0314 	add.w	r3, r7, #20
 8003684:	4611      	mov	r1, r2
 8003686:	4618      	mov	r0, r3
 8003688:	f001 f82e 	bl	80046e8 <xTaskCheckForTimeOut>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d124      	bne.n	80036dc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003692:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003694:	f000 faa6 	bl	8003be4 <prvIsQueueFull>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d018      	beq.n	80036d0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800369e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036a0:	3310      	adds	r3, #16
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	4611      	mov	r1, r2
 80036a6:	4618      	mov	r0, r3
 80036a8:	f000 ff52 	bl	8004550 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80036ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80036ae:	f000 fa31 	bl	8003b14 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80036b2:	f000 fd7f 	bl	80041b4 <xTaskResumeAll>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f47f af7c 	bne.w	80035b6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80036be:	4b0c      	ldr	r3, [pc, #48]	@ (80036f0 <xQueueGenericSend+0x200>)
 80036c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	f3bf 8f4f 	dsb	sy
 80036ca:	f3bf 8f6f 	isb	sy
 80036ce:	e772      	b.n	80035b6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80036d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80036d2:	f000 fa1f 	bl	8003b14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80036d6:	f000 fd6d 	bl	80041b4 <xTaskResumeAll>
 80036da:	e76c      	b.n	80035b6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80036dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80036de:	f000 fa19 	bl	8003b14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80036e2:	f000 fd67 	bl	80041b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80036e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3738      	adds	r7, #56	@ 0x38
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	e000ed04 	.word	0xe000ed04

080036f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b090      	sub	sp, #64	@ 0x40
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
 8003700:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003708:	2b00      	cmp	r3, #0
 800370a:	d10b      	bne.n	8003724 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800370c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003710:	f383 8811 	msr	BASEPRI, r3
 8003714:	f3bf 8f6f 	isb	sy
 8003718:	f3bf 8f4f 	dsb	sy
 800371c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800371e:	bf00      	nop
 8003720:	bf00      	nop
 8003722:	e7fd      	b.n	8003720 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d103      	bne.n	8003732 <xQueueGenericSendFromISR+0x3e>
 800372a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800372c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <xQueueGenericSendFromISR+0x42>
 8003732:	2301      	movs	r3, #1
 8003734:	e000      	b.n	8003738 <xQueueGenericSendFromISR+0x44>
 8003736:	2300      	movs	r3, #0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d10b      	bne.n	8003754 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800373c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003740:	f383 8811 	msr	BASEPRI, r3
 8003744:	f3bf 8f6f 	isb	sy
 8003748:	f3bf 8f4f 	dsb	sy
 800374c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800374e:	bf00      	nop
 8003750:	bf00      	nop
 8003752:	e7fd      	b.n	8003750 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	2b02      	cmp	r3, #2
 8003758:	d103      	bne.n	8003762 <xQueueGenericSendFromISR+0x6e>
 800375a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800375c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800375e:	2b01      	cmp	r3, #1
 8003760:	d101      	bne.n	8003766 <xQueueGenericSendFromISR+0x72>
 8003762:	2301      	movs	r3, #1
 8003764:	e000      	b.n	8003768 <xQueueGenericSendFromISR+0x74>
 8003766:	2300      	movs	r3, #0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d10b      	bne.n	8003784 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800376c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003770:	f383 8811 	msr	BASEPRI, r3
 8003774:	f3bf 8f6f 	isb	sy
 8003778:	f3bf 8f4f 	dsb	sy
 800377c:	623b      	str	r3, [r7, #32]
}
 800377e:	bf00      	nop
 8003780:	bf00      	nop
 8003782:	e7fd      	b.n	8003780 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003784:	f001 ff48 	bl	8005618 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003788:	f3ef 8211 	mrs	r2, BASEPRI
 800378c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003790:	f383 8811 	msr	BASEPRI, r3
 8003794:	f3bf 8f6f 	isb	sy
 8003798:	f3bf 8f4f 	dsb	sy
 800379c:	61fa      	str	r2, [r7, #28]
 800379e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80037a0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80037a2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80037a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d302      	bcc.n	80037b6 <xQueueGenericSendFromISR+0xc2>
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d12f      	bne.n	8003816 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80037b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80037bc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	68b9      	ldr	r1, [r7, #8]
 80037ca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80037cc:	f000 f912 	bl	80039f4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80037d0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80037d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d8:	d112      	bne.n	8003800 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d016      	beq.n	8003810 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037e4:	3324      	adds	r3, #36	@ 0x24
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 ff04 	bl	80045f4 <xTaskRemoveFromEventList>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00e      	beq.n	8003810 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00b      	beq.n	8003810 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	601a      	str	r2, [r3, #0]
 80037fe:	e007      	b.n	8003810 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003800:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003804:	3301      	adds	r3, #1
 8003806:	b2db      	uxtb	r3, r3
 8003808:	b25a      	sxtb	r2, r3
 800380a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800380c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003810:	2301      	movs	r3, #1
 8003812:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003814:	e001      	b.n	800381a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003816:	2300      	movs	r3, #0
 8003818:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800381a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800381c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003824:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003826:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003828:	4618      	mov	r0, r3
 800382a:	3740      	adds	r7, #64	@ 0x40
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b08c      	sub	sp, #48	@ 0x30
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800383c:	2300      	movs	r3, #0
 800383e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10b      	bne.n	8003862 <xQueueReceive+0x32>
	__asm volatile
 800384a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800384e:	f383 8811 	msr	BASEPRI, r3
 8003852:	f3bf 8f6f 	isb	sy
 8003856:	f3bf 8f4f 	dsb	sy
 800385a:	623b      	str	r3, [r7, #32]
}
 800385c:	bf00      	nop
 800385e:	bf00      	nop
 8003860:	e7fd      	b.n	800385e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d103      	bne.n	8003870 <xQueueReceive+0x40>
 8003868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800386a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <xQueueReceive+0x44>
 8003870:	2301      	movs	r3, #1
 8003872:	e000      	b.n	8003876 <xQueueReceive+0x46>
 8003874:	2300      	movs	r3, #0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10b      	bne.n	8003892 <xQueueReceive+0x62>
	__asm volatile
 800387a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800387e:	f383 8811 	msr	BASEPRI, r3
 8003882:	f3bf 8f6f 	isb	sy
 8003886:	f3bf 8f4f 	dsb	sy
 800388a:	61fb      	str	r3, [r7, #28]
}
 800388c:	bf00      	nop
 800388e:	bf00      	nop
 8003890:	e7fd      	b.n	800388e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003892:	f001 f875 	bl	8004980 <xTaskGetSchedulerState>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d102      	bne.n	80038a2 <xQueueReceive+0x72>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <xQueueReceive+0x76>
 80038a2:	2301      	movs	r3, #1
 80038a4:	e000      	b.n	80038a8 <xQueueReceive+0x78>
 80038a6:	2300      	movs	r3, #0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d10b      	bne.n	80038c4 <xQueueReceive+0x94>
	__asm volatile
 80038ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038b0:	f383 8811 	msr	BASEPRI, r3
 80038b4:	f3bf 8f6f 	isb	sy
 80038b8:	f3bf 8f4f 	dsb	sy
 80038bc:	61bb      	str	r3, [r7, #24]
}
 80038be:	bf00      	nop
 80038c0:	bf00      	nop
 80038c2:	e7fd      	b.n	80038c0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80038c4:	f001 fdc8 	bl	8005458 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038cc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80038ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d01f      	beq.n	8003914 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80038d4:	68b9      	ldr	r1, [r7, #8]
 80038d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038d8:	f000 f8f6 	bl	8003ac8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80038dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038de:	1e5a      	subs	r2, r3, #1
 80038e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038e2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00f      	beq.n	800390c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ee:	3310      	adds	r3, #16
 80038f0:	4618      	mov	r0, r3
 80038f2:	f000 fe7f 	bl	80045f4 <xTaskRemoveFromEventList>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d007      	beq.n	800390c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80038fc:	4b3c      	ldr	r3, [pc, #240]	@ (80039f0 <xQueueReceive+0x1c0>)
 80038fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	f3bf 8f4f 	dsb	sy
 8003908:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800390c:	f001 fdd6 	bl	80054bc <vPortExitCritical>
				return pdPASS;
 8003910:	2301      	movs	r3, #1
 8003912:	e069      	b.n	80039e8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d103      	bne.n	8003922 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800391a:	f001 fdcf 	bl	80054bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800391e:	2300      	movs	r3, #0
 8003920:	e062      	b.n	80039e8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003924:	2b00      	cmp	r3, #0
 8003926:	d106      	bne.n	8003936 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003928:	f107 0310 	add.w	r3, r7, #16
 800392c:	4618      	mov	r0, r3
 800392e:	f000 fec5 	bl	80046bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003932:	2301      	movs	r3, #1
 8003934:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003936:	f001 fdc1 	bl	80054bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800393a:	f000 fc2d 	bl	8004198 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800393e:	f001 fd8b 	bl	8005458 <vPortEnterCritical>
 8003942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003944:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003948:	b25b      	sxtb	r3, r3
 800394a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394e:	d103      	bne.n	8003958 <xQueueReceive+0x128>
 8003950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003952:	2200      	movs	r2, #0
 8003954:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800395a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800395e:	b25b      	sxtb	r3, r3
 8003960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003964:	d103      	bne.n	800396e <xQueueReceive+0x13e>
 8003966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800396e:	f001 fda5 	bl	80054bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003972:	1d3a      	adds	r2, r7, #4
 8003974:	f107 0310 	add.w	r3, r7, #16
 8003978:	4611      	mov	r1, r2
 800397a:	4618      	mov	r0, r3
 800397c:	f000 feb4 	bl	80046e8 <xTaskCheckForTimeOut>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d123      	bne.n	80039ce <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003986:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003988:	f000 f916 	bl	8003bb8 <prvIsQueueEmpty>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d017      	beq.n	80039c2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003994:	3324      	adds	r3, #36	@ 0x24
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	4611      	mov	r1, r2
 800399a:	4618      	mov	r0, r3
 800399c:	f000 fdd8 	bl	8004550 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80039a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80039a2:	f000 f8b7 	bl	8003b14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80039a6:	f000 fc05 	bl	80041b4 <xTaskResumeAll>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d189      	bne.n	80038c4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80039b0:	4b0f      	ldr	r3, [pc, #60]	@ (80039f0 <xQueueReceive+0x1c0>)
 80039b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039b6:	601a      	str	r2, [r3, #0]
 80039b8:	f3bf 8f4f 	dsb	sy
 80039bc:	f3bf 8f6f 	isb	sy
 80039c0:	e780      	b.n	80038c4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80039c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80039c4:	f000 f8a6 	bl	8003b14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80039c8:	f000 fbf4 	bl	80041b4 <xTaskResumeAll>
 80039cc:	e77a      	b.n	80038c4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80039ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80039d0:	f000 f8a0 	bl	8003b14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80039d4:	f000 fbee 	bl	80041b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80039d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80039da:	f000 f8ed 	bl	8003bb8 <prvIsQueueEmpty>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f43f af6f 	beq.w	80038c4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80039e6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3730      	adds	r7, #48	@ 0x30
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	e000ed04 	.word	0xe000ed04

080039f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003a00:	2300      	movs	r3, #0
 8003a02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10d      	bne.n	8003a2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d14d      	bne.n	8003ab6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f000 ffcc 	bl	80049bc <xTaskPriorityDisinherit>
 8003a24:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	609a      	str	r2, [r3, #8]
 8003a2c:	e043      	b.n	8003ab6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d119      	bne.n	8003a68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6858      	ldr	r0, [r3, #4]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	68b9      	ldr	r1, [r7, #8]
 8003a40:	f002 f8a6 	bl	8005b90 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4c:	441a      	add	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d32b      	bcc.n	8003ab6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	605a      	str	r2, [r3, #4]
 8003a66:	e026      	b.n	8003ab6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	68d8      	ldr	r0, [r3, #12]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a70:	461a      	mov	r2, r3
 8003a72:	68b9      	ldr	r1, [r7, #8]
 8003a74:	f002 f88c 	bl	8005b90 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	68da      	ldr	r2, [r3, #12]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a80:	425b      	negs	r3, r3
 8003a82:	441a      	add	r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	68da      	ldr	r2, [r3, #12]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d207      	bcs.n	8003aa4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	689a      	ldr	r2, [r3, #8]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9c:	425b      	negs	r3, r3
 8003a9e:	441a      	add	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d105      	bne.n	8003ab6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d002      	beq.n	8003ab6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	1c5a      	adds	r2, r3, #1
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003abe:	697b      	ldr	r3, [r7, #20]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3718      	adds	r7, #24
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d018      	beq.n	8003b0c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68da      	ldr	r2, [r3, #12]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae2:	441a      	add	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	68da      	ldr	r2, [r3, #12]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d303      	bcc.n	8003afc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	68d9      	ldr	r1, [r3, #12]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b04:	461a      	mov	r2, r3
 8003b06:	6838      	ldr	r0, [r7, #0]
 8003b08:	f002 f842 	bl	8005b90 <memcpy>
	}
}
 8003b0c:	bf00      	nop
 8003b0e:	3708      	adds	r7, #8
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003b1c:	f001 fc9c 	bl	8005458 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003b26:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003b28:	e011      	b.n	8003b4e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d012      	beq.n	8003b58 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	3324      	adds	r3, #36	@ 0x24
 8003b36:	4618      	mov	r0, r3
 8003b38:	f000 fd5c 	bl	80045f4 <xTaskRemoveFromEventList>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003b42:	f000 fe35 	bl	80047b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003b46:	7bfb      	ldrb	r3, [r7, #15]
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	dce9      	bgt.n	8003b2a <prvUnlockQueue+0x16>
 8003b56:	e000      	b.n	8003b5a <prvUnlockQueue+0x46>
					break;
 8003b58:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	22ff      	movs	r2, #255	@ 0xff
 8003b5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003b62:	f001 fcab 	bl	80054bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003b66:	f001 fc77 	bl	8005458 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003b70:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003b72:	e011      	b.n	8003b98 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d012      	beq.n	8003ba2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	3310      	adds	r3, #16
 8003b80:	4618      	mov	r0, r3
 8003b82:	f000 fd37 	bl	80045f4 <xTaskRemoveFromEventList>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d001      	beq.n	8003b90 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003b8c:	f000 fe10 	bl	80047b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003b90:	7bbb      	ldrb	r3, [r7, #14]
 8003b92:	3b01      	subs	r3, #1
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003b98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	dce9      	bgt.n	8003b74 <prvUnlockQueue+0x60>
 8003ba0:	e000      	b.n	8003ba4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003ba2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	22ff      	movs	r2, #255	@ 0xff
 8003ba8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003bac:	f001 fc86 	bl	80054bc <vPortExitCritical>
}
 8003bb0:	bf00      	nop
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003bc0:	f001 fc4a 	bl	8005458 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d102      	bne.n	8003bd2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	60fb      	str	r3, [r7, #12]
 8003bd0:	e001      	b.n	8003bd6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003bd6:	f001 fc71 	bl	80054bc <vPortExitCritical>

	return xReturn;
 8003bda:	68fb      	ldr	r3, [r7, #12]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003bec:	f001 fc34 	bl	8005458 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d102      	bne.n	8003c02 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	60fb      	str	r3, [r7, #12]
 8003c00:	e001      	b.n	8003c06 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003c02:	2300      	movs	r3, #0
 8003c04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003c06:	f001 fc59 	bl	80054bc <vPortExitCritical>

	return xReturn;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60fb      	str	r3, [r7, #12]
 8003c22:	e014      	b.n	8003c4e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003c24:	4a0f      	ldr	r2, [pc, #60]	@ (8003c64 <vQueueAddToRegistry+0x50>)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d10b      	bne.n	8003c48 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003c30:	490c      	ldr	r1, [pc, #48]	@ (8003c64 <vQueueAddToRegistry+0x50>)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003c3a:	4a0a      	ldr	r2, [pc, #40]	@ (8003c64 <vQueueAddToRegistry+0x50>)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	4413      	add	r3, r2
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003c46:	e006      	b.n	8003c56 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	60fb      	str	r3, [r7, #12]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2b07      	cmp	r3, #7
 8003c52:	d9e7      	bls.n	8003c24 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003c54:	bf00      	nop
 8003c56:	bf00      	nop
 8003c58:	3714      	adds	r7, #20
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	2000094c 	.word	0x2000094c

08003c68 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003c78:	f001 fbee 	bl	8005458 <vPortEnterCritical>
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003c82:	b25b      	sxtb	r3, r3
 8003c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c88:	d103      	bne.n	8003c92 <vQueueWaitForMessageRestricted+0x2a>
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003c98:	b25b      	sxtb	r3, r3
 8003c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c9e:	d103      	bne.n	8003ca8 <vQueueWaitForMessageRestricted+0x40>
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ca8:	f001 fc08 	bl	80054bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d106      	bne.n	8003cc2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	3324      	adds	r3, #36	@ 0x24
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	68b9      	ldr	r1, [r7, #8]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f000 fc6d 	bl	800459c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003cc2:	6978      	ldr	r0, [r7, #20]
 8003cc4:	f7ff ff26 	bl	8003b14 <prvUnlockQueue>
	}
 8003cc8:	bf00      	nop
 8003cca:	3718      	adds	r7, #24
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b08e      	sub	sp, #56	@ 0x38
 8003cd4:	af04      	add	r7, sp, #16
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
 8003cdc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003cde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d10b      	bne.n	8003cfc <xTaskCreateStatic+0x2c>
	__asm volatile
 8003ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ce8:	f383 8811 	msr	BASEPRI, r3
 8003cec:	f3bf 8f6f 	isb	sy
 8003cf0:	f3bf 8f4f 	dsb	sy
 8003cf4:	623b      	str	r3, [r7, #32]
}
 8003cf6:	bf00      	nop
 8003cf8:	bf00      	nop
 8003cfa:	e7fd      	b.n	8003cf8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10b      	bne.n	8003d1a <xTaskCreateStatic+0x4a>
	__asm volatile
 8003d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d06:	f383 8811 	msr	BASEPRI, r3
 8003d0a:	f3bf 8f6f 	isb	sy
 8003d0e:	f3bf 8f4f 	dsb	sy
 8003d12:	61fb      	str	r3, [r7, #28]
}
 8003d14:	bf00      	nop
 8003d16:	bf00      	nop
 8003d18:	e7fd      	b.n	8003d16 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003d1a:	23a8      	movs	r3, #168	@ 0xa8
 8003d1c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	2ba8      	cmp	r3, #168	@ 0xa8
 8003d22:	d00b      	beq.n	8003d3c <xTaskCreateStatic+0x6c>
	__asm volatile
 8003d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d28:	f383 8811 	msr	BASEPRI, r3
 8003d2c:	f3bf 8f6f 	isb	sy
 8003d30:	f3bf 8f4f 	dsb	sy
 8003d34:	61bb      	str	r3, [r7, #24]
}
 8003d36:	bf00      	nop
 8003d38:	bf00      	nop
 8003d3a:	e7fd      	b.n	8003d38 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003d3c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d01e      	beq.n	8003d82 <xTaskCreateStatic+0xb2>
 8003d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d01b      	beq.n	8003d82 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d4c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d50:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d52:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d56:	2202      	movs	r2, #2
 8003d58:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	9303      	str	r3, [sp, #12]
 8003d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d62:	9302      	str	r3, [sp, #8]
 8003d64:	f107 0314 	add.w	r3, r7, #20
 8003d68:	9301      	str	r3, [sp, #4]
 8003d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d6c:	9300      	str	r3, [sp, #0]
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	68b9      	ldr	r1, [r7, #8]
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f000 f851 	bl	8003e1c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d7a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003d7c:	f000 f8f6 	bl	8003f6c <prvAddNewTaskToReadyList>
 8003d80:	e001      	b.n	8003d86 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003d82:	2300      	movs	r3, #0
 8003d84:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003d86:	697b      	ldr	r3, [r7, #20]
	}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3728      	adds	r7, #40	@ 0x28
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b08c      	sub	sp, #48	@ 0x30
 8003d94:	af04      	add	r7, sp, #16
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	603b      	str	r3, [r7, #0]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003da0:	88fb      	ldrh	r3, [r7, #6]
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	4618      	mov	r0, r3
 8003da6:	f001 fc79 	bl	800569c <pvPortMalloc>
 8003daa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00e      	beq.n	8003dd0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003db2:	20a8      	movs	r0, #168	@ 0xa8
 8003db4:	f001 fc72 	bl	800569c <pvPortMalloc>
 8003db8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d003      	beq.n	8003dc8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	697a      	ldr	r2, [r7, #20]
 8003dc4:	631a      	str	r2, [r3, #48]	@ 0x30
 8003dc6:	e005      	b.n	8003dd4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003dc8:	6978      	ldr	r0, [r7, #20]
 8003dca:	f001 fd35 	bl	8005838 <vPortFree>
 8003dce:	e001      	b.n	8003dd4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d017      	beq.n	8003e0a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003de2:	88fa      	ldrh	r2, [r7, #6]
 8003de4:	2300      	movs	r3, #0
 8003de6:	9303      	str	r3, [sp, #12]
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	9302      	str	r3, [sp, #8]
 8003dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dee:	9301      	str	r3, [sp, #4]
 8003df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003df2:	9300      	str	r3, [sp, #0]
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	68b9      	ldr	r1, [r7, #8]
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f000 f80f 	bl	8003e1c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003dfe:	69f8      	ldr	r0, [r7, #28]
 8003e00:	f000 f8b4 	bl	8003f6c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003e04:	2301      	movs	r3, #1
 8003e06:	61bb      	str	r3, [r7, #24]
 8003e08:	e002      	b.n	8003e10 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e0e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003e10:	69bb      	ldr	r3, [r7, #24]
	}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3720      	adds	r7, #32
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
	...

08003e1c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b088      	sub	sp, #32
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
 8003e28:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e2c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	461a      	mov	r2, r3
 8003e34:	21a5      	movs	r1, #165	@ 0xa5
 8003e36:	f001 fe1f 	bl	8005a78 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e44:	3b01      	subs	r3, #1
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	4413      	add	r3, r2
 8003e4a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	f023 0307 	bic.w	r3, r3, #7
 8003e52:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	f003 0307 	and.w	r3, r3, #7
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00b      	beq.n	8003e76 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e62:	f383 8811 	msr	BASEPRI, r3
 8003e66:	f3bf 8f6f 	isb	sy
 8003e6a:	f3bf 8f4f 	dsb	sy
 8003e6e:	617b      	str	r3, [r7, #20]
}
 8003e70:	bf00      	nop
 8003e72:	bf00      	nop
 8003e74:	e7fd      	b.n	8003e72 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d01f      	beq.n	8003ebc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	61fb      	str	r3, [r7, #28]
 8003e80:	e012      	b.n	8003ea8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003e82:	68ba      	ldr	r2, [r7, #8]
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	4413      	add	r3, r2
 8003e88:	7819      	ldrb	r1, [r3, #0]
 8003e8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	4413      	add	r3, r2
 8003e90:	3334      	adds	r3, #52	@ 0x34
 8003e92:	460a      	mov	r2, r1
 8003e94:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d006      	beq.n	8003eb0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	61fb      	str	r3, [r7, #28]
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	2b0f      	cmp	r3, #15
 8003eac:	d9e9      	bls.n	8003e82 <prvInitialiseNewTask+0x66>
 8003eae:	e000      	b.n	8003eb2 <prvInitialiseNewTask+0x96>
			{
				break;
 8003eb0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003eba:	e003      	b.n	8003ec4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ec6:	2b37      	cmp	r3, #55	@ 0x37
 8003ec8:	d901      	bls.n	8003ece <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003eca:	2337      	movs	r3, #55	@ 0x37
 8003ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ed2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ed8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003edc:	2200      	movs	r2, #0
 8003ede:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee2:	3304      	adds	r3, #4
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7ff f965 	bl	80031b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eec:	3318      	adds	r3, #24
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7ff f960 	bl	80031b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ef8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003efc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f02:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f08:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f1c:	3354      	adds	r3, #84	@ 0x54
 8003f1e:	224c      	movs	r2, #76	@ 0x4c
 8003f20:	2100      	movs	r1, #0
 8003f22:	4618      	mov	r0, r3
 8003f24:	f001 fda8 	bl	8005a78 <memset>
 8003f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f2a:	4a0d      	ldr	r2, [pc, #52]	@ (8003f60 <prvInitialiseNewTask+0x144>)
 8003f2c:	659a      	str	r2, [r3, #88]	@ 0x58
 8003f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f30:	4a0c      	ldr	r2, [pc, #48]	@ (8003f64 <prvInitialiseNewTask+0x148>)
 8003f32:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f36:	4a0c      	ldr	r2, [pc, #48]	@ (8003f68 <prvInitialiseNewTask+0x14c>)
 8003f38:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003f3a:	683a      	ldr	r2, [r7, #0]
 8003f3c:	68f9      	ldr	r1, [r7, #12]
 8003f3e:	69b8      	ldr	r0, [r7, #24]
 8003f40:	f001 f95a 	bl	80051f8 <pxPortInitialiseStack>
 8003f44:	4602      	mov	r2, r0
 8003f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f48:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d002      	beq.n	8003f56 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f56:	bf00      	nop
 8003f58:	3720      	adds	r7, #32
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	20004be0 	.word	0x20004be0
 8003f64:	20004c48 	.word	0x20004c48
 8003f68:	20004cb0 	.word	0x20004cb0

08003f6c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003f74:	f001 fa70 	bl	8005458 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003f78:	4b2d      	ldr	r3, [pc, #180]	@ (8004030 <prvAddNewTaskToReadyList+0xc4>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	4a2c      	ldr	r2, [pc, #176]	@ (8004030 <prvAddNewTaskToReadyList+0xc4>)
 8003f80:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003f82:	4b2c      	ldr	r3, [pc, #176]	@ (8004034 <prvAddNewTaskToReadyList+0xc8>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d109      	bne.n	8003f9e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003f8a:	4a2a      	ldr	r2, [pc, #168]	@ (8004034 <prvAddNewTaskToReadyList+0xc8>)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003f90:	4b27      	ldr	r3, [pc, #156]	@ (8004030 <prvAddNewTaskToReadyList+0xc4>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d110      	bne.n	8003fba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003f98:	f000 fc2e 	bl	80047f8 <prvInitialiseTaskLists>
 8003f9c:	e00d      	b.n	8003fba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003f9e:	4b26      	ldr	r3, [pc, #152]	@ (8004038 <prvAddNewTaskToReadyList+0xcc>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d109      	bne.n	8003fba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003fa6:	4b23      	ldr	r3, [pc, #140]	@ (8004034 <prvAddNewTaskToReadyList+0xc8>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d802      	bhi.n	8003fba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003fb4:	4a1f      	ldr	r2, [pc, #124]	@ (8004034 <prvAddNewTaskToReadyList+0xc8>)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003fba:	4b20      	ldr	r3, [pc, #128]	@ (800403c <prvAddNewTaskToReadyList+0xd0>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	4a1e      	ldr	r2, [pc, #120]	@ (800403c <prvAddNewTaskToReadyList+0xd0>)
 8003fc2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003fc4:	4b1d      	ldr	r3, [pc, #116]	@ (800403c <prvAddNewTaskToReadyList+0xd0>)
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fd0:	4b1b      	ldr	r3, [pc, #108]	@ (8004040 <prvAddNewTaskToReadyList+0xd4>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d903      	bls.n	8003fe0 <prvAddNewTaskToReadyList+0x74>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fdc:	4a18      	ldr	r2, [pc, #96]	@ (8004040 <prvAddNewTaskToReadyList+0xd4>)
 8003fde:	6013      	str	r3, [r2, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	4413      	add	r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	4a15      	ldr	r2, [pc, #84]	@ (8004044 <prvAddNewTaskToReadyList+0xd8>)
 8003fee:	441a      	add	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	3304      	adds	r3, #4
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	4610      	mov	r0, r2
 8003ff8:	f7ff f8e9 	bl	80031ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003ffc:	f001 fa5e 	bl	80054bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004000:	4b0d      	ldr	r3, [pc, #52]	@ (8004038 <prvAddNewTaskToReadyList+0xcc>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00e      	beq.n	8004026 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004008:	4b0a      	ldr	r3, [pc, #40]	@ (8004034 <prvAddNewTaskToReadyList+0xc8>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004012:	429a      	cmp	r2, r3
 8004014:	d207      	bcs.n	8004026 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004016:	4b0c      	ldr	r3, [pc, #48]	@ (8004048 <prvAddNewTaskToReadyList+0xdc>)
 8004018:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800401c:	601a      	str	r2, [r3, #0]
 800401e:	f3bf 8f4f 	dsb	sy
 8004022:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004026:	bf00      	nop
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	20000e60 	.word	0x20000e60
 8004034:	2000098c 	.word	0x2000098c
 8004038:	20000e6c 	.word	0x20000e6c
 800403c:	20000e7c 	.word	0x20000e7c
 8004040:	20000e68 	.word	0x20000e68
 8004044:	20000990 	.word	0x20000990
 8004048:	e000ed04 	.word	0xe000ed04

0800404c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004054:	2300      	movs	r3, #0
 8004056:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d018      	beq.n	8004090 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800405e:	4b14      	ldr	r3, [pc, #80]	@ (80040b0 <vTaskDelay+0x64>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00b      	beq.n	800407e <vTaskDelay+0x32>
	__asm volatile
 8004066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800406a:	f383 8811 	msr	BASEPRI, r3
 800406e:	f3bf 8f6f 	isb	sy
 8004072:	f3bf 8f4f 	dsb	sy
 8004076:	60bb      	str	r3, [r7, #8]
}
 8004078:	bf00      	nop
 800407a:	bf00      	nop
 800407c:	e7fd      	b.n	800407a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800407e:	f000 f88b 	bl	8004198 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004082:	2100      	movs	r1, #0
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 fd09 	bl	8004a9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800408a:	f000 f893 	bl	80041b4 <xTaskResumeAll>
 800408e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d107      	bne.n	80040a6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004096:	4b07      	ldr	r3, [pc, #28]	@ (80040b4 <vTaskDelay+0x68>)
 8004098:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800409c:	601a      	str	r2, [r3, #0]
 800409e:	f3bf 8f4f 	dsb	sy
 80040a2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80040a6:	bf00      	nop
 80040a8:	3710      	adds	r7, #16
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	20000e88 	.word	0x20000e88
 80040b4:	e000ed04 	.word	0xe000ed04

080040b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b08a      	sub	sp, #40	@ 0x28
 80040bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80040be:	2300      	movs	r3, #0
 80040c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80040c2:	2300      	movs	r3, #0
 80040c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80040c6:	463a      	mov	r2, r7
 80040c8:	1d39      	adds	r1, r7, #4
 80040ca:	f107 0308 	add.w	r3, r7, #8
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7ff f81c 	bl	800310c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80040d4:	6839      	ldr	r1, [r7, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	68ba      	ldr	r2, [r7, #8]
 80040da:	9202      	str	r2, [sp, #8]
 80040dc:	9301      	str	r3, [sp, #4]
 80040de:	2300      	movs	r3, #0
 80040e0:	9300      	str	r3, [sp, #0]
 80040e2:	2300      	movs	r3, #0
 80040e4:	460a      	mov	r2, r1
 80040e6:	4924      	ldr	r1, [pc, #144]	@ (8004178 <vTaskStartScheduler+0xc0>)
 80040e8:	4824      	ldr	r0, [pc, #144]	@ (800417c <vTaskStartScheduler+0xc4>)
 80040ea:	f7ff fdf1 	bl	8003cd0 <xTaskCreateStatic>
 80040ee:	4603      	mov	r3, r0
 80040f0:	4a23      	ldr	r2, [pc, #140]	@ (8004180 <vTaskStartScheduler+0xc8>)
 80040f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80040f4:	4b22      	ldr	r3, [pc, #136]	@ (8004180 <vTaskStartScheduler+0xc8>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d002      	beq.n	8004102 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80040fc:	2301      	movs	r3, #1
 80040fe:	617b      	str	r3, [r7, #20]
 8004100:	e001      	b.n	8004106 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004102:	2300      	movs	r3, #0
 8004104:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d102      	bne.n	8004112 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800410c:	f000 fd1a 	bl	8004b44 <xTimerCreateTimerTask>
 8004110:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	2b01      	cmp	r3, #1
 8004116:	d11b      	bne.n	8004150 <vTaskStartScheduler+0x98>
	__asm volatile
 8004118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800411c:	f383 8811 	msr	BASEPRI, r3
 8004120:	f3bf 8f6f 	isb	sy
 8004124:	f3bf 8f4f 	dsb	sy
 8004128:	613b      	str	r3, [r7, #16]
}
 800412a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800412c:	4b15      	ldr	r3, [pc, #84]	@ (8004184 <vTaskStartScheduler+0xcc>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	3354      	adds	r3, #84	@ 0x54
 8004132:	4a15      	ldr	r2, [pc, #84]	@ (8004188 <vTaskStartScheduler+0xd0>)
 8004134:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004136:	4b15      	ldr	r3, [pc, #84]	@ (800418c <vTaskStartScheduler+0xd4>)
 8004138:	f04f 32ff 	mov.w	r2, #4294967295
 800413c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800413e:	4b14      	ldr	r3, [pc, #80]	@ (8004190 <vTaskStartScheduler+0xd8>)
 8004140:	2201      	movs	r2, #1
 8004142:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004144:	4b13      	ldr	r3, [pc, #76]	@ (8004194 <vTaskStartScheduler+0xdc>)
 8004146:	2200      	movs	r2, #0
 8004148:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800414a:	f001 f8e1 	bl	8005310 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800414e:	e00f      	b.n	8004170 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004156:	d10b      	bne.n	8004170 <vTaskStartScheduler+0xb8>
	__asm volatile
 8004158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800415c:	f383 8811 	msr	BASEPRI, r3
 8004160:	f3bf 8f6f 	isb	sy
 8004164:	f3bf 8f4f 	dsb	sy
 8004168:	60fb      	str	r3, [r7, #12]
}
 800416a:	bf00      	nop
 800416c:	bf00      	nop
 800416e:	e7fd      	b.n	800416c <vTaskStartScheduler+0xb4>
}
 8004170:	bf00      	nop
 8004172:	3718      	adds	r7, #24
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	08005c7c 	.word	0x08005c7c
 800417c:	080047c9 	.word	0x080047c9
 8004180:	20000e84 	.word	0x20000e84
 8004184:	2000098c 	.word	0x2000098c
 8004188:	20000010 	.word	0x20000010
 800418c:	20000e80 	.word	0x20000e80
 8004190:	20000e6c 	.word	0x20000e6c
 8004194:	20000e64 	.word	0x20000e64

08004198 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800419c:	4b04      	ldr	r3, [pc, #16]	@ (80041b0 <vTaskSuspendAll+0x18>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	3301      	adds	r3, #1
 80041a2:	4a03      	ldr	r2, [pc, #12]	@ (80041b0 <vTaskSuspendAll+0x18>)
 80041a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80041a6:	bf00      	nop
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr
 80041b0:	20000e88 	.word	0x20000e88

080041b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80041ba:	2300      	movs	r3, #0
 80041bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80041be:	2300      	movs	r3, #0
 80041c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80041c2:	4b42      	ldr	r3, [pc, #264]	@ (80042cc <xTaskResumeAll+0x118>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10b      	bne.n	80041e2 <xTaskResumeAll+0x2e>
	__asm volatile
 80041ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ce:	f383 8811 	msr	BASEPRI, r3
 80041d2:	f3bf 8f6f 	isb	sy
 80041d6:	f3bf 8f4f 	dsb	sy
 80041da:	603b      	str	r3, [r7, #0]
}
 80041dc:	bf00      	nop
 80041de:	bf00      	nop
 80041e0:	e7fd      	b.n	80041de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80041e2:	f001 f939 	bl	8005458 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80041e6:	4b39      	ldr	r3, [pc, #228]	@ (80042cc <xTaskResumeAll+0x118>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	3b01      	subs	r3, #1
 80041ec:	4a37      	ldr	r2, [pc, #220]	@ (80042cc <xTaskResumeAll+0x118>)
 80041ee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041f0:	4b36      	ldr	r3, [pc, #216]	@ (80042cc <xTaskResumeAll+0x118>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d162      	bne.n	80042be <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80041f8:	4b35      	ldr	r3, [pc, #212]	@ (80042d0 <xTaskResumeAll+0x11c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d05e      	beq.n	80042be <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004200:	e02f      	b.n	8004262 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004202:	4b34      	ldr	r3, [pc, #208]	@ (80042d4 <xTaskResumeAll+0x120>)
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	3318      	adds	r3, #24
 800420e:	4618      	mov	r0, r3
 8004210:	f7ff f83a 	bl	8003288 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	3304      	adds	r3, #4
 8004218:	4618      	mov	r0, r3
 800421a:	f7ff f835 	bl	8003288 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004222:	4b2d      	ldr	r3, [pc, #180]	@ (80042d8 <xTaskResumeAll+0x124>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	429a      	cmp	r2, r3
 8004228:	d903      	bls.n	8004232 <xTaskResumeAll+0x7e>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800422e:	4a2a      	ldr	r2, [pc, #168]	@ (80042d8 <xTaskResumeAll+0x124>)
 8004230:	6013      	str	r3, [r2, #0]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004236:	4613      	mov	r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	4413      	add	r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	4a27      	ldr	r2, [pc, #156]	@ (80042dc <xTaskResumeAll+0x128>)
 8004240:	441a      	add	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	3304      	adds	r3, #4
 8004246:	4619      	mov	r1, r3
 8004248:	4610      	mov	r0, r2
 800424a:	f7fe ffc0 	bl	80031ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004252:	4b23      	ldr	r3, [pc, #140]	@ (80042e0 <xTaskResumeAll+0x12c>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004258:	429a      	cmp	r2, r3
 800425a:	d302      	bcc.n	8004262 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800425c:	4b21      	ldr	r3, [pc, #132]	@ (80042e4 <xTaskResumeAll+0x130>)
 800425e:	2201      	movs	r2, #1
 8004260:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004262:	4b1c      	ldr	r3, [pc, #112]	@ (80042d4 <xTaskResumeAll+0x120>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1cb      	bne.n	8004202 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d001      	beq.n	8004274 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004270:	f000 fb66 	bl	8004940 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004274:	4b1c      	ldr	r3, [pc, #112]	@ (80042e8 <xTaskResumeAll+0x134>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d010      	beq.n	80042a2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004280:	f000 f846 	bl	8004310 <xTaskIncrementTick>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d002      	beq.n	8004290 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800428a:	4b16      	ldr	r3, [pc, #88]	@ (80042e4 <xTaskResumeAll+0x130>)
 800428c:	2201      	movs	r2, #1
 800428e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	3b01      	subs	r3, #1
 8004294:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1f1      	bne.n	8004280 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800429c:	4b12      	ldr	r3, [pc, #72]	@ (80042e8 <xTaskResumeAll+0x134>)
 800429e:	2200      	movs	r2, #0
 80042a0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80042a2:	4b10      	ldr	r3, [pc, #64]	@ (80042e4 <xTaskResumeAll+0x130>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d009      	beq.n	80042be <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80042aa:	2301      	movs	r3, #1
 80042ac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80042ae:	4b0f      	ldr	r3, [pc, #60]	@ (80042ec <xTaskResumeAll+0x138>)
 80042b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042b4:	601a      	str	r2, [r3, #0]
 80042b6:	f3bf 8f4f 	dsb	sy
 80042ba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80042be:	f001 f8fd 	bl	80054bc <vPortExitCritical>

	return xAlreadyYielded;
 80042c2:	68bb      	ldr	r3, [r7, #8]
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3710      	adds	r7, #16
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	20000e88 	.word	0x20000e88
 80042d0:	20000e60 	.word	0x20000e60
 80042d4:	20000e20 	.word	0x20000e20
 80042d8:	20000e68 	.word	0x20000e68
 80042dc:	20000990 	.word	0x20000990
 80042e0:	2000098c 	.word	0x2000098c
 80042e4:	20000e74 	.word	0x20000e74
 80042e8:	20000e70 	.word	0x20000e70
 80042ec:	e000ed04 	.word	0xe000ed04

080042f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80042f6:	4b05      	ldr	r3, [pc, #20]	@ (800430c <xTaskGetTickCount+0x1c>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80042fc:	687b      	ldr	r3, [r7, #4]
}
 80042fe:	4618      	mov	r0, r3
 8004300:	370c      	adds	r7, #12
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	20000e64 	.word	0x20000e64

08004310 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004316:	2300      	movs	r3, #0
 8004318:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800431a:	4b4f      	ldr	r3, [pc, #316]	@ (8004458 <xTaskIncrementTick+0x148>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	f040 8090 	bne.w	8004444 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004324:	4b4d      	ldr	r3, [pc, #308]	@ (800445c <xTaskIncrementTick+0x14c>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	3301      	adds	r3, #1
 800432a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800432c:	4a4b      	ldr	r2, [pc, #300]	@ (800445c <xTaskIncrementTick+0x14c>)
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d121      	bne.n	800437c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004338:	4b49      	ldr	r3, [pc, #292]	@ (8004460 <xTaskIncrementTick+0x150>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00b      	beq.n	800435a <xTaskIncrementTick+0x4a>
	__asm volatile
 8004342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004346:	f383 8811 	msr	BASEPRI, r3
 800434a:	f3bf 8f6f 	isb	sy
 800434e:	f3bf 8f4f 	dsb	sy
 8004352:	603b      	str	r3, [r7, #0]
}
 8004354:	bf00      	nop
 8004356:	bf00      	nop
 8004358:	e7fd      	b.n	8004356 <xTaskIncrementTick+0x46>
 800435a:	4b41      	ldr	r3, [pc, #260]	@ (8004460 <xTaskIncrementTick+0x150>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	60fb      	str	r3, [r7, #12]
 8004360:	4b40      	ldr	r3, [pc, #256]	@ (8004464 <xTaskIncrementTick+0x154>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a3e      	ldr	r2, [pc, #248]	@ (8004460 <xTaskIncrementTick+0x150>)
 8004366:	6013      	str	r3, [r2, #0]
 8004368:	4a3e      	ldr	r2, [pc, #248]	@ (8004464 <xTaskIncrementTick+0x154>)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6013      	str	r3, [r2, #0]
 800436e:	4b3e      	ldr	r3, [pc, #248]	@ (8004468 <xTaskIncrementTick+0x158>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	3301      	adds	r3, #1
 8004374:	4a3c      	ldr	r2, [pc, #240]	@ (8004468 <xTaskIncrementTick+0x158>)
 8004376:	6013      	str	r3, [r2, #0]
 8004378:	f000 fae2 	bl	8004940 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800437c:	4b3b      	ldr	r3, [pc, #236]	@ (800446c <xTaskIncrementTick+0x15c>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	429a      	cmp	r2, r3
 8004384:	d349      	bcc.n	800441a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004386:	4b36      	ldr	r3, [pc, #216]	@ (8004460 <xTaskIncrementTick+0x150>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d104      	bne.n	800439a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004390:	4b36      	ldr	r3, [pc, #216]	@ (800446c <xTaskIncrementTick+0x15c>)
 8004392:	f04f 32ff 	mov.w	r2, #4294967295
 8004396:	601a      	str	r2, [r3, #0]
					break;
 8004398:	e03f      	b.n	800441a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800439a:	4b31      	ldr	r3, [pc, #196]	@ (8004460 <xTaskIncrementTick+0x150>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d203      	bcs.n	80043ba <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80043b2:	4a2e      	ldr	r2, [pc, #184]	@ (800446c <xTaskIncrementTick+0x15c>)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80043b8:	e02f      	b.n	800441a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	3304      	adds	r3, #4
 80043be:	4618      	mov	r0, r3
 80043c0:	f7fe ff62 	bl	8003288 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d004      	beq.n	80043d6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	3318      	adds	r3, #24
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7fe ff59 	bl	8003288 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043da:	4b25      	ldr	r3, [pc, #148]	@ (8004470 <xTaskIncrementTick+0x160>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d903      	bls.n	80043ea <xTaskIncrementTick+0xda>
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043e6:	4a22      	ldr	r2, [pc, #136]	@ (8004470 <xTaskIncrementTick+0x160>)
 80043e8:	6013      	str	r3, [r2, #0]
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043ee:	4613      	mov	r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	4413      	add	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4a1f      	ldr	r2, [pc, #124]	@ (8004474 <xTaskIncrementTick+0x164>)
 80043f8:	441a      	add	r2, r3
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	3304      	adds	r3, #4
 80043fe:	4619      	mov	r1, r3
 8004400:	4610      	mov	r0, r2
 8004402:	f7fe fee4 	bl	80031ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800440a:	4b1b      	ldr	r3, [pc, #108]	@ (8004478 <xTaskIncrementTick+0x168>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004410:	429a      	cmp	r2, r3
 8004412:	d3b8      	bcc.n	8004386 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004414:	2301      	movs	r3, #1
 8004416:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004418:	e7b5      	b.n	8004386 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800441a:	4b17      	ldr	r3, [pc, #92]	@ (8004478 <xTaskIncrementTick+0x168>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004420:	4914      	ldr	r1, [pc, #80]	@ (8004474 <xTaskIncrementTick+0x164>)
 8004422:	4613      	mov	r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	4413      	add	r3, r2
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	440b      	add	r3, r1
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d901      	bls.n	8004436 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004432:	2301      	movs	r3, #1
 8004434:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004436:	4b11      	ldr	r3, [pc, #68]	@ (800447c <xTaskIncrementTick+0x16c>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d007      	beq.n	800444e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800443e:	2301      	movs	r3, #1
 8004440:	617b      	str	r3, [r7, #20]
 8004442:	e004      	b.n	800444e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004444:	4b0e      	ldr	r3, [pc, #56]	@ (8004480 <xTaskIncrementTick+0x170>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	3301      	adds	r3, #1
 800444a:	4a0d      	ldr	r2, [pc, #52]	@ (8004480 <xTaskIncrementTick+0x170>)
 800444c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800444e:	697b      	ldr	r3, [r7, #20]
}
 8004450:	4618      	mov	r0, r3
 8004452:	3718      	adds	r7, #24
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	20000e88 	.word	0x20000e88
 800445c:	20000e64 	.word	0x20000e64
 8004460:	20000e18 	.word	0x20000e18
 8004464:	20000e1c 	.word	0x20000e1c
 8004468:	20000e78 	.word	0x20000e78
 800446c:	20000e80 	.word	0x20000e80
 8004470:	20000e68 	.word	0x20000e68
 8004474:	20000990 	.word	0x20000990
 8004478:	2000098c 	.word	0x2000098c
 800447c:	20000e74 	.word	0x20000e74
 8004480:	20000e70 	.word	0x20000e70

08004484 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800448a:	4b2b      	ldr	r3, [pc, #172]	@ (8004538 <vTaskSwitchContext+0xb4>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004492:	4b2a      	ldr	r3, [pc, #168]	@ (800453c <vTaskSwitchContext+0xb8>)
 8004494:	2201      	movs	r2, #1
 8004496:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004498:	e047      	b.n	800452a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800449a:	4b28      	ldr	r3, [pc, #160]	@ (800453c <vTaskSwitchContext+0xb8>)
 800449c:	2200      	movs	r2, #0
 800449e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044a0:	4b27      	ldr	r3, [pc, #156]	@ (8004540 <vTaskSwitchContext+0xbc>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	60fb      	str	r3, [r7, #12]
 80044a6:	e011      	b.n	80044cc <vTaskSwitchContext+0x48>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10b      	bne.n	80044c6 <vTaskSwitchContext+0x42>
	__asm volatile
 80044ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044b2:	f383 8811 	msr	BASEPRI, r3
 80044b6:	f3bf 8f6f 	isb	sy
 80044ba:	f3bf 8f4f 	dsb	sy
 80044be:	607b      	str	r3, [r7, #4]
}
 80044c0:	bf00      	nop
 80044c2:	bf00      	nop
 80044c4:	e7fd      	b.n	80044c2 <vTaskSwitchContext+0x3e>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	3b01      	subs	r3, #1
 80044ca:	60fb      	str	r3, [r7, #12]
 80044cc:	491d      	ldr	r1, [pc, #116]	@ (8004544 <vTaskSwitchContext+0xc0>)
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	4613      	mov	r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	4413      	add	r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	440b      	add	r3, r1
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d0e3      	beq.n	80044a8 <vTaskSwitchContext+0x24>
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	4613      	mov	r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4413      	add	r3, r2
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	4a16      	ldr	r2, [pc, #88]	@ (8004544 <vTaskSwitchContext+0xc0>)
 80044ec:	4413      	add	r3, r2
 80044ee:	60bb      	str	r3, [r7, #8]
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	605a      	str	r2, [r3, #4]
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	685a      	ldr	r2, [r3, #4]
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	3308      	adds	r3, #8
 8004502:	429a      	cmp	r2, r3
 8004504:	d104      	bne.n	8004510 <vTaskSwitchContext+0x8c>
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	605a      	str	r2, [r3, #4]
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	4a0c      	ldr	r2, [pc, #48]	@ (8004548 <vTaskSwitchContext+0xc4>)
 8004518:	6013      	str	r3, [r2, #0]
 800451a:	4a09      	ldr	r2, [pc, #36]	@ (8004540 <vTaskSwitchContext+0xbc>)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004520:	4b09      	ldr	r3, [pc, #36]	@ (8004548 <vTaskSwitchContext+0xc4>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	3354      	adds	r3, #84	@ 0x54
 8004526:	4a09      	ldr	r2, [pc, #36]	@ (800454c <vTaskSwitchContext+0xc8>)
 8004528:	6013      	str	r3, [r2, #0]
}
 800452a:	bf00      	nop
 800452c:	3714      	adds	r7, #20
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	20000e88 	.word	0x20000e88
 800453c:	20000e74 	.word	0x20000e74
 8004540:	20000e68 	.word	0x20000e68
 8004544:	20000990 	.word	0x20000990
 8004548:	2000098c 	.word	0x2000098c
 800454c:	20000010 	.word	0x20000010

08004550 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10b      	bne.n	8004578 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004564:	f383 8811 	msr	BASEPRI, r3
 8004568:	f3bf 8f6f 	isb	sy
 800456c:	f3bf 8f4f 	dsb	sy
 8004570:	60fb      	str	r3, [r7, #12]
}
 8004572:	bf00      	nop
 8004574:	bf00      	nop
 8004576:	e7fd      	b.n	8004574 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004578:	4b07      	ldr	r3, [pc, #28]	@ (8004598 <vTaskPlaceOnEventList+0x48>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	3318      	adds	r3, #24
 800457e:	4619      	mov	r1, r3
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f7fe fe48 	bl	8003216 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004586:	2101      	movs	r1, #1
 8004588:	6838      	ldr	r0, [r7, #0]
 800458a:	f000 fa87 	bl	8004a9c <prvAddCurrentTaskToDelayedList>
}
 800458e:	bf00      	nop
 8004590:	3710      	adds	r7, #16
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	2000098c 	.word	0x2000098c

0800459c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d10b      	bne.n	80045c6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80045ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045b2:	f383 8811 	msr	BASEPRI, r3
 80045b6:	f3bf 8f6f 	isb	sy
 80045ba:	f3bf 8f4f 	dsb	sy
 80045be:	617b      	str	r3, [r7, #20]
}
 80045c0:	bf00      	nop
 80045c2:	bf00      	nop
 80045c4:	e7fd      	b.n	80045c2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80045c6:	4b0a      	ldr	r3, [pc, #40]	@ (80045f0 <vTaskPlaceOnEventListRestricted+0x54>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	3318      	adds	r3, #24
 80045cc:	4619      	mov	r1, r3
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f7fe fdfd 	bl	80031ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d002      	beq.n	80045e0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80045da:	f04f 33ff 	mov.w	r3, #4294967295
 80045de:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80045e0:	6879      	ldr	r1, [r7, #4]
 80045e2:	68b8      	ldr	r0, [r7, #8]
 80045e4:	f000 fa5a 	bl	8004a9c <prvAddCurrentTaskToDelayedList>
	}
 80045e8:	bf00      	nop
 80045ea:	3718      	adds	r7, #24
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	2000098c 	.word	0x2000098c

080045f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d10b      	bne.n	8004622 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800460a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800460e:	f383 8811 	msr	BASEPRI, r3
 8004612:	f3bf 8f6f 	isb	sy
 8004616:	f3bf 8f4f 	dsb	sy
 800461a:	60fb      	str	r3, [r7, #12]
}
 800461c:	bf00      	nop
 800461e:	bf00      	nop
 8004620:	e7fd      	b.n	800461e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	3318      	adds	r3, #24
 8004626:	4618      	mov	r0, r3
 8004628:	f7fe fe2e 	bl	8003288 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800462c:	4b1d      	ldr	r3, [pc, #116]	@ (80046a4 <xTaskRemoveFromEventList+0xb0>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d11d      	bne.n	8004670 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	3304      	adds	r3, #4
 8004638:	4618      	mov	r0, r3
 800463a:	f7fe fe25 	bl	8003288 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004642:	4b19      	ldr	r3, [pc, #100]	@ (80046a8 <xTaskRemoveFromEventList+0xb4>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	429a      	cmp	r2, r3
 8004648:	d903      	bls.n	8004652 <xTaskRemoveFromEventList+0x5e>
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800464e:	4a16      	ldr	r2, [pc, #88]	@ (80046a8 <xTaskRemoveFromEventList+0xb4>)
 8004650:	6013      	str	r3, [r2, #0]
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004656:	4613      	mov	r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	4413      	add	r3, r2
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	4a13      	ldr	r2, [pc, #76]	@ (80046ac <xTaskRemoveFromEventList+0xb8>)
 8004660:	441a      	add	r2, r3
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	3304      	adds	r3, #4
 8004666:	4619      	mov	r1, r3
 8004668:	4610      	mov	r0, r2
 800466a:	f7fe fdb0 	bl	80031ce <vListInsertEnd>
 800466e:	e005      	b.n	800467c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	3318      	adds	r3, #24
 8004674:	4619      	mov	r1, r3
 8004676:	480e      	ldr	r0, [pc, #56]	@ (80046b0 <xTaskRemoveFromEventList+0xbc>)
 8004678:	f7fe fda9 	bl	80031ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004680:	4b0c      	ldr	r3, [pc, #48]	@ (80046b4 <xTaskRemoveFromEventList+0xc0>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004686:	429a      	cmp	r2, r3
 8004688:	d905      	bls.n	8004696 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800468a:	2301      	movs	r3, #1
 800468c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800468e:	4b0a      	ldr	r3, [pc, #40]	@ (80046b8 <xTaskRemoveFromEventList+0xc4>)
 8004690:	2201      	movs	r2, #1
 8004692:	601a      	str	r2, [r3, #0]
 8004694:	e001      	b.n	800469a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004696:	2300      	movs	r3, #0
 8004698:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800469a:	697b      	ldr	r3, [r7, #20]
}
 800469c:	4618      	mov	r0, r3
 800469e:	3718      	adds	r7, #24
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	20000e88 	.word	0x20000e88
 80046a8:	20000e68 	.word	0x20000e68
 80046ac:	20000990 	.word	0x20000990
 80046b0:	20000e20 	.word	0x20000e20
 80046b4:	2000098c 	.word	0x2000098c
 80046b8:	20000e74 	.word	0x20000e74

080046bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80046c4:	4b06      	ldr	r3, [pc, #24]	@ (80046e0 <vTaskInternalSetTimeOutState+0x24>)
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80046cc:	4b05      	ldr	r3, [pc, #20]	@ (80046e4 <vTaskInternalSetTimeOutState+0x28>)
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	605a      	str	r2, [r3, #4]
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr
 80046e0:	20000e78 	.word	0x20000e78
 80046e4:	20000e64 	.word	0x20000e64

080046e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b088      	sub	sp, #32
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d10b      	bne.n	8004710 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80046f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046fc:	f383 8811 	msr	BASEPRI, r3
 8004700:	f3bf 8f6f 	isb	sy
 8004704:	f3bf 8f4f 	dsb	sy
 8004708:	613b      	str	r3, [r7, #16]
}
 800470a:	bf00      	nop
 800470c:	bf00      	nop
 800470e:	e7fd      	b.n	800470c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d10b      	bne.n	800472e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800471a:	f383 8811 	msr	BASEPRI, r3
 800471e:	f3bf 8f6f 	isb	sy
 8004722:	f3bf 8f4f 	dsb	sy
 8004726:	60fb      	str	r3, [r7, #12]
}
 8004728:	bf00      	nop
 800472a:	bf00      	nop
 800472c:	e7fd      	b.n	800472a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800472e:	f000 fe93 	bl	8005458 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004732:	4b1d      	ldr	r3, [pc, #116]	@ (80047a8 <xTaskCheckForTimeOut+0xc0>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800474a:	d102      	bne.n	8004752 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800474c:	2300      	movs	r3, #0
 800474e:	61fb      	str	r3, [r7, #28]
 8004750:	e023      	b.n	800479a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	4b15      	ldr	r3, [pc, #84]	@ (80047ac <xTaskCheckForTimeOut+0xc4>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	429a      	cmp	r2, r3
 800475c:	d007      	beq.n	800476e <xTaskCheckForTimeOut+0x86>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	429a      	cmp	r2, r3
 8004766:	d302      	bcc.n	800476e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004768:	2301      	movs	r3, #1
 800476a:	61fb      	str	r3, [r7, #28]
 800476c:	e015      	b.n	800479a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	429a      	cmp	r2, r3
 8004776:	d20b      	bcs.n	8004790 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	1ad2      	subs	r2, r2, r3
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f7ff ff99 	bl	80046bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800478a:	2300      	movs	r3, #0
 800478c:	61fb      	str	r3, [r7, #28]
 800478e:	e004      	b.n	800479a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	2200      	movs	r2, #0
 8004794:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004796:	2301      	movs	r3, #1
 8004798:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800479a:	f000 fe8f 	bl	80054bc <vPortExitCritical>

	return xReturn;
 800479e:	69fb      	ldr	r3, [r7, #28]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3720      	adds	r7, #32
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	20000e64 	.word	0x20000e64
 80047ac:	20000e78 	.word	0x20000e78

080047b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80047b0:	b480      	push	{r7}
 80047b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80047b4:	4b03      	ldr	r3, [pc, #12]	@ (80047c4 <vTaskMissedYield+0x14>)
 80047b6:	2201      	movs	r2, #1
 80047b8:	601a      	str	r2, [r3, #0]
}
 80047ba:	bf00      	nop
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	20000e74 	.word	0x20000e74

080047c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80047d0:	f000 f852 	bl	8004878 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80047d4:	4b06      	ldr	r3, [pc, #24]	@ (80047f0 <prvIdleTask+0x28>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d9f9      	bls.n	80047d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80047dc:	4b05      	ldr	r3, [pc, #20]	@ (80047f4 <prvIdleTask+0x2c>)
 80047de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047e2:	601a      	str	r2, [r3, #0]
 80047e4:	f3bf 8f4f 	dsb	sy
 80047e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80047ec:	e7f0      	b.n	80047d0 <prvIdleTask+0x8>
 80047ee:	bf00      	nop
 80047f0:	20000990 	.word	0x20000990
 80047f4:	e000ed04 	.word	0xe000ed04

080047f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80047fe:	2300      	movs	r3, #0
 8004800:	607b      	str	r3, [r7, #4]
 8004802:	e00c      	b.n	800481e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	4613      	mov	r3, r2
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	4413      	add	r3, r2
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	4a12      	ldr	r2, [pc, #72]	@ (8004858 <prvInitialiseTaskLists+0x60>)
 8004810:	4413      	add	r3, r2
 8004812:	4618      	mov	r0, r3
 8004814:	f7fe fcae 	bl	8003174 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	3301      	adds	r3, #1
 800481c:	607b      	str	r3, [r7, #4]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2b37      	cmp	r3, #55	@ 0x37
 8004822:	d9ef      	bls.n	8004804 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004824:	480d      	ldr	r0, [pc, #52]	@ (800485c <prvInitialiseTaskLists+0x64>)
 8004826:	f7fe fca5 	bl	8003174 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800482a:	480d      	ldr	r0, [pc, #52]	@ (8004860 <prvInitialiseTaskLists+0x68>)
 800482c:	f7fe fca2 	bl	8003174 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004830:	480c      	ldr	r0, [pc, #48]	@ (8004864 <prvInitialiseTaskLists+0x6c>)
 8004832:	f7fe fc9f 	bl	8003174 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004836:	480c      	ldr	r0, [pc, #48]	@ (8004868 <prvInitialiseTaskLists+0x70>)
 8004838:	f7fe fc9c 	bl	8003174 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800483c:	480b      	ldr	r0, [pc, #44]	@ (800486c <prvInitialiseTaskLists+0x74>)
 800483e:	f7fe fc99 	bl	8003174 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004842:	4b0b      	ldr	r3, [pc, #44]	@ (8004870 <prvInitialiseTaskLists+0x78>)
 8004844:	4a05      	ldr	r2, [pc, #20]	@ (800485c <prvInitialiseTaskLists+0x64>)
 8004846:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004848:	4b0a      	ldr	r3, [pc, #40]	@ (8004874 <prvInitialiseTaskLists+0x7c>)
 800484a:	4a05      	ldr	r2, [pc, #20]	@ (8004860 <prvInitialiseTaskLists+0x68>)
 800484c:	601a      	str	r2, [r3, #0]
}
 800484e:	bf00      	nop
 8004850:	3708      	adds	r7, #8
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	20000990 	.word	0x20000990
 800485c:	20000df0 	.word	0x20000df0
 8004860:	20000e04 	.word	0x20000e04
 8004864:	20000e20 	.word	0x20000e20
 8004868:	20000e34 	.word	0x20000e34
 800486c:	20000e4c 	.word	0x20000e4c
 8004870:	20000e18 	.word	0x20000e18
 8004874:	20000e1c 	.word	0x20000e1c

08004878 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800487e:	e019      	b.n	80048b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004880:	f000 fdea 	bl	8005458 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004884:	4b10      	ldr	r3, [pc, #64]	@ (80048c8 <prvCheckTasksWaitingTermination+0x50>)
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	3304      	adds	r3, #4
 8004890:	4618      	mov	r0, r3
 8004892:	f7fe fcf9 	bl	8003288 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004896:	4b0d      	ldr	r3, [pc, #52]	@ (80048cc <prvCheckTasksWaitingTermination+0x54>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	3b01      	subs	r3, #1
 800489c:	4a0b      	ldr	r2, [pc, #44]	@ (80048cc <prvCheckTasksWaitingTermination+0x54>)
 800489e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80048a0:	4b0b      	ldr	r3, [pc, #44]	@ (80048d0 <prvCheckTasksWaitingTermination+0x58>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	3b01      	subs	r3, #1
 80048a6:	4a0a      	ldr	r2, [pc, #40]	@ (80048d0 <prvCheckTasksWaitingTermination+0x58>)
 80048a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80048aa:	f000 fe07 	bl	80054bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f810 	bl	80048d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80048b4:	4b06      	ldr	r3, [pc, #24]	@ (80048d0 <prvCheckTasksWaitingTermination+0x58>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1e1      	bne.n	8004880 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80048bc:	bf00      	nop
 80048be:	bf00      	nop
 80048c0:	3708      	adds	r7, #8
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	20000e34 	.word	0x20000e34
 80048cc:	20000e60 	.word	0x20000e60
 80048d0:	20000e48 	.word	0x20000e48

080048d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	3354      	adds	r3, #84	@ 0x54
 80048e0:	4618      	mov	r0, r3
 80048e2:	f001 f8d1 	bl	8005a88 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d108      	bne.n	8004902 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f4:	4618      	mov	r0, r3
 80048f6:	f000 ff9f 	bl	8005838 <vPortFree>
				vPortFree( pxTCB );
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 ff9c 	bl	8005838 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004900:	e019      	b.n	8004936 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004908:	2b01      	cmp	r3, #1
 800490a:	d103      	bne.n	8004914 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 ff93 	bl	8005838 <vPortFree>
	}
 8004912:	e010      	b.n	8004936 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800491a:	2b02      	cmp	r3, #2
 800491c:	d00b      	beq.n	8004936 <prvDeleteTCB+0x62>
	__asm volatile
 800491e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004922:	f383 8811 	msr	BASEPRI, r3
 8004926:	f3bf 8f6f 	isb	sy
 800492a:	f3bf 8f4f 	dsb	sy
 800492e:	60fb      	str	r3, [r7, #12]
}
 8004930:	bf00      	nop
 8004932:	bf00      	nop
 8004934:	e7fd      	b.n	8004932 <prvDeleteTCB+0x5e>
	}
 8004936:	bf00      	nop
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
	...

08004940 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004946:	4b0c      	ldr	r3, [pc, #48]	@ (8004978 <prvResetNextTaskUnblockTime+0x38>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d104      	bne.n	800495a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004950:	4b0a      	ldr	r3, [pc, #40]	@ (800497c <prvResetNextTaskUnblockTime+0x3c>)
 8004952:	f04f 32ff 	mov.w	r2, #4294967295
 8004956:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004958:	e008      	b.n	800496c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800495a:	4b07      	ldr	r3, [pc, #28]	@ (8004978 <prvResetNextTaskUnblockTime+0x38>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	4a04      	ldr	r2, [pc, #16]	@ (800497c <prvResetNextTaskUnblockTime+0x3c>)
 800496a:	6013      	str	r3, [r2, #0]
}
 800496c:	bf00      	nop
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr
 8004978:	20000e18 	.word	0x20000e18
 800497c:	20000e80 	.word	0x20000e80

08004980 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004986:	4b0b      	ldr	r3, [pc, #44]	@ (80049b4 <xTaskGetSchedulerState+0x34>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d102      	bne.n	8004994 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800498e:	2301      	movs	r3, #1
 8004990:	607b      	str	r3, [r7, #4]
 8004992:	e008      	b.n	80049a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004994:	4b08      	ldr	r3, [pc, #32]	@ (80049b8 <xTaskGetSchedulerState+0x38>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d102      	bne.n	80049a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800499c:	2302      	movs	r3, #2
 800499e:	607b      	str	r3, [r7, #4]
 80049a0:	e001      	b.n	80049a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80049a2:	2300      	movs	r3, #0
 80049a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80049a6:	687b      	ldr	r3, [r7, #4]
	}
 80049a8:	4618      	mov	r0, r3
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr
 80049b4:	20000e6c 	.word	0x20000e6c
 80049b8:	20000e88 	.word	0x20000e88

080049bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80049c8:	2300      	movs	r3, #0
 80049ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d058      	beq.n	8004a84 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80049d2:	4b2f      	ldr	r3, [pc, #188]	@ (8004a90 <xTaskPriorityDisinherit+0xd4>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	693a      	ldr	r2, [r7, #16]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d00b      	beq.n	80049f4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80049dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049e0:	f383 8811 	msr	BASEPRI, r3
 80049e4:	f3bf 8f6f 	isb	sy
 80049e8:	f3bf 8f4f 	dsb	sy
 80049ec:	60fb      	str	r3, [r7, #12]
}
 80049ee:	bf00      	nop
 80049f0:	bf00      	nop
 80049f2:	e7fd      	b.n	80049f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d10b      	bne.n	8004a14 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80049fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a00:	f383 8811 	msr	BASEPRI, r3
 8004a04:	f3bf 8f6f 	isb	sy
 8004a08:	f3bf 8f4f 	dsb	sy
 8004a0c:	60bb      	str	r3, [r7, #8]
}
 8004a0e:	bf00      	nop
 8004a10:	bf00      	nop
 8004a12:	e7fd      	b.n	8004a10 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a18:	1e5a      	subs	r2, r3, #1
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d02c      	beq.n	8004a84 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d128      	bne.n	8004a84 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	3304      	adds	r3, #4
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7fe fc26 	bl	8003288 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a48:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a54:	4b0f      	ldr	r3, [pc, #60]	@ (8004a94 <xTaskPriorityDisinherit+0xd8>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d903      	bls.n	8004a64 <xTaskPriorityDisinherit+0xa8>
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a60:	4a0c      	ldr	r2, [pc, #48]	@ (8004a94 <xTaskPriorityDisinherit+0xd8>)
 8004a62:	6013      	str	r3, [r2, #0]
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a68:	4613      	mov	r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	4413      	add	r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4a09      	ldr	r2, [pc, #36]	@ (8004a98 <xTaskPriorityDisinherit+0xdc>)
 8004a72:	441a      	add	r2, r3
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	3304      	adds	r3, #4
 8004a78:	4619      	mov	r1, r3
 8004a7a:	4610      	mov	r0, r2
 8004a7c:	f7fe fba7 	bl	80031ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004a80:	2301      	movs	r3, #1
 8004a82:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004a84:	697b      	ldr	r3, [r7, #20]
	}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3718      	adds	r7, #24
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	2000098c 	.word	0x2000098c
 8004a94:	20000e68 	.word	0x20000e68
 8004a98:	20000990 	.word	0x20000990

08004a9c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004aa6:	4b21      	ldr	r3, [pc, #132]	@ (8004b2c <prvAddCurrentTaskToDelayedList+0x90>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004aac:	4b20      	ldr	r3, [pc, #128]	@ (8004b30 <prvAddCurrentTaskToDelayedList+0x94>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	3304      	adds	r3, #4
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fe fbe8 	bl	8003288 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004abe:	d10a      	bne.n	8004ad6 <prvAddCurrentTaskToDelayedList+0x3a>
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d007      	beq.n	8004ad6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ac6:	4b1a      	ldr	r3, [pc, #104]	@ (8004b30 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	3304      	adds	r3, #4
 8004acc:	4619      	mov	r1, r3
 8004ace:	4819      	ldr	r0, [pc, #100]	@ (8004b34 <prvAddCurrentTaskToDelayedList+0x98>)
 8004ad0:	f7fe fb7d 	bl	80031ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004ad4:	e026      	b.n	8004b24 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4413      	add	r3, r2
 8004adc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004ade:	4b14      	ldr	r3, [pc, #80]	@ (8004b30 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68ba      	ldr	r2, [r7, #8]
 8004ae4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004ae6:	68ba      	ldr	r2, [r7, #8]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d209      	bcs.n	8004b02 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004aee:	4b12      	ldr	r3, [pc, #72]	@ (8004b38 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	4b0f      	ldr	r3, [pc, #60]	@ (8004b30 <prvAddCurrentTaskToDelayedList+0x94>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	3304      	adds	r3, #4
 8004af8:	4619      	mov	r1, r3
 8004afa:	4610      	mov	r0, r2
 8004afc:	f7fe fb8b 	bl	8003216 <vListInsert>
}
 8004b00:	e010      	b.n	8004b24 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b02:	4b0e      	ldr	r3, [pc, #56]	@ (8004b3c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	4b0a      	ldr	r3, [pc, #40]	@ (8004b30 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	3304      	adds	r3, #4
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	4610      	mov	r0, r2
 8004b10:	f7fe fb81 	bl	8003216 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004b14:	4b0a      	ldr	r3, [pc, #40]	@ (8004b40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68ba      	ldr	r2, [r7, #8]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d202      	bcs.n	8004b24 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004b1e:	4a08      	ldr	r2, [pc, #32]	@ (8004b40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	6013      	str	r3, [r2, #0]
}
 8004b24:	bf00      	nop
 8004b26:	3710      	adds	r7, #16
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	20000e64 	.word	0x20000e64
 8004b30:	2000098c 	.word	0x2000098c
 8004b34:	20000e4c 	.word	0x20000e4c
 8004b38:	20000e1c 	.word	0x20000e1c
 8004b3c:	20000e18 	.word	0x20000e18
 8004b40:	20000e80 	.word	0x20000e80

08004b44 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b08a      	sub	sp, #40	@ 0x28
 8004b48:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004b4e:	f000 fb13 	bl	8005178 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004b52:	4b1d      	ldr	r3, [pc, #116]	@ (8004bc8 <xTimerCreateTimerTask+0x84>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d021      	beq.n	8004b9e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004b62:	1d3a      	adds	r2, r7, #4
 8004b64:	f107 0108 	add.w	r1, r7, #8
 8004b68:	f107 030c 	add.w	r3, r7, #12
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7fe fae7 	bl	8003140 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004b72:	6879      	ldr	r1, [r7, #4]
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	9202      	str	r2, [sp, #8]
 8004b7a:	9301      	str	r3, [sp, #4]
 8004b7c:	2302      	movs	r3, #2
 8004b7e:	9300      	str	r3, [sp, #0]
 8004b80:	2300      	movs	r3, #0
 8004b82:	460a      	mov	r2, r1
 8004b84:	4911      	ldr	r1, [pc, #68]	@ (8004bcc <xTimerCreateTimerTask+0x88>)
 8004b86:	4812      	ldr	r0, [pc, #72]	@ (8004bd0 <xTimerCreateTimerTask+0x8c>)
 8004b88:	f7ff f8a2 	bl	8003cd0 <xTaskCreateStatic>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	4a11      	ldr	r2, [pc, #68]	@ (8004bd4 <xTimerCreateTimerTask+0x90>)
 8004b90:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004b92:	4b10      	ldr	r3, [pc, #64]	@ (8004bd4 <xTimerCreateTimerTask+0x90>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d10b      	bne.n	8004bbc <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ba8:	f383 8811 	msr	BASEPRI, r3
 8004bac:	f3bf 8f6f 	isb	sy
 8004bb0:	f3bf 8f4f 	dsb	sy
 8004bb4:	613b      	str	r3, [r7, #16]
}
 8004bb6:	bf00      	nop
 8004bb8:	bf00      	nop
 8004bba:	e7fd      	b.n	8004bb8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004bbc:	697b      	ldr	r3, [r7, #20]
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3718      	adds	r7, #24
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	20000ebc 	.word	0x20000ebc
 8004bcc:	08005c84 	.word	0x08005c84
 8004bd0:	08004d11 	.word	0x08004d11
 8004bd4:	20000ec0 	.word	0x20000ec0

08004bd8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b08a      	sub	sp, #40	@ 0x28
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
 8004be4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004be6:	2300      	movs	r3, #0
 8004be8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d10b      	bne.n	8004c08 <xTimerGenericCommand+0x30>
	__asm volatile
 8004bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bf4:	f383 8811 	msr	BASEPRI, r3
 8004bf8:	f3bf 8f6f 	isb	sy
 8004bfc:	f3bf 8f4f 	dsb	sy
 8004c00:	623b      	str	r3, [r7, #32]
}
 8004c02:	bf00      	nop
 8004c04:	bf00      	nop
 8004c06:	e7fd      	b.n	8004c04 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004c08:	4b19      	ldr	r3, [pc, #100]	@ (8004c70 <xTimerGenericCommand+0x98>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d02a      	beq.n	8004c66 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	2b05      	cmp	r3, #5
 8004c20:	dc18      	bgt.n	8004c54 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004c22:	f7ff fead 	bl	8004980 <xTaskGetSchedulerState>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d109      	bne.n	8004c40 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004c2c:	4b10      	ldr	r3, [pc, #64]	@ (8004c70 <xTimerGenericCommand+0x98>)
 8004c2e:	6818      	ldr	r0, [r3, #0]
 8004c30:	f107 0110 	add.w	r1, r7, #16
 8004c34:	2300      	movs	r3, #0
 8004c36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c38:	f7fe fc5a 	bl	80034f0 <xQueueGenericSend>
 8004c3c:	6278      	str	r0, [r7, #36]	@ 0x24
 8004c3e:	e012      	b.n	8004c66 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004c40:	4b0b      	ldr	r3, [pc, #44]	@ (8004c70 <xTimerGenericCommand+0x98>)
 8004c42:	6818      	ldr	r0, [r3, #0]
 8004c44:	f107 0110 	add.w	r1, r7, #16
 8004c48:	2300      	movs	r3, #0
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f7fe fc50 	bl	80034f0 <xQueueGenericSend>
 8004c50:	6278      	str	r0, [r7, #36]	@ 0x24
 8004c52:	e008      	b.n	8004c66 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004c54:	4b06      	ldr	r3, [pc, #24]	@ (8004c70 <xTimerGenericCommand+0x98>)
 8004c56:	6818      	ldr	r0, [r3, #0]
 8004c58:	f107 0110 	add.w	r1, r7, #16
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	683a      	ldr	r2, [r7, #0]
 8004c60:	f7fe fd48 	bl	80036f4 <xQueueGenericSendFromISR>
 8004c64:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3728      	adds	r7, #40	@ 0x28
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	20000ebc 	.word	0x20000ebc

08004c74 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b088      	sub	sp, #32
 8004c78:	af02      	add	r7, sp, #8
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c7e:	4b23      	ldr	r3, [pc, #140]	@ (8004d0c <prvProcessExpiredTimer+0x98>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	3304      	adds	r3, #4
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7fe fafb 	bl	8003288 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c98:	f003 0304 	and.w	r3, r3, #4
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d023      	beq.n	8004ce8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	699a      	ldr	r2, [r3, #24]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	18d1      	adds	r1, r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	683a      	ldr	r2, [r7, #0]
 8004cac:	6978      	ldr	r0, [r7, #20]
 8004cae:	f000 f8d5 	bl	8004e5c <prvInsertTimerInActiveList>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d020      	beq.n	8004cfa <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004cb8:	2300      	movs	r3, #0
 8004cba:	9300      	str	r3, [sp, #0]
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	2100      	movs	r1, #0
 8004cc2:	6978      	ldr	r0, [r7, #20]
 8004cc4:	f7ff ff88 	bl	8004bd8 <xTimerGenericCommand>
 8004cc8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d114      	bne.n	8004cfa <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cd4:	f383 8811 	msr	BASEPRI, r3
 8004cd8:	f3bf 8f6f 	isb	sy
 8004cdc:	f3bf 8f4f 	dsb	sy
 8004ce0:	60fb      	str	r3, [r7, #12]
}
 8004ce2:	bf00      	nop
 8004ce4:	bf00      	nop
 8004ce6:	e7fd      	b.n	8004ce4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004cee:	f023 0301 	bic.w	r3, r3, #1
 8004cf2:	b2da      	uxtb	r2, r3
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	6a1b      	ldr	r3, [r3, #32]
 8004cfe:	6978      	ldr	r0, [r7, #20]
 8004d00:	4798      	blx	r3
}
 8004d02:	bf00      	nop
 8004d04:	3718      	adds	r7, #24
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	20000eb4 	.word	0x20000eb4

08004d10 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d18:	f107 0308 	add.w	r3, r7, #8
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f000 f859 	bl	8004dd4 <prvGetNextExpireTime>
 8004d22:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	4619      	mov	r1, r3
 8004d28:	68f8      	ldr	r0, [r7, #12]
 8004d2a:	f000 f805 	bl	8004d38 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004d2e:	f000 f8d7 	bl	8004ee0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d32:	bf00      	nop
 8004d34:	e7f0      	b.n	8004d18 <prvTimerTask+0x8>
	...

08004d38 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004d42:	f7ff fa29 	bl	8004198 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d46:	f107 0308 	add.w	r3, r7, #8
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f000 f866 	bl	8004e1c <prvSampleTimeNow>
 8004d50:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d130      	bne.n	8004dba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10a      	bne.n	8004d74 <prvProcessTimerOrBlockTask+0x3c>
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d806      	bhi.n	8004d74 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004d66:	f7ff fa25 	bl	80041b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004d6a:	68f9      	ldr	r1, [r7, #12]
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f7ff ff81 	bl	8004c74 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004d72:	e024      	b.n	8004dbe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d008      	beq.n	8004d8c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004d7a:	4b13      	ldr	r3, [pc, #76]	@ (8004dc8 <prvProcessTimerOrBlockTask+0x90>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d101      	bne.n	8004d88 <prvProcessTimerOrBlockTask+0x50>
 8004d84:	2301      	movs	r3, #1
 8004d86:	e000      	b.n	8004d8a <prvProcessTimerOrBlockTask+0x52>
 8004d88:	2300      	movs	r3, #0
 8004d8a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8004dcc <prvProcessTimerOrBlockTask+0x94>)
 8004d8e:	6818      	ldr	r0, [r3, #0]
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	683a      	ldr	r2, [r7, #0]
 8004d98:	4619      	mov	r1, r3
 8004d9a:	f7fe ff65 	bl	8003c68 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004d9e:	f7ff fa09 	bl	80041b4 <xTaskResumeAll>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d10a      	bne.n	8004dbe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004da8:	4b09      	ldr	r3, [pc, #36]	@ (8004dd0 <prvProcessTimerOrBlockTask+0x98>)
 8004daa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dae:	601a      	str	r2, [r3, #0]
 8004db0:	f3bf 8f4f 	dsb	sy
 8004db4:	f3bf 8f6f 	isb	sy
}
 8004db8:	e001      	b.n	8004dbe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004dba:	f7ff f9fb 	bl	80041b4 <xTaskResumeAll>
}
 8004dbe:	bf00      	nop
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	20000eb8 	.word	0x20000eb8
 8004dcc:	20000ebc 	.word	0x20000ebc
 8004dd0:	e000ed04 	.word	0xe000ed04

08004dd4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004ddc:	4b0e      	ldr	r3, [pc, #56]	@ (8004e18 <prvGetNextExpireTime+0x44>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d101      	bne.n	8004dea <prvGetNextExpireTime+0x16>
 8004de6:	2201      	movs	r2, #1
 8004de8:	e000      	b.n	8004dec <prvGetNextExpireTime+0x18>
 8004dea:	2200      	movs	r2, #0
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d105      	bne.n	8004e04 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004df8:	4b07      	ldr	r3, [pc, #28]	@ (8004e18 <prvGetNextExpireTime+0x44>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	60fb      	str	r3, [r7, #12]
 8004e02:	e001      	b.n	8004e08 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004e04:	2300      	movs	r3, #0
 8004e06:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004e08:	68fb      	ldr	r3, [r7, #12]
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3714      	adds	r7, #20
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	20000eb4 	.word	0x20000eb4

08004e1c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004e24:	f7ff fa64 	bl	80042f0 <xTaskGetTickCount>
 8004e28:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8004e58 <prvSampleTimeNow+0x3c>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d205      	bcs.n	8004e40 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004e34:	f000 f93a 	bl	80050ac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	601a      	str	r2, [r3, #0]
 8004e3e:	e002      	b.n	8004e46 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004e46:	4a04      	ldr	r2, [pc, #16]	@ (8004e58 <prvSampleTimeNow+0x3c>)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	20000ec4 	.word	0x20000ec4

08004e5c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]
 8004e68:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	68ba      	ldr	r2, [r7, #8]
 8004e72:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004e7a:	68ba      	ldr	r2, [r7, #8]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d812      	bhi.n	8004ea8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	1ad2      	subs	r2, r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	699b      	ldr	r3, [r3, #24]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d302      	bcc.n	8004e96 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004e90:	2301      	movs	r3, #1
 8004e92:	617b      	str	r3, [r7, #20]
 8004e94:	e01b      	b.n	8004ece <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004e96:	4b10      	ldr	r3, [pc, #64]	@ (8004ed8 <prvInsertTimerInActiveList+0x7c>)
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	3304      	adds	r3, #4
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	4610      	mov	r0, r2
 8004ea2:	f7fe f9b8 	bl	8003216 <vListInsert>
 8004ea6:	e012      	b.n	8004ece <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d206      	bcs.n	8004ebe <prvInsertTimerInActiveList+0x62>
 8004eb0:	68ba      	ldr	r2, [r7, #8]
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d302      	bcc.n	8004ebe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	617b      	str	r3, [r7, #20]
 8004ebc:	e007      	b.n	8004ece <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ebe:	4b07      	ldr	r3, [pc, #28]	@ (8004edc <prvInsertTimerInActiveList+0x80>)
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	3304      	adds	r3, #4
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	4610      	mov	r0, r2
 8004eca:	f7fe f9a4 	bl	8003216 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004ece:	697b      	ldr	r3, [r7, #20]
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3718      	adds	r7, #24
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	20000eb8 	.word	0x20000eb8
 8004edc:	20000eb4 	.word	0x20000eb4

08004ee0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b08e      	sub	sp, #56	@ 0x38
 8004ee4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ee6:	e0ce      	b.n	8005086 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	da19      	bge.n	8004f22 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004eee:	1d3b      	adds	r3, r7, #4
 8004ef0:	3304      	adds	r3, #4
 8004ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10b      	bne.n	8004f12 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004efe:	f383 8811 	msr	BASEPRI, r3
 8004f02:	f3bf 8f6f 	isb	sy
 8004f06:	f3bf 8f4f 	dsb	sy
 8004f0a:	61fb      	str	r3, [r7, #28]
}
 8004f0c:	bf00      	nop
 8004f0e:	bf00      	nop
 8004f10:	e7fd      	b.n	8004f0e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004f12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f18:	6850      	ldr	r0, [r2, #4]
 8004f1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f1c:	6892      	ldr	r2, [r2, #8]
 8004f1e:	4611      	mov	r1, r2
 8004f20:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f2c0 80ae 	blt.w	8005086 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d004      	beq.n	8004f40 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f38:	3304      	adds	r3, #4
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7fe f9a4 	bl	8003288 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f40:	463b      	mov	r3, r7
 8004f42:	4618      	mov	r0, r3
 8004f44:	f7ff ff6a 	bl	8004e1c <prvSampleTimeNow>
 8004f48:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2b09      	cmp	r3, #9
 8004f4e:	f200 8097 	bhi.w	8005080 <prvProcessReceivedCommands+0x1a0>
 8004f52:	a201      	add	r2, pc, #4	@ (adr r2, 8004f58 <prvProcessReceivedCommands+0x78>)
 8004f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f58:	08004f81 	.word	0x08004f81
 8004f5c:	08004f81 	.word	0x08004f81
 8004f60:	08004f81 	.word	0x08004f81
 8004f64:	08004ff7 	.word	0x08004ff7
 8004f68:	0800500b 	.word	0x0800500b
 8004f6c:	08005057 	.word	0x08005057
 8004f70:	08004f81 	.word	0x08004f81
 8004f74:	08004f81 	.word	0x08004f81
 8004f78:	08004ff7 	.word	0x08004ff7
 8004f7c:	0800500b 	.word	0x0800500b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f82:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f86:	f043 0301 	orr.w	r3, r3, #1
 8004f8a:	b2da      	uxtb	r2, r3
 8004f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f8e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004f92:	68ba      	ldr	r2, [r7, #8]
 8004f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	18d1      	adds	r1, r2, r3
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004fa0:	f7ff ff5c 	bl	8004e5c <prvInsertTimerInActiveList>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d06c      	beq.n	8005084 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004fb0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004fb8:	f003 0304 	and.w	r3, r3, #4
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d061      	beq.n	8005084 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004fc0:	68ba      	ldr	r2, [r7, #8]
 8004fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fc4:	699b      	ldr	r3, [r3, #24]
 8004fc6:	441a      	add	r2, r3
 8004fc8:	2300      	movs	r3, #0
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	2300      	movs	r3, #0
 8004fce:	2100      	movs	r1, #0
 8004fd0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004fd2:	f7ff fe01 	bl	8004bd8 <xTimerGenericCommand>
 8004fd6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004fd8:	6a3b      	ldr	r3, [r7, #32]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d152      	bne.n	8005084 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fe2:	f383 8811 	msr	BASEPRI, r3
 8004fe6:	f3bf 8f6f 	isb	sy
 8004fea:	f3bf 8f4f 	dsb	sy
 8004fee:	61bb      	str	r3, [r7, #24]
}
 8004ff0:	bf00      	nop
 8004ff2:	bf00      	nop
 8004ff4:	e7fd      	b.n	8004ff2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ff8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ffc:	f023 0301 	bic.w	r3, r3, #1
 8005000:	b2da      	uxtb	r2, r3
 8005002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005004:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005008:	e03d      	b.n	8005086 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800500a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800500c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005010:	f043 0301 	orr.w	r3, r3, #1
 8005014:	b2da      	uxtb	r2, r3
 8005016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005018:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800501c:	68ba      	ldr	r2, [r7, #8]
 800501e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005020:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d10b      	bne.n	8005042 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800502a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800502e:	f383 8811 	msr	BASEPRI, r3
 8005032:	f3bf 8f6f 	isb	sy
 8005036:	f3bf 8f4f 	dsb	sy
 800503a:	617b      	str	r3, [r7, #20]
}
 800503c:	bf00      	nop
 800503e:	bf00      	nop
 8005040:	e7fd      	b.n	800503e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005044:	699a      	ldr	r2, [r3, #24]
 8005046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005048:	18d1      	adds	r1, r2, r3
 800504a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800504e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005050:	f7ff ff04 	bl	8004e5c <prvInsertTimerInActiveList>
					break;
 8005054:	e017      	b.n	8005086 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005058:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800505c:	f003 0302 	and.w	r3, r3, #2
 8005060:	2b00      	cmp	r3, #0
 8005062:	d103      	bne.n	800506c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005064:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005066:	f000 fbe7 	bl	8005838 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800506a:	e00c      	b.n	8005086 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800506c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800506e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005072:	f023 0301 	bic.w	r3, r3, #1
 8005076:	b2da      	uxtb	r2, r3
 8005078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800507a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800507e:	e002      	b.n	8005086 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005080:	bf00      	nop
 8005082:	e000      	b.n	8005086 <prvProcessReceivedCommands+0x1a6>
					break;
 8005084:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005086:	4b08      	ldr	r3, [pc, #32]	@ (80050a8 <prvProcessReceivedCommands+0x1c8>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	1d39      	adds	r1, r7, #4
 800508c:	2200      	movs	r2, #0
 800508e:	4618      	mov	r0, r3
 8005090:	f7fe fbce 	bl	8003830 <xQueueReceive>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	f47f af26 	bne.w	8004ee8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800509c:	bf00      	nop
 800509e:	bf00      	nop
 80050a0:	3730      	adds	r7, #48	@ 0x30
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	20000ebc 	.word	0x20000ebc

080050ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b088      	sub	sp, #32
 80050b0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80050b2:	e049      	b.n	8005148 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80050b4:	4b2e      	ldr	r3, [pc, #184]	@ (8005170 <prvSwitchTimerLists+0xc4>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050be:	4b2c      	ldr	r3, [pc, #176]	@ (8005170 <prvSwitchTimerLists+0xc4>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	3304      	adds	r3, #4
 80050cc:	4618      	mov	r0, r3
 80050ce:	f7fe f8db 	bl	8003288 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80050e0:	f003 0304 	and.w	r3, r3, #4
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d02f      	beq.n	8005148 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	693a      	ldr	r2, [r7, #16]
 80050ee:	4413      	add	r3, r2
 80050f0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80050f2:	68ba      	ldr	r2, [r7, #8]
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d90e      	bls.n	8005118 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	68ba      	ldr	r2, [r7, #8]
 80050fe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005106:	4b1a      	ldr	r3, [pc, #104]	@ (8005170 <prvSwitchTimerLists+0xc4>)
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	3304      	adds	r3, #4
 800510e:	4619      	mov	r1, r3
 8005110:	4610      	mov	r0, r2
 8005112:	f7fe f880 	bl	8003216 <vListInsert>
 8005116:	e017      	b.n	8005148 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005118:	2300      	movs	r3, #0
 800511a:	9300      	str	r3, [sp, #0]
 800511c:	2300      	movs	r3, #0
 800511e:	693a      	ldr	r2, [r7, #16]
 8005120:	2100      	movs	r1, #0
 8005122:	68f8      	ldr	r0, [r7, #12]
 8005124:	f7ff fd58 	bl	8004bd8 <xTimerGenericCommand>
 8005128:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d10b      	bne.n	8005148 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005134:	f383 8811 	msr	BASEPRI, r3
 8005138:	f3bf 8f6f 	isb	sy
 800513c:	f3bf 8f4f 	dsb	sy
 8005140:	603b      	str	r3, [r7, #0]
}
 8005142:	bf00      	nop
 8005144:	bf00      	nop
 8005146:	e7fd      	b.n	8005144 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005148:	4b09      	ldr	r3, [pc, #36]	@ (8005170 <prvSwitchTimerLists+0xc4>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d1b0      	bne.n	80050b4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005152:	4b07      	ldr	r3, [pc, #28]	@ (8005170 <prvSwitchTimerLists+0xc4>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005158:	4b06      	ldr	r3, [pc, #24]	@ (8005174 <prvSwitchTimerLists+0xc8>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a04      	ldr	r2, [pc, #16]	@ (8005170 <prvSwitchTimerLists+0xc4>)
 800515e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005160:	4a04      	ldr	r2, [pc, #16]	@ (8005174 <prvSwitchTimerLists+0xc8>)
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	6013      	str	r3, [r2, #0]
}
 8005166:	bf00      	nop
 8005168:	3718      	adds	r7, #24
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	20000eb4 	.word	0x20000eb4
 8005174:	20000eb8 	.word	0x20000eb8

08005178 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800517e:	f000 f96b 	bl	8005458 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005182:	4b15      	ldr	r3, [pc, #84]	@ (80051d8 <prvCheckForValidListAndQueue+0x60>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d120      	bne.n	80051cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800518a:	4814      	ldr	r0, [pc, #80]	@ (80051dc <prvCheckForValidListAndQueue+0x64>)
 800518c:	f7fd fff2 	bl	8003174 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005190:	4813      	ldr	r0, [pc, #76]	@ (80051e0 <prvCheckForValidListAndQueue+0x68>)
 8005192:	f7fd ffef 	bl	8003174 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005196:	4b13      	ldr	r3, [pc, #76]	@ (80051e4 <prvCheckForValidListAndQueue+0x6c>)
 8005198:	4a10      	ldr	r2, [pc, #64]	@ (80051dc <prvCheckForValidListAndQueue+0x64>)
 800519a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800519c:	4b12      	ldr	r3, [pc, #72]	@ (80051e8 <prvCheckForValidListAndQueue+0x70>)
 800519e:	4a10      	ldr	r2, [pc, #64]	@ (80051e0 <prvCheckForValidListAndQueue+0x68>)
 80051a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80051a2:	2300      	movs	r3, #0
 80051a4:	9300      	str	r3, [sp, #0]
 80051a6:	4b11      	ldr	r3, [pc, #68]	@ (80051ec <prvCheckForValidListAndQueue+0x74>)
 80051a8:	4a11      	ldr	r2, [pc, #68]	@ (80051f0 <prvCheckForValidListAndQueue+0x78>)
 80051aa:	2110      	movs	r1, #16
 80051ac:	200a      	movs	r0, #10
 80051ae:	f7fe f8ff 	bl	80033b0 <xQueueGenericCreateStatic>
 80051b2:	4603      	mov	r3, r0
 80051b4:	4a08      	ldr	r2, [pc, #32]	@ (80051d8 <prvCheckForValidListAndQueue+0x60>)
 80051b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80051b8:	4b07      	ldr	r3, [pc, #28]	@ (80051d8 <prvCheckForValidListAndQueue+0x60>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d005      	beq.n	80051cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80051c0:	4b05      	ldr	r3, [pc, #20]	@ (80051d8 <prvCheckForValidListAndQueue+0x60>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	490b      	ldr	r1, [pc, #44]	@ (80051f4 <prvCheckForValidListAndQueue+0x7c>)
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7fe fd24 	bl	8003c14 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80051cc:	f000 f976 	bl	80054bc <vPortExitCritical>
}
 80051d0:	bf00      	nop
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	20000ebc 	.word	0x20000ebc
 80051dc:	20000e8c 	.word	0x20000e8c
 80051e0:	20000ea0 	.word	0x20000ea0
 80051e4:	20000eb4 	.word	0x20000eb4
 80051e8:	20000eb8 	.word	0x20000eb8
 80051ec:	20000f68 	.word	0x20000f68
 80051f0:	20000ec8 	.word	0x20000ec8
 80051f4:	08005c8c 	.word	0x08005c8c

080051f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	3b04      	subs	r3, #4
 8005208:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005210:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	3b04      	subs	r3, #4
 8005216:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	f023 0201 	bic.w	r2, r3, #1
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	3b04      	subs	r3, #4
 8005226:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005228:	4a0c      	ldr	r2, [pc, #48]	@ (800525c <pxPortInitialiseStack+0x64>)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	3b14      	subs	r3, #20
 8005232:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	3b04      	subs	r3, #4
 800523e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f06f 0202 	mvn.w	r2, #2
 8005246:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	3b20      	subs	r3, #32
 800524c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800524e:	68fb      	ldr	r3, [r7, #12]
}
 8005250:	4618      	mov	r0, r3
 8005252:	3714      	adds	r7, #20
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr
 800525c:	08005261 	.word	0x08005261

08005260 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005266:	2300      	movs	r3, #0
 8005268:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800526a:	4b13      	ldr	r3, [pc, #76]	@ (80052b8 <prvTaskExitError+0x58>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005272:	d00b      	beq.n	800528c <prvTaskExitError+0x2c>
	__asm volatile
 8005274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005278:	f383 8811 	msr	BASEPRI, r3
 800527c:	f3bf 8f6f 	isb	sy
 8005280:	f3bf 8f4f 	dsb	sy
 8005284:	60fb      	str	r3, [r7, #12]
}
 8005286:	bf00      	nop
 8005288:	bf00      	nop
 800528a:	e7fd      	b.n	8005288 <prvTaskExitError+0x28>
	__asm volatile
 800528c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005290:	f383 8811 	msr	BASEPRI, r3
 8005294:	f3bf 8f6f 	isb	sy
 8005298:	f3bf 8f4f 	dsb	sy
 800529c:	60bb      	str	r3, [r7, #8]
}
 800529e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80052a0:	bf00      	nop
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d0fc      	beq.n	80052a2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80052a8:	bf00      	nop
 80052aa:	bf00      	nop
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	2000000c 	.word	0x2000000c
 80052bc:	00000000 	.word	0x00000000

080052c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80052c0:	4b07      	ldr	r3, [pc, #28]	@ (80052e0 <pxCurrentTCBConst2>)
 80052c2:	6819      	ldr	r1, [r3, #0]
 80052c4:	6808      	ldr	r0, [r1, #0]
 80052c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ca:	f380 8809 	msr	PSP, r0
 80052ce:	f3bf 8f6f 	isb	sy
 80052d2:	f04f 0000 	mov.w	r0, #0
 80052d6:	f380 8811 	msr	BASEPRI, r0
 80052da:	4770      	bx	lr
 80052dc:	f3af 8000 	nop.w

080052e0 <pxCurrentTCBConst2>:
 80052e0:	2000098c 	.word	0x2000098c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80052e4:	bf00      	nop
 80052e6:	bf00      	nop

080052e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80052e8:	4808      	ldr	r0, [pc, #32]	@ (800530c <prvPortStartFirstTask+0x24>)
 80052ea:	6800      	ldr	r0, [r0, #0]
 80052ec:	6800      	ldr	r0, [r0, #0]
 80052ee:	f380 8808 	msr	MSP, r0
 80052f2:	f04f 0000 	mov.w	r0, #0
 80052f6:	f380 8814 	msr	CONTROL, r0
 80052fa:	b662      	cpsie	i
 80052fc:	b661      	cpsie	f
 80052fe:	f3bf 8f4f 	dsb	sy
 8005302:	f3bf 8f6f 	isb	sy
 8005306:	df00      	svc	0
 8005308:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800530a:	bf00      	nop
 800530c:	e000ed08 	.word	0xe000ed08

08005310 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005316:	4b47      	ldr	r3, [pc, #284]	@ (8005434 <xPortStartScheduler+0x124>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a47      	ldr	r2, [pc, #284]	@ (8005438 <xPortStartScheduler+0x128>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d10b      	bne.n	8005338 <xPortStartScheduler+0x28>
	__asm volatile
 8005320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005324:	f383 8811 	msr	BASEPRI, r3
 8005328:	f3bf 8f6f 	isb	sy
 800532c:	f3bf 8f4f 	dsb	sy
 8005330:	60fb      	str	r3, [r7, #12]
}
 8005332:	bf00      	nop
 8005334:	bf00      	nop
 8005336:	e7fd      	b.n	8005334 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005338:	4b3e      	ldr	r3, [pc, #248]	@ (8005434 <xPortStartScheduler+0x124>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a3f      	ldr	r2, [pc, #252]	@ (800543c <xPortStartScheduler+0x12c>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d10b      	bne.n	800535a <xPortStartScheduler+0x4a>
	__asm volatile
 8005342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005346:	f383 8811 	msr	BASEPRI, r3
 800534a:	f3bf 8f6f 	isb	sy
 800534e:	f3bf 8f4f 	dsb	sy
 8005352:	613b      	str	r3, [r7, #16]
}
 8005354:	bf00      	nop
 8005356:	bf00      	nop
 8005358:	e7fd      	b.n	8005356 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800535a:	4b39      	ldr	r3, [pc, #228]	@ (8005440 <xPortStartScheduler+0x130>)
 800535c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	b2db      	uxtb	r3, r3
 8005364:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	22ff      	movs	r2, #255	@ 0xff
 800536a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	b2db      	uxtb	r3, r3
 8005372:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005374:	78fb      	ldrb	r3, [r7, #3]
 8005376:	b2db      	uxtb	r3, r3
 8005378:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800537c:	b2da      	uxtb	r2, r3
 800537e:	4b31      	ldr	r3, [pc, #196]	@ (8005444 <xPortStartScheduler+0x134>)
 8005380:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005382:	4b31      	ldr	r3, [pc, #196]	@ (8005448 <xPortStartScheduler+0x138>)
 8005384:	2207      	movs	r2, #7
 8005386:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005388:	e009      	b.n	800539e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800538a:	4b2f      	ldr	r3, [pc, #188]	@ (8005448 <xPortStartScheduler+0x138>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	3b01      	subs	r3, #1
 8005390:	4a2d      	ldr	r2, [pc, #180]	@ (8005448 <xPortStartScheduler+0x138>)
 8005392:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005394:	78fb      	ldrb	r3, [r7, #3]
 8005396:	b2db      	uxtb	r3, r3
 8005398:	005b      	lsls	r3, r3, #1
 800539a:	b2db      	uxtb	r3, r3
 800539c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800539e:	78fb      	ldrb	r3, [r7, #3]
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053a6:	2b80      	cmp	r3, #128	@ 0x80
 80053a8:	d0ef      	beq.n	800538a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80053aa:	4b27      	ldr	r3, [pc, #156]	@ (8005448 <xPortStartScheduler+0x138>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f1c3 0307 	rsb	r3, r3, #7
 80053b2:	2b04      	cmp	r3, #4
 80053b4:	d00b      	beq.n	80053ce <xPortStartScheduler+0xbe>
	__asm volatile
 80053b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ba:	f383 8811 	msr	BASEPRI, r3
 80053be:	f3bf 8f6f 	isb	sy
 80053c2:	f3bf 8f4f 	dsb	sy
 80053c6:	60bb      	str	r3, [r7, #8]
}
 80053c8:	bf00      	nop
 80053ca:	bf00      	nop
 80053cc:	e7fd      	b.n	80053ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80053ce:	4b1e      	ldr	r3, [pc, #120]	@ (8005448 <xPortStartScheduler+0x138>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	021b      	lsls	r3, r3, #8
 80053d4:	4a1c      	ldr	r2, [pc, #112]	@ (8005448 <xPortStartScheduler+0x138>)
 80053d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80053d8:	4b1b      	ldr	r3, [pc, #108]	@ (8005448 <xPortStartScheduler+0x138>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80053e0:	4a19      	ldr	r2, [pc, #100]	@ (8005448 <xPortStartScheduler+0x138>)
 80053e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	b2da      	uxtb	r2, r3
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80053ec:	4b17      	ldr	r3, [pc, #92]	@ (800544c <xPortStartScheduler+0x13c>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a16      	ldr	r2, [pc, #88]	@ (800544c <xPortStartScheduler+0x13c>)
 80053f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80053f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80053f8:	4b14      	ldr	r3, [pc, #80]	@ (800544c <xPortStartScheduler+0x13c>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a13      	ldr	r2, [pc, #76]	@ (800544c <xPortStartScheduler+0x13c>)
 80053fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005402:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005404:	f000 f8da 	bl	80055bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005408:	4b11      	ldr	r3, [pc, #68]	@ (8005450 <xPortStartScheduler+0x140>)
 800540a:	2200      	movs	r2, #0
 800540c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800540e:	f000 f8f9 	bl	8005604 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005412:	4b10      	ldr	r3, [pc, #64]	@ (8005454 <xPortStartScheduler+0x144>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a0f      	ldr	r2, [pc, #60]	@ (8005454 <xPortStartScheduler+0x144>)
 8005418:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800541c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800541e:	f7ff ff63 	bl	80052e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005422:	f7ff f82f 	bl	8004484 <vTaskSwitchContext>
	prvTaskExitError();
 8005426:	f7ff ff1b 	bl	8005260 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3718      	adds	r7, #24
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}
 8005434:	e000ed00 	.word	0xe000ed00
 8005438:	410fc271 	.word	0x410fc271
 800543c:	410fc270 	.word	0x410fc270
 8005440:	e000e400 	.word	0xe000e400
 8005444:	20000fb8 	.word	0x20000fb8
 8005448:	20000fbc 	.word	0x20000fbc
 800544c:	e000ed20 	.word	0xe000ed20
 8005450:	2000000c 	.word	0x2000000c
 8005454:	e000ef34 	.word	0xe000ef34

08005458 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
	__asm volatile
 800545e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005462:	f383 8811 	msr	BASEPRI, r3
 8005466:	f3bf 8f6f 	isb	sy
 800546a:	f3bf 8f4f 	dsb	sy
 800546e:	607b      	str	r3, [r7, #4]
}
 8005470:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005472:	4b10      	ldr	r3, [pc, #64]	@ (80054b4 <vPortEnterCritical+0x5c>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	3301      	adds	r3, #1
 8005478:	4a0e      	ldr	r2, [pc, #56]	@ (80054b4 <vPortEnterCritical+0x5c>)
 800547a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800547c:	4b0d      	ldr	r3, [pc, #52]	@ (80054b4 <vPortEnterCritical+0x5c>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d110      	bne.n	80054a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005484:	4b0c      	ldr	r3, [pc, #48]	@ (80054b8 <vPortEnterCritical+0x60>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00b      	beq.n	80054a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800548e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005492:	f383 8811 	msr	BASEPRI, r3
 8005496:	f3bf 8f6f 	isb	sy
 800549a:	f3bf 8f4f 	dsb	sy
 800549e:	603b      	str	r3, [r7, #0]
}
 80054a0:	bf00      	nop
 80054a2:	bf00      	nop
 80054a4:	e7fd      	b.n	80054a2 <vPortEnterCritical+0x4a>
	}
}
 80054a6:	bf00      	nop
 80054a8:	370c      	adds	r7, #12
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	2000000c 	.word	0x2000000c
 80054b8:	e000ed04 	.word	0xe000ed04

080054bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80054c2:	4b12      	ldr	r3, [pc, #72]	@ (800550c <vPortExitCritical+0x50>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10b      	bne.n	80054e2 <vPortExitCritical+0x26>
	__asm volatile
 80054ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ce:	f383 8811 	msr	BASEPRI, r3
 80054d2:	f3bf 8f6f 	isb	sy
 80054d6:	f3bf 8f4f 	dsb	sy
 80054da:	607b      	str	r3, [r7, #4]
}
 80054dc:	bf00      	nop
 80054de:	bf00      	nop
 80054e0:	e7fd      	b.n	80054de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80054e2:	4b0a      	ldr	r3, [pc, #40]	@ (800550c <vPortExitCritical+0x50>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	3b01      	subs	r3, #1
 80054e8:	4a08      	ldr	r2, [pc, #32]	@ (800550c <vPortExitCritical+0x50>)
 80054ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80054ec:	4b07      	ldr	r3, [pc, #28]	@ (800550c <vPortExitCritical+0x50>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d105      	bne.n	8005500 <vPortExitCritical+0x44>
 80054f4:	2300      	movs	r3, #0
 80054f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	f383 8811 	msr	BASEPRI, r3
}
 80054fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr
 800550c:	2000000c 	.word	0x2000000c

08005510 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005510:	f3ef 8009 	mrs	r0, PSP
 8005514:	f3bf 8f6f 	isb	sy
 8005518:	4b15      	ldr	r3, [pc, #84]	@ (8005570 <pxCurrentTCBConst>)
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	f01e 0f10 	tst.w	lr, #16
 8005520:	bf08      	it	eq
 8005522:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005526:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800552a:	6010      	str	r0, [r2, #0]
 800552c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005530:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005534:	f380 8811 	msr	BASEPRI, r0
 8005538:	f3bf 8f4f 	dsb	sy
 800553c:	f3bf 8f6f 	isb	sy
 8005540:	f7fe ffa0 	bl	8004484 <vTaskSwitchContext>
 8005544:	f04f 0000 	mov.w	r0, #0
 8005548:	f380 8811 	msr	BASEPRI, r0
 800554c:	bc09      	pop	{r0, r3}
 800554e:	6819      	ldr	r1, [r3, #0]
 8005550:	6808      	ldr	r0, [r1, #0]
 8005552:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005556:	f01e 0f10 	tst.w	lr, #16
 800555a:	bf08      	it	eq
 800555c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005560:	f380 8809 	msr	PSP, r0
 8005564:	f3bf 8f6f 	isb	sy
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	f3af 8000 	nop.w

08005570 <pxCurrentTCBConst>:
 8005570:	2000098c 	.word	0x2000098c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005574:	bf00      	nop
 8005576:	bf00      	nop

08005578 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
	__asm volatile
 800557e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005582:	f383 8811 	msr	BASEPRI, r3
 8005586:	f3bf 8f6f 	isb	sy
 800558a:	f3bf 8f4f 	dsb	sy
 800558e:	607b      	str	r3, [r7, #4]
}
 8005590:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005592:	f7fe febd 	bl	8004310 <xTaskIncrementTick>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d003      	beq.n	80055a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800559c:	4b06      	ldr	r3, [pc, #24]	@ (80055b8 <xPortSysTickHandler+0x40>)
 800559e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055a2:	601a      	str	r2, [r3, #0]
 80055a4:	2300      	movs	r3, #0
 80055a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	f383 8811 	msr	BASEPRI, r3
}
 80055ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80055b0:	bf00      	nop
 80055b2:	3708      	adds	r7, #8
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	e000ed04 	.word	0xe000ed04

080055bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80055bc:	b480      	push	{r7}
 80055be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80055c0:	4b0b      	ldr	r3, [pc, #44]	@ (80055f0 <vPortSetupTimerInterrupt+0x34>)
 80055c2:	2200      	movs	r2, #0
 80055c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80055c6:	4b0b      	ldr	r3, [pc, #44]	@ (80055f4 <vPortSetupTimerInterrupt+0x38>)
 80055c8:	2200      	movs	r2, #0
 80055ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80055cc:	4b0a      	ldr	r3, [pc, #40]	@ (80055f8 <vPortSetupTimerInterrupt+0x3c>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a0a      	ldr	r2, [pc, #40]	@ (80055fc <vPortSetupTimerInterrupt+0x40>)
 80055d2:	fba2 2303 	umull	r2, r3, r2, r3
 80055d6:	099b      	lsrs	r3, r3, #6
 80055d8:	4a09      	ldr	r2, [pc, #36]	@ (8005600 <vPortSetupTimerInterrupt+0x44>)
 80055da:	3b01      	subs	r3, #1
 80055dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80055de:	4b04      	ldr	r3, [pc, #16]	@ (80055f0 <vPortSetupTimerInterrupt+0x34>)
 80055e0:	2207      	movs	r2, #7
 80055e2:	601a      	str	r2, [r3, #0]
}
 80055e4:	bf00      	nop
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	e000e010 	.word	0xe000e010
 80055f4:	e000e018 	.word	0xe000e018
 80055f8:	20000000 	.word	0x20000000
 80055fc:	10624dd3 	.word	0x10624dd3
 8005600:	e000e014 	.word	0xe000e014

08005604 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005604:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005614 <vPortEnableVFP+0x10>
 8005608:	6801      	ldr	r1, [r0, #0]
 800560a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800560e:	6001      	str	r1, [r0, #0]
 8005610:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005612:	bf00      	nop
 8005614:	e000ed88 	.word	0xe000ed88

08005618 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800561e:	f3ef 8305 	mrs	r3, IPSR
 8005622:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2b0f      	cmp	r3, #15
 8005628:	d915      	bls.n	8005656 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800562a:	4a18      	ldr	r2, [pc, #96]	@ (800568c <vPortValidateInterruptPriority+0x74>)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	4413      	add	r3, r2
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005634:	4b16      	ldr	r3, [pc, #88]	@ (8005690 <vPortValidateInterruptPriority+0x78>)
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	7afa      	ldrb	r2, [r7, #11]
 800563a:	429a      	cmp	r2, r3
 800563c:	d20b      	bcs.n	8005656 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800563e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005642:	f383 8811 	msr	BASEPRI, r3
 8005646:	f3bf 8f6f 	isb	sy
 800564a:	f3bf 8f4f 	dsb	sy
 800564e:	607b      	str	r3, [r7, #4]
}
 8005650:	bf00      	nop
 8005652:	bf00      	nop
 8005654:	e7fd      	b.n	8005652 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005656:	4b0f      	ldr	r3, [pc, #60]	@ (8005694 <vPortValidateInterruptPriority+0x7c>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800565e:	4b0e      	ldr	r3, [pc, #56]	@ (8005698 <vPortValidateInterruptPriority+0x80>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	429a      	cmp	r2, r3
 8005664:	d90b      	bls.n	800567e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800566a:	f383 8811 	msr	BASEPRI, r3
 800566e:	f3bf 8f6f 	isb	sy
 8005672:	f3bf 8f4f 	dsb	sy
 8005676:	603b      	str	r3, [r7, #0]
}
 8005678:	bf00      	nop
 800567a:	bf00      	nop
 800567c:	e7fd      	b.n	800567a <vPortValidateInterruptPriority+0x62>
	}
 800567e:	bf00      	nop
 8005680:	3714      	adds	r7, #20
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	e000e3f0 	.word	0xe000e3f0
 8005690:	20000fb8 	.word	0x20000fb8
 8005694:	e000ed0c 	.word	0xe000ed0c
 8005698:	20000fbc 	.word	0x20000fbc

0800569c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b08a      	sub	sp, #40	@ 0x28
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80056a4:	2300      	movs	r3, #0
 80056a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80056a8:	f7fe fd76 	bl	8004198 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80056ac:	4b5c      	ldr	r3, [pc, #368]	@ (8005820 <pvPortMalloc+0x184>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d101      	bne.n	80056b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80056b4:	f000 f924 	bl	8005900 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80056b8:	4b5a      	ldr	r3, [pc, #360]	@ (8005824 <pvPortMalloc+0x188>)
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4013      	ands	r3, r2
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	f040 8095 	bne.w	80057f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d01e      	beq.n	800570a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80056cc:	2208      	movs	r2, #8
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4413      	add	r3, r2
 80056d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f003 0307 	and.w	r3, r3, #7
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d015      	beq.n	800570a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f023 0307 	bic.w	r3, r3, #7
 80056e4:	3308      	adds	r3, #8
 80056e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f003 0307 	and.w	r3, r3, #7
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00b      	beq.n	800570a <pvPortMalloc+0x6e>
	__asm volatile
 80056f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f6:	f383 8811 	msr	BASEPRI, r3
 80056fa:	f3bf 8f6f 	isb	sy
 80056fe:	f3bf 8f4f 	dsb	sy
 8005702:	617b      	str	r3, [r7, #20]
}
 8005704:	bf00      	nop
 8005706:	bf00      	nop
 8005708:	e7fd      	b.n	8005706 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d06f      	beq.n	80057f0 <pvPortMalloc+0x154>
 8005710:	4b45      	ldr	r3, [pc, #276]	@ (8005828 <pvPortMalloc+0x18c>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	429a      	cmp	r2, r3
 8005718:	d86a      	bhi.n	80057f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800571a:	4b44      	ldr	r3, [pc, #272]	@ (800582c <pvPortMalloc+0x190>)
 800571c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800571e:	4b43      	ldr	r3, [pc, #268]	@ (800582c <pvPortMalloc+0x190>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005724:	e004      	b.n	8005730 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005728:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800572a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	429a      	cmp	r2, r3
 8005738:	d903      	bls.n	8005742 <pvPortMalloc+0xa6>
 800573a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1f1      	bne.n	8005726 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005742:	4b37      	ldr	r3, [pc, #220]	@ (8005820 <pvPortMalloc+0x184>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005748:	429a      	cmp	r2, r3
 800574a:	d051      	beq.n	80057f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800574c:	6a3b      	ldr	r3, [r7, #32]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2208      	movs	r2, #8
 8005752:	4413      	add	r3, r2
 8005754:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	6a3b      	ldr	r3, [r7, #32]
 800575c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800575e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	1ad2      	subs	r2, r2, r3
 8005766:	2308      	movs	r3, #8
 8005768:	005b      	lsls	r3, r3, #1
 800576a:	429a      	cmp	r2, r3
 800576c:	d920      	bls.n	80057b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800576e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4413      	add	r3, r2
 8005774:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	f003 0307 	and.w	r3, r3, #7
 800577c:	2b00      	cmp	r3, #0
 800577e:	d00b      	beq.n	8005798 <pvPortMalloc+0xfc>
	__asm volatile
 8005780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005784:	f383 8811 	msr	BASEPRI, r3
 8005788:	f3bf 8f6f 	isb	sy
 800578c:	f3bf 8f4f 	dsb	sy
 8005790:	613b      	str	r3, [r7, #16]
}
 8005792:	bf00      	nop
 8005794:	bf00      	nop
 8005796:	e7fd      	b.n	8005794 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800579a:	685a      	ldr	r2, [r3, #4]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	1ad2      	subs	r2, r2, r3
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80057a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80057aa:	69b8      	ldr	r0, [r7, #24]
 80057ac:	f000 f90a 	bl	80059c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80057b0:	4b1d      	ldr	r3, [pc, #116]	@ (8005828 <pvPortMalloc+0x18c>)
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	4a1b      	ldr	r2, [pc, #108]	@ (8005828 <pvPortMalloc+0x18c>)
 80057bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80057be:	4b1a      	ldr	r3, [pc, #104]	@ (8005828 <pvPortMalloc+0x18c>)
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	4b1b      	ldr	r3, [pc, #108]	@ (8005830 <pvPortMalloc+0x194>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d203      	bcs.n	80057d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80057ca:	4b17      	ldr	r3, [pc, #92]	@ (8005828 <pvPortMalloc+0x18c>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a18      	ldr	r2, [pc, #96]	@ (8005830 <pvPortMalloc+0x194>)
 80057d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80057d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d4:	685a      	ldr	r2, [r3, #4]
 80057d6:	4b13      	ldr	r3, [pc, #76]	@ (8005824 <pvPortMalloc+0x188>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	431a      	orrs	r2, r3
 80057dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80057e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e2:	2200      	movs	r2, #0
 80057e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80057e6:	4b13      	ldr	r3, [pc, #76]	@ (8005834 <pvPortMalloc+0x198>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	3301      	adds	r3, #1
 80057ec:	4a11      	ldr	r2, [pc, #68]	@ (8005834 <pvPortMalloc+0x198>)
 80057ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80057f0:	f7fe fce0 	bl	80041b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	f003 0307 	and.w	r3, r3, #7
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00b      	beq.n	8005816 <pvPortMalloc+0x17a>
	__asm volatile
 80057fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005802:	f383 8811 	msr	BASEPRI, r3
 8005806:	f3bf 8f6f 	isb	sy
 800580a:	f3bf 8f4f 	dsb	sy
 800580e:	60fb      	str	r3, [r7, #12]
}
 8005810:	bf00      	nop
 8005812:	bf00      	nop
 8005814:	e7fd      	b.n	8005812 <pvPortMalloc+0x176>
	return pvReturn;
 8005816:	69fb      	ldr	r3, [r7, #28]
}
 8005818:	4618      	mov	r0, r3
 800581a:	3728      	adds	r7, #40	@ 0x28
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	20004bc8 	.word	0x20004bc8
 8005824:	20004bdc 	.word	0x20004bdc
 8005828:	20004bcc 	.word	0x20004bcc
 800582c:	20004bc0 	.word	0x20004bc0
 8005830:	20004bd0 	.word	0x20004bd0
 8005834:	20004bd4 	.word	0x20004bd4

08005838 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b086      	sub	sp, #24
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d04f      	beq.n	80058ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800584a:	2308      	movs	r3, #8
 800584c:	425b      	negs	r3, r3
 800584e:	697a      	ldr	r2, [r7, #20]
 8005850:	4413      	add	r3, r2
 8005852:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	685a      	ldr	r2, [r3, #4]
 800585c:	4b25      	ldr	r3, [pc, #148]	@ (80058f4 <vPortFree+0xbc>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4013      	ands	r3, r2
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10b      	bne.n	800587e <vPortFree+0x46>
	__asm volatile
 8005866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800586a:	f383 8811 	msr	BASEPRI, r3
 800586e:	f3bf 8f6f 	isb	sy
 8005872:	f3bf 8f4f 	dsb	sy
 8005876:	60fb      	str	r3, [r7, #12]
}
 8005878:	bf00      	nop
 800587a:	bf00      	nop
 800587c:	e7fd      	b.n	800587a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00b      	beq.n	800589e <vPortFree+0x66>
	__asm volatile
 8005886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800588a:	f383 8811 	msr	BASEPRI, r3
 800588e:	f3bf 8f6f 	isb	sy
 8005892:	f3bf 8f4f 	dsb	sy
 8005896:	60bb      	str	r3, [r7, #8]
}
 8005898:	bf00      	nop
 800589a:	bf00      	nop
 800589c:	e7fd      	b.n	800589a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	685a      	ldr	r2, [r3, #4]
 80058a2:	4b14      	ldr	r3, [pc, #80]	@ (80058f4 <vPortFree+0xbc>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4013      	ands	r3, r2
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d01e      	beq.n	80058ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d11a      	bne.n	80058ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	685a      	ldr	r2, [r3, #4]
 80058b8:	4b0e      	ldr	r3, [pc, #56]	@ (80058f4 <vPortFree+0xbc>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	43db      	mvns	r3, r3
 80058be:	401a      	ands	r2, r3
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80058c4:	f7fe fc68 	bl	8004198 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	685a      	ldr	r2, [r3, #4]
 80058cc:	4b0a      	ldr	r3, [pc, #40]	@ (80058f8 <vPortFree+0xc0>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4413      	add	r3, r2
 80058d2:	4a09      	ldr	r2, [pc, #36]	@ (80058f8 <vPortFree+0xc0>)
 80058d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80058d6:	6938      	ldr	r0, [r7, #16]
 80058d8:	f000 f874 	bl	80059c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80058dc:	4b07      	ldr	r3, [pc, #28]	@ (80058fc <vPortFree+0xc4>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	3301      	adds	r3, #1
 80058e2:	4a06      	ldr	r2, [pc, #24]	@ (80058fc <vPortFree+0xc4>)
 80058e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80058e6:	f7fe fc65 	bl	80041b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80058ea:	bf00      	nop
 80058ec:	3718      	adds	r7, #24
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	20004bdc 	.word	0x20004bdc
 80058f8:	20004bcc 	.word	0x20004bcc
 80058fc:	20004bd8 	.word	0x20004bd8

08005900 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005906:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800590a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800590c:	4b27      	ldr	r3, [pc, #156]	@ (80059ac <prvHeapInit+0xac>)
 800590e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f003 0307 	and.w	r3, r3, #7
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00c      	beq.n	8005934 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	3307      	adds	r3, #7
 800591e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f023 0307 	bic.w	r3, r3, #7
 8005926:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	4a1f      	ldr	r2, [pc, #124]	@ (80059ac <prvHeapInit+0xac>)
 8005930:	4413      	add	r3, r2
 8005932:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005938:	4a1d      	ldr	r2, [pc, #116]	@ (80059b0 <prvHeapInit+0xb0>)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800593e:	4b1c      	ldr	r3, [pc, #112]	@ (80059b0 <prvHeapInit+0xb0>)
 8005940:	2200      	movs	r2, #0
 8005942:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	68ba      	ldr	r2, [r7, #8]
 8005948:	4413      	add	r3, r2
 800594a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800594c:	2208      	movs	r2, #8
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	1a9b      	subs	r3, r3, r2
 8005952:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f023 0307 	bic.w	r3, r3, #7
 800595a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	4a15      	ldr	r2, [pc, #84]	@ (80059b4 <prvHeapInit+0xb4>)
 8005960:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005962:	4b14      	ldr	r3, [pc, #80]	@ (80059b4 <prvHeapInit+0xb4>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2200      	movs	r2, #0
 8005968:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800596a:	4b12      	ldr	r3, [pc, #72]	@ (80059b4 <prvHeapInit+0xb4>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2200      	movs	r2, #0
 8005970:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	1ad2      	subs	r2, r2, r3
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005980:	4b0c      	ldr	r3, [pc, #48]	@ (80059b4 <prvHeapInit+0xb4>)
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	4a0a      	ldr	r2, [pc, #40]	@ (80059b8 <prvHeapInit+0xb8>)
 800598e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	4a09      	ldr	r2, [pc, #36]	@ (80059bc <prvHeapInit+0xbc>)
 8005996:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005998:	4b09      	ldr	r3, [pc, #36]	@ (80059c0 <prvHeapInit+0xc0>)
 800599a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800599e:	601a      	str	r2, [r3, #0]
}
 80059a0:	bf00      	nop
 80059a2:	3714      	adds	r7, #20
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr
 80059ac:	20000fc0 	.word	0x20000fc0
 80059b0:	20004bc0 	.word	0x20004bc0
 80059b4:	20004bc8 	.word	0x20004bc8
 80059b8:	20004bd0 	.word	0x20004bd0
 80059bc:	20004bcc 	.word	0x20004bcc
 80059c0:	20004bdc 	.word	0x20004bdc

080059c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80059cc:	4b28      	ldr	r3, [pc, #160]	@ (8005a70 <prvInsertBlockIntoFreeList+0xac>)
 80059ce:	60fb      	str	r3, [r7, #12]
 80059d0:	e002      	b.n	80059d8 <prvInsertBlockIntoFreeList+0x14>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	60fb      	str	r3, [r7, #12]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d8f7      	bhi.n	80059d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	4413      	add	r3, r2
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d108      	bne.n	8005a06 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	685a      	ldr	r2, [r3, #4]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	441a      	add	r2, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	68ba      	ldr	r2, [r7, #8]
 8005a10:	441a      	add	r2, r3
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d118      	bne.n	8005a4c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	4b15      	ldr	r3, [pc, #84]	@ (8005a74 <prvInsertBlockIntoFreeList+0xb0>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d00d      	beq.n	8005a42 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685a      	ldr	r2, [r3, #4]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	441a      	add	r2, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	601a      	str	r2, [r3, #0]
 8005a40:	e008      	b.n	8005a54 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005a42:	4b0c      	ldr	r3, [pc, #48]	@ (8005a74 <prvInsertBlockIntoFreeList+0xb0>)
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	601a      	str	r2, [r3, #0]
 8005a4a:	e003      	b.n	8005a54 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d002      	beq.n	8005a62 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a62:	bf00      	nop
 8005a64:	3714      	adds	r7, #20
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop
 8005a70:	20004bc0 	.word	0x20004bc0
 8005a74:	20004bc8 	.word	0x20004bc8

08005a78 <memset>:
 8005a78:	4402      	add	r2, r0
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d100      	bne.n	8005a82 <memset+0xa>
 8005a80:	4770      	bx	lr
 8005a82:	f803 1b01 	strb.w	r1, [r3], #1
 8005a86:	e7f9      	b.n	8005a7c <memset+0x4>

08005a88 <_reclaim_reent>:
 8005a88:	4b2d      	ldr	r3, [pc, #180]	@ (8005b40 <_reclaim_reent+0xb8>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4283      	cmp	r3, r0
 8005a8e:	b570      	push	{r4, r5, r6, lr}
 8005a90:	4604      	mov	r4, r0
 8005a92:	d053      	beq.n	8005b3c <_reclaim_reent+0xb4>
 8005a94:	69c3      	ldr	r3, [r0, #28]
 8005a96:	b31b      	cbz	r3, 8005ae0 <_reclaim_reent+0x58>
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	b163      	cbz	r3, 8005ab6 <_reclaim_reent+0x2e>
 8005a9c:	2500      	movs	r5, #0
 8005a9e:	69e3      	ldr	r3, [r4, #28]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	5959      	ldr	r1, [r3, r5]
 8005aa4:	b9b1      	cbnz	r1, 8005ad4 <_reclaim_reent+0x4c>
 8005aa6:	3504      	adds	r5, #4
 8005aa8:	2d80      	cmp	r5, #128	@ 0x80
 8005aaa:	d1f8      	bne.n	8005a9e <_reclaim_reent+0x16>
 8005aac:	69e3      	ldr	r3, [r4, #28]
 8005aae:	4620      	mov	r0, r4
 8005ab0:	68d9      	ldr	r1, [r3, #12]
 8005ab2:	f000 f87b 	bl	8005bac <_free_r>
 8005ab6:	69e3      	ldr	r3, [r4, #28]
 8005ab8:	6819      	ldr	r1, [r3, #0]
 8005aba:	b111      	cbz	r1, 8005ac2 <_reclaim_reent+0x3a>
 8005abc:	4620      	mov	r0, r4
 8005abe:	f000 f875 	bl	8005bac <_free_r>
 8005ac2:	69e3      	ldr	r3, [r4, #28]
 8005ac4:	689d      	ldr	r5, [r3, #8]
 8005ac6:	b15d      	cbz	r5, 8005ae0 <_reclaim_reent+0x58>
 8005ac8:	4629      	mov	r1, r5
 8005aca:	4620      	mov	r0, r4
 8005acc:	682d      	ldr	r5, [r5, #0]
 8005ace:	f000 f86d 	bl	8005bac <_free_r>
 8005ad2:	e7f8      	b.n	8005ac6 <_reclaim_reent+0x3e>
 8005ad4:	680e      	ldr	r6, [r1, #0]
 8005ad6:	4620      	mov	r0, r4
 8005ad8:	f000 f868 	bl	8005bac <_free_r>
 8005adc:	4631      	mov	r1, r6
 8005ade:	e7e1      	b.n	8005aa4 <_reclaim_reent+0x1c>
 8005ae0:	6961      	ldr	r1, [r4, #20]
 8005ae2:	b111      	cbz	r1, 8005aea <_reclaim_reent+0x62>
 8005ae4:	4620      	mov	r0, r4
 8005ae6:	f000 f861 	bl	8005bac <_free_r>
 8005aea:	69e1      	ldr	r1, [r4, #28]
 8005aec:	b111      	cbz	r1, 8005af4 <_reclaim_reent+0x6c>
 8005aee:	4620      	mov	r0, r4
 8005af0:	f000 f85c 	bl	8005bac <_free_r>
 8005af4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005af6:	b111      	cbz	r1, 8005afe <_reclaim_reent+0x76>
 8005af8:	4620      	mov	r0, r4
 8005afa:	f000 f857 	bl	8005bac <_free_r>
 8005afe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005b00:	b111      	cbz	r1, 8005b08 <_reclaim_reent+0x80>
 8005b02:	4620      	mov	r0, r4
 8005b04:	f000 f852 	bl	8005bac <_free_r>
 8005b08:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005b0a:	b111      	cbz	r1, 8005b12 <_reclaim_reent+0x8a>
 8005b0c:	4620      	mov	r0, r4
 8005b0e:	f000 f84d 	bl	8005bac <_free_r>
 8005b12:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005b14:	b111      	cbz	r1, 8005b1c <_reclaim_reent+0x94>
 8005b16:	4620      	mov	r0, r4
 8005b18:	f000 f848 	bl	8005bac <_free_r>
 8005b1c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005b1e:	b111      	cbz	r1, 8005b26 <_reclaim_reent+0x9e>
 8005b20:	4620      	mov	r0, r4
 8005b22:	f000 f843 	bl	8005bac <_free_r>
 8005b26:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005b28:	b111      	cbz	r1, 8005b30 <_reclaim_reent+0xa8>
 8005b2a:	4620      	mov	r0, r4
 8005b2c:	f000 f83e 	bl	8005bac <_free_r>
 8005b30:	6a23      	ldr	r3, [r4, #32]
 8005b32:	b11b      	cbz	r3, 8005b3c <_reclaim_reent+0xb4>
 8005b34:	4620      	mov	r0, r4
 8005b36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005b3a:	4718      	bx	r3
 8005b3c:	bd70      	pop	{r4, r5, r6, pc}
 8005b3e:	bf00      	nop
 8005b40:	20000010 	.word	0x20000010

08005b44 <__libc_init_array>:
 8005b44:	b570      	push	{r4, r5, r6, lr}
 8005b46:	4d0d      	ldr	r5, [pc, #52]	@ (8005b7c <__libc_init_array+0x38>)
 8005b48:	4c0d      	ldr	r4, [pc, #52]	@ (8005b80 <__libc_init_array+0x3c>)
 8005b4a:	1b64      	subs	r4, r4, r5
 8005b4c:	10a4      	asrs	r4, r4, #2
 8005b4e:	2600      	movs	r6, #0
 8005b50:	42a6      	cmp	r6, r4
 8005b52:	d109      	bne.n	8005b68 <__libc_init_array+0x24>
 8005b54:	4d0b      	ldr	r5, [pc, #44]	@ (8005b84 <__libc_init_array+0x40>)
 8005b56:	4c0c      	ldr	r4, [pc, #48]	@ (8005b88 <__libc_init_array+0x44>)
 8005b58:	f000 f87e 	bl	8005c58 <_init>
 8005b5c:	1b64      	subs	r4, r4, r5
 8005b5e:	10a4      	asrs	r4, r4, #2
 8005b60:	2600      	movs	r6, #0
 8005b62:	42a6      	cmp	r6, r4
 8005b64:	d105      	bne.n	8005b72 <__libc_init_array+0x2e>
 8005b66:	bd70      	pop	{r4, r5, r6, pc}
 8005b68:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b6c:	4798      	blx	r3
 8005b6e:	3601      	adds	r6, #1
 8005b70:	e7ee      	b.n	8005b50 <__libc_init_array+0xc>
 8005b72:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b76:	4798      	blx	r3
 8005b78:	3601      	adds	r6, #1
 8005b7a:	e7f2      	b.n	8005b62 <__libc_init_array+0x1e>
 8005b7c:	08005cd8 	.word	0x08005cd8
 8005b80:	08005cd8 	.word	0x08005cd8
 8005b84:	08005cd8 	.word	0x08005cd8
 8005b88:	08005cdc 	.word	0x08005cdc

08005b8c <__retarget_lock_acquire_recursive>:
 8005b8c:	4770      	bx	lr

08005b8e <__retarget_lock_release_recursive>:
 8005b8e:	4770      	bx	lr

08005b90 <memcpy>:
 8005b90:	440a      	add	r2, r1
 8005b92:	4291      	cmp	r1, r2
 8005b94:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b98:	d100      	bne.n	8005b9c <memcpy+0xc>
 8005b9a:	4770      	bx	lr
 8005b9c:	b510      	push	{r4, lr}
 8005b9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ba2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ba6:	4291      	cmp	r1, r2
 8005ba8:	d1f9      	bne.n	8005b9e <memcpy+0xe>
 8005baa:	bd10      	pop	{r4, pc}

08005bac <_free_r>:
 8005bac:	b538      	push	{r3, r4, r5, lr}
 8005bae:	4605      	mov	r5, r0
 8005bb0:	2900      	cmp	r1, #0
 8005bb2:	d041      	beq.n	8005c38 <_free_r+0x8c>
 8005bb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bb8:	1f0c      	subs	r4, r1, #4
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	bfb8      	it	lt
 8005bbe:	18e4      	addlt	r4, r4, r3
 8005bc0:	f000 f83e 	bl	8005c40 <__malloc_lock>
 8005bc4:	4a1d      	ldr	r2, [pc, #116]	@ (8005c3c <_free_r+0x90>)
 8005bc6:	6813      	ldr	r3, [r2, #0]
 8005bc8:	b933      	cbnz	r3, 8005bd8 <_free_r+0x2c>
 8005bca:	6063      	str	r3, [r4, #4]
 8005bcc:	6014      	str	r4, [r2, #0]
 8005bce:	4628      	mov	r0, r5
 8005bd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005bd4:	f000 b83a 	b.w	8005c4c <__malloc_unlock>
 8005bd8:	42a3      	cmp	r3, r4
 8005bda:	d908      	bls.n	8005bee <_free_r+0x42>
 8005bdc:	6820      	ldr	r0, [r4, #0]
 8005bde:	1821      	adds	r1, r4, r0
 8005be0:	428b      	cmp	r3, r1
 8005be2:	bf01      	itttt	eq
 8005be4:	6819      	ldreq	r1, [r3, #0]
 8005be6:	685b      	ldreq	r3, [r3, #4]
 8005be8:	1809      	addeq	r1, r1, r0
 8005bea:	6021      	streq	r1, [r4, #0]
 8005bec:	e7ed      	b.n	8005bca <_free_r+0x1e>
 8005bee:	461a      	mov	r2, r3
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	b10b      	cbz	r3, 8005bf8 <_free_r+0x4c>
 8005bf4:	42a3      	cmp	r3, r4
 8005bf6:	d9fa      	bls.n	8005bee <_free_r+0x42>
 8005bf8:	6811      	ldr	r1, [r2, #0]
 8005bfa:	1850      	adds	r0, r2, r1
 8005bfc:	42a0      	cmp	r0, r4
 8005bfe:	d10b      	bne.n	8005c18 <_free_r+0x6c>
 8005c00:	6820      	ldr	r0, [r4, #0]
 8005c02:	4401      	add	r1, r0
 8005c04:	1850      	adds	r0, r2, r1
 8005c06:	4283      	cmp	r3, r0
 8005c08:	6011      	str	r1, [r2, #0]
 8005c0a:	d1e0      	bne.n	8005bce <_free_r+0x22>
 8005c0c:	6818      	ldr	r0, [r3, #0]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	6053      	str	r3, [r2, #4]
 8005c12:	4408      	add	r0, r1
 8005c14:	6010      	str	r0, [r2, #0]
 8005c16:	e7da      	b.n	8005bce <_free_r+0x22>
 8005c18:	d902      	bls.n	8005c20 <_free_r+0x74>
 8005c1a:	230c      	movs	r3, #12
 8005c1c:	602b      	str	r3, [r5, #0]
 8005c1e:	e7d6      	b.n	8005bce <_free_r+0x22>
 8005c20:	6820      	ldr	r0, [r4, #0]
 8005c22:	1821      	adds	r1, r4, r0
 8005c24:	428b      	cmp	r3, r1
 8005c26:	bf04      	itt	eq
 8005c28:	6819      	ldreq	r1, [r3, #0]
 8005c2a:	685b      	ldreq	r3, [r3, #4]
 8005c2c:	6063      	str	r3, [r4, #4]
 8005c2e:	bf04      	itt	eq
 8005c30:	1809      	addeq	r1, r1, r0
 8005c32:	6021      	streq	r1, [r4, #0]
 8005c34:	6054      	str	r4, [r2, #4]
 8005c36:	e7ca      	b.n	8005bce <_free_r+0x22>
 8005c38:	bd38      	pop	{r3, r4, r5, pc}
 8005c3a:	bf00      	nop
 8005c3c:	20004d1c 	.word	0x20004d1c

08005c40 <__malloc_lock>:
 8005c40:	4801      	ldr	r0, [pc, #4]	@ (8005c48 <__malloc_lock+0x8>)
 8005c42:	f7ff bfa3 	b.w	8005b8c <__retarget_lock_acquire_recursive>
 8005c46:	bf00      	nop
 8005c48:	20004d18 	.word	0x20004d18

08005c4c <__malloc_unlock>:
 8005c4c:	4801      	ldr	r0, [pc, #4]	@ (8005c54 <__malloc_unlock+0x8>)
 8005c4e:	f7ff bf9e 	b.w	8005b8e <__retarget_lock_release_recursive>
 8005c52:	bf00      	nop
 8005c54:	20004d18 	.word	0x20004d18

08005c58 <_init>:
 8005c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c5a:	bf00      	nop
 8005c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c5e:	bc08      	pop	{r3}
 8005c60:	469e      	mov	lr, r3
 8005c62:	4770      	bx	lr

08005c64 <_fini>:
 8005c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c66:	bf00      	nop
 8005c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c6a:	bc08      	pop	{r3}
 8005c6c:	469e      	mov	lr, r3
 8005c6e:	4770      	bx	lr
